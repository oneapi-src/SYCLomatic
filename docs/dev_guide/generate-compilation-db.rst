Generate a Compilation Database
===============================

A `compilation database <https://clang.llvm.org/docs/JSONCompilationDatabase.html>`_
is a JSON file that contains an array of command objects, each of which usually
contains three parts:

* ``directory``: The working directory of the compilation. All paths specified
  in the command or file fields must be either absolute or relative to this directory.
* ``command``: The compile command.
* ``file``: The translation unit’s main source file that is processed in the
  compilation step.

The compilation database lists detailed build options for each translation unit’s
main source file, which can be consumed by |tool_name| to guide the code project migration.

For example:

.. code-block:: none
   :linenos:

   [
     {
       "directory": "/path/to/project",
       "command": "/usr/bin/clang++ ...  -Iinclude_path -D_FOO_=VALUE -c ./foo/foo.cpp",
       "file": "./foo/foo.cpp"
     },
     ...
     {
       "directory": "/path/to/project",
       "command": "/usr/bin/clang++ ... -Iinclude_path -D_BAR_=VALUE -c ./foo/bar.cpp",
       "file": "./foo/bar.cpp"
     }
   ]


Generate a Compilation Database for Makefile-Based Projects
-----------------------------------------------------------

The source code in Makefile-based projects can be compiled and linked into an
executable binary or library by running build commands specified in the project
Makefile.

For Makefile-based projects, you can generate the compilation database by running
``intercept-build make``.

Use the `folder-options-dpct <https://github.com/oneapi-src/oneAPI-samples/tree/master/Tools/Migration/folder-options-dpct>`_ sample to show the generation of compilation database.

#. Change to the ``folder-options-dpct`` sample directory.
#. Run the intercept-build tool to generate the compilation database:

   .. code-block:: none
      :linenos:

      intercept-build make

   The compilation datebase ``compile_commands.json`` is created in the sample directory.


Generate a Compilation Database for CMake-based Projects
--------------------------------------------------------

CMake uses ``CMakeLists.txt`` files to describe project configuration, source
files, and dependencies. When using CMake, make sure that all the dependent
software that ``CMakeLists.txt`` files depend on has been installed, so that a
functional Makefile can be generated by CMake.

There are two options to generate compilation database for CMake-based projects.

Option One: Use intercept-build to Generate the Compilation Database
********************************************************************

The following steps show how to generate the compilation database:

#. Install the required software dependencies for the project.
#. In a command window, go to the project folder.
#. In the project folder create and navigate to a new build directory:

   .. code-block:: none
      :linenos:

      mkdir build && cd build

#. Run CMake to generate a Makefile:

   .. code-block:: none
      :linenos:

      cmake ../

#. Run ``intercept-build`` to generate the compilation database:

   .. code-block:: none
      :linenos:

	  intercept-build make

Option Two: Use CMake Option to Generate the Compilation Database
*****************************************************************

With CMake 3.5 version or higher, you can use the CMake option
``CMAKE_EXPORT_COMPILE_COMMANDS`` to generate the compilation database. For example,
the following command generates the compilation database ``compile_commands.json``
in the build directory:

.. code-block:: none
   :linenos:

    cmake  -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ../

.. note::

   CMake 3.10 or higher is recommended as it provides better support for CUDA source code.

Generate a Compilation Database for Projects Using Other Build Systems
----------------------------------------------------------------------

For projects using other build systems, a compilation database can be generated
based on the build log of the project.

#. Collect the build log during project build.

   For most build systems there is a way to generate verbose build log information by setting the corresponding build options. For example:

   .. list-table::
      :widths: 50 50

      * - Build System
        - Option to Generate Verbose Build Log
      * - Make
        - ``VERBOSE=1``
      * - CMake/Ninja
        - ``-DCMAKE_VERBOSE_MAKEFILE=ON``
      * - Bazel
        - ``--subcommands``

   Build your project using the appropriate options to generate a verbose build log.
#. Generate compilation database by parsing the build log.

   The ``intercept-build`` command provided with |tool_name| can parse build log file
   to generate compilation database.

   You can use the `folder-options-dpct <https://github.com/oneapi-src/oneAPI-samples/tree/master/Tools/Migration/folder-options-dpct>`_ sample to show the generation of compilation database using the build log.
#. Change to the ``folder-options-dpct`` sample directory.
#. Run following command to collect the build log:

   .. code-block:: none
      :linenos:

      make VERBOSE=1 -B > ./build_log.txt

	The content of “build_log.txt” should look like the following:

	.. code-block:: none
       :linenos:

       nvcc -c  -I./foo -I./foo/bar foo/main.cu -o foo/main.o
       nvcc -c  -I./foo -I./foo/bar foo/bar/util.cu -o foo/bar/util.o
       nvcc  ./foo/main.o ./foo/bar/util.o -o foo-bar

#. Generate the compilation database by parsing the build log:

   .. code-block:: none
      :linenos:

      intercept-build --parse-build-log=build_log.txt --work-directory=./

   The compilation database ``compile_commands.json`` will be generated in the
   current directory. 

For more information about intercept-build, run ``intercept-build --help``.


