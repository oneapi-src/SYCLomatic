.. _id_DPCT1102:

DPCT1102
========

Message
-------

.. _msg-1102-start:

Zero-length arrays are not permitted in SYCL device code.

.. _msg-1102-end:

Detailed Help
-------------

Zero-length arrays are not supported in C++ standard and SYCL Spec. It may be
supported by some host compiler implementations, but it is not supported by
Intel(R) oneAPI DPC++/C++ Compiler for device code.

Suggestions to Fix
------------------

Use array which length is greater than zero.

Example:

Original code:

.. code-block:: cpp
   :linenos:
   struct Foo {
     ...
     float data[0];
   };
   __global__ void kernel(Foo *foo) {
     Foo->data[DATA_NUM - 1] = 123.f;
   }
   int main() {
     Foo* foo;
     cudaMalloc(&foo, sizeof(Foo) + DATA_NUM * sizeof(float));
     kernel<<<1, 1>>>(foo);
     ...
   }
Migrated code:

.. code-block:: cpp
   :linenos:
   struct Foo {
     ...
     std::byte data[0];
   };
   void kernel(Foo *foo) {
     foo->data[DATA_NUM - 1] = 123.f;
   }
   int main() {
     dpct::device_ext &dev_ct1 = dpct::get_current_device();
     sycl::queue &q_ct1 = dev_ct1.default_queue();
     Foo* foo;
     foo = (Foo *)sycl::malloc_device(sizeof(Foo) + DATA_NUM * sizeof(float), q_ct1);
     q_ct1.parallel_for(
         sycl::nd_range<3>(sycl::range<3>(1, 1, 1), sycl::range<3>(1, 1, 1)),
         [=](sycl::nd_item<3> item_ct1) {
           kernel(foo);
         });
     ...
   }
Fixed code:

.. code-block:: cpp
   :linenos:
   struct Foo {
     ...
     std::byte data[DATA_NUM];
   };
   void kernel(Foo *foo) {
     foo->data[DATA_NUM - 1] = 123.f;
   }
   int main() {
     dpct::device_ext &dev_ct1 = dpct::get_current_device();
     sycl::queue &q_ct1 = dev_ct1.default_queue();
     Foo* foo;
     foo = (Foo *)sycl::malloc_device(sizeof(Foo), q_ct1);
     q_ct1.parallel_for(
         sycl::nd_range<3>(sycl::range<3>(1, 1, 1), sycl::range<3>(1, 1, 1)),
         [=](sycl::nd_item<3> item_ct1) {
           kernel(foo);
         });
     ...
   }
