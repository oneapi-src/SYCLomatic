.. _DPCT1050:

DPCT1050
========

Message
-------

.. _msg-1050-start:

The template argument of the *<type>* could not be deduced. You need to update
this code.

.. _msg-1050-end:

Detailed Help
-------------

This warning is generated when the template argument could not be deduced by the
|tool_name| because the variable of this type was not used directly in
the code. |tool_name| inserts "dpct_placeholder", instead of type,
in such cases.

Suggestions to Fix
------------------

Replace the "dpct_placeholder" with the real argument.

For example, this original CUDA\* code:

.. code-block:: cpp
   :linenos:

    __global__ void kernel(const cudaTextureObject_t texObj) {}
    
    void foo(const cudaTextureObject_t texObj) { kernel<<<1, 1>>>(texObj); }
    
    void bar() {
      float4 *d_data42;
      cudaArray_t a42;
      cudaMalloc(&d_data42, sizeof(float4) * 32 * 32);
      cudaChannelFormatDesc desc42 =
          cudaCreateChannelDesc(32, 32, 32, 32, cudaChannelFormatKindFloat);
      cudaMallocArray(&a42, &desc42, 32, 32);
      cudaMemcpyToArray(a42, 0, 0, d_data42, 32 * 32 * sizeof(float4),
                        cudaMemcpyDeviceToDevice);
      cudaTextureObject_t tex42;
      cudaResourceDesc res42;
      cudaTextureDesc texDesc42;
      res42.resType = cudaResourceTypePitch2D;
      res42.res.pitch2D.devPtr = d_data42;
      res42.res.pitch2D.desc = desc42;
      res42.res.pitch2D.width = sizeof(float4) * 32;
      res42.res.pitch2D.height = 32;
      res42.res.pitch2D.pitchInBytes = sizeof(float4) * 32;
      res42.resType = cudaResourceTypeArray;
      res42.res.array.array = a42;
      texDesc42.addressMode[0] = cudaAddressModeClamp;
      texDesc42.addressMode[1] = cudaAddressModeClamp;
      texDesc42.addressMode[2] = cudaAddressModeClamp;
      texDesc42.filterMode = cudaFilterModePoint;
      texDesc42.normalizedCoords = 1;
      cudaCreateTextureObject(&tex42, &res42, &texDesc42, NULL);
      foo(tex42);
    }

results in the following migrated SYCL code:

.. code-block:: cpp
   :linenos:

    /*
    DPCT1050:1: The template argument of the image_accessor_ext could not be
    deduced. You need to update this code.
    */
    void kernel(const dpct::image_accessor_ext<
                dpct_placeholder /*Fix the type manually*/, 1>
                    texObj) {}
    
    /*
    DPCT1050:0: The template argument of the image_accessor_ext could not be
    deduced. You need to update this code.
    */
    void foo(const dpct::image_wrapper_base_p texObj) {
      dpct::get_default_queue().submit([&](sycl::handler &cgh) {
        auto texObj_acc = static_cast<dpct::image_wrapper<
            dpct_placeholder /*Fix the type manually*/, 1> *>(texObj)
                              ->get_access(cgh);
    
        auto texObj_smpl = texObj->get_sampler();
    
        cgh.parallel_for(
            sycl::nd_range<3>(sycl::range<3>(1, 1, 1), sycl::range<3>(1, 1, 1)),
            [=](sycl::nd_item<3> item_ct1) {
              kernel(dpct::image_accessor_ext<
                     dpct_placeholder /*Fix the type manually*/, 1>(texObj_smpl,
                                                                    texObj_acc));
            });
      });
    }
    
    void bar() {
      sycl::float4 *d_data42;
      dpct::image_matrix_p a42;
      d_data42 = (sycl::float4 *)sycl::malloc_device(sizeof(sycl::float4) * 32 * 32,
                                                     dpct::get_default_queue());
      dpct::image_channel desc42 =
          dpct::image_channel(32, 32, 32, 32, dpct::image_channel_data_type::fp);
      a42 = new dpct::image_matrix(desc42, sycl::range<2>(32, 32));
      dpct::dpct_memcpy(a42->to_pitched_data(), sycl::id<3>(0, 0, 0),
                        dpct::pitched_data(d_data42, 32 * 32 * sizeof(sycl::float4),
                                           32 * 32 * sizeof(sycl::float4), 1),
                        sycl::id<3>(0, 0, 0),
                        sycl::range<3>(32 * 32 * sizeof(sycl::float4), 1, 1));
      dpct::image_wrapper_base_p tex42;
      dpct::image_data res42;
      dpct::sampling_info texDesc42;
    
      res42.set_data(d_data42, sizeof(sycl::float4) * 32, 32,
                     sizeof(sycl::float4) * 32, desc42);
    
      res42.set_data(a42);
      texDesc42.set(sycl::addressing_mode::clamp_to_edge,
                    sycl::filtering_mode::nearest,
                    sycl::coordinate_normalization_mode::normalized);
      tex42 = dpct::create_image_wrapper(res42, texDesc42);
      foo(tex42);
    }

which is rewritten to:

.. code-block:: cpp
   :linenos:

    void kernel(const dpct::image_accessor_ext<sycl::float4, 2> texObj) {}
    
    void foo(const dpct::image_wrapper_base_p texObj) {
      dpct::get_default_queue().submit([&](sycl::handler &cgh) {
        auto texObj_acc = static_cast<dpct::image_wrapper<sycl::float4, 2> *>(texObj)
                              ->get_access(cgh);
    
        auto texObj_smpl = texObj->get_sampler();
    
        cgh.parallel_for(
            sycl::nd_range<3>(sycl::range<3>(1, 1, 1), sycl::range<3>(1, 1, 1)),
            [=](sycl::nd_item<3> item_ct1) {
              kernel(dpct::image_accessor_ext<sycl::float4, 2>(texObj_smpl,
                                                               texObj_acc));
            });
      });
    }
    
    void bar() {
      sycl::float4 *d_data42;
      dpct::image_matrix_p a42;
      d_data42 = (sycl::float4 *)sycl::malloc_device(sizeof(sycl::float4) * 32 * 32,
                                                     dpct::get_default_queue());
      dpct::image_channel desc42 =
          dpct::image_channel(32, 32, 32, 32, dpct::image_channel_data_type::fp);
      a42 = new dpct::image_matrix(desc42, sycl::range<2>(32, 32));
      dpct::dpct_memcpy(a42->to_pitched_data(), sycl::id<3>(0, 0, 0),
                        dpct::pitched_data(d_data42, 32 * 32 * sizeof(sycl::float4),
                                           32 * 32 * sizeof(sycl::float4), 1),
                        sycl::id<3>(0, 0, 0),
                        sycl::range<3>(32 * 32 * sizeof(sycl::float4), 1, 1));
      dpct::image_wrapper_base_p tex42;
      dpct::image_data res42;
      dpct::sampling_info texDesc42;
    
      res42.set_data(d_data42, sizeof(sycl::float4) * 32, 32,
                     sizeof(sycl::float4) * 32, desc42);
    
      res42.set_data(a42);
      texDesc42.set(sycl::addressing_mode::clamp_to_edge,
                    sycl::filtering_mode::nearest,
                    sycl::coordinate_normalization_mode::normalized);
      tex42 = dpct::create_image_wrapper(res42, texDesc42);
      foo(tex42);
    }

