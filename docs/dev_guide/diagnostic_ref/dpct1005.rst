.. _DPCT1005:

DPCT1005
========

Message
-------

.. _msg-1005-start:

The SYCL device version is different from CUDA Compute Compatibility. You may
need to rewrite this code.

.. _msg-1005-end:

Detailed Help
-------------

|tool_name| detected a usage of CUDA\* Compute Capability-dependent
logic in the original program.

|dpcpp| does not support CUDA Compute Capability. The logic in the generated code
uses a version extracted from the ``cl::sycl::info::device::version``, which is
different than CUDA Compute Capability.


Suggestions to Fix
------------------

Review the logic and adjust it.

For example, this original CUDA code:

.. code-block:: cpp
   :linenos:

   int main() {
     cudaDeviceProp deviceProp;
     int deviceID = 0;
     cudaGetDeviceProperties(&deviceProp, deviceID);
     if (deviceProp.major >= 3) {
       // Use functionality from Compute Capability 3.0+
     }
     return 0;
   }

results in the following migrated SYCL\* code:

.. code-block:: cpp
   :linenos:

   int main() {
     dpct::device_info deviceProp;
     dpct::dev_mgr::instance().get_device(0).get_device_info(deviceProp);
     /*
     DPCT1005:0: The SYCL device version is different from CUDA Compute
     Compatibility. You may need to rewrite this code.
     */
     if (deviceProp.get_major_version() >= 3) {
       // Invoke kernel using __shfl() which requires Compute Capability 3.0+
     }
     return 0;
   }

which is rewritten to:

.. code-block:: cpp
   :linenos:

   int main() {
     dpct::device_info deviceProp;
     dpct::dev_mgr::instance().get_device(0).get_device_info(deviceProp);
     // User is using LEVEL_ZERO GPU backend, its major version is 1.
     // Since SYCL supports sycl::select_from_group, change "3" => "1"
     if (deviceProp.get_major_version() >= 1) {
       // Invoke kernel using sycl::select_from_group
       ...
     }
     return 0;
   }

