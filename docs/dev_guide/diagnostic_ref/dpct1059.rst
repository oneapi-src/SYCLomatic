.. _DPCT1059:

DPCT1059
========

Message
-------

.. _msg-1059-start:

SYCL only supports 4-channel image format. Adjust the code.

.. _msg-1059-end:

Detailed Help
-------------

SYCL\* supports only 4-channel image format. The warning is emitted, when the tool
generates code with unsupported image format, which corresponds to the original
code. You can fix the resulting code by changing the image format. Note: suggested
workaround may impact code performance.

For example, this original CUDA\* code:

.. code-block:: cpp
   :linenos:

   static texture<uint2, 2> tex;
   
   __global__ void test_image() {
     uint2 tex_data = tex2D(tex, 0, 0);
   }
   void foo(uint2 *image_data) {
     ...
     test_image<<<1, 1>>>();
   }

results in the following migrated SYCL code:

.. code-block:: cpp
   :linenos:

   /*
   DPCT1059:0: SYCL only supports 4-channel image format. Adjust the code.
   */
   dpct::image_wrapper<sycl::uint2, 2> tex;
   
   void test_image(dpct::image_accessor_ext<sycl::uint2, 2> tex) {
     sycl::uint2 tex_data = tex.read(0, 0);
   }
   void foo(sycl::uint2 *image_data) {
     ...
     dpct::get_default_queue().submit([&](sycl::handler &cgh) {
       auto tex_acc = tex.get_access(cgh);
   
       auto tex_smpl = tex.get_sampler();
   
       cgh.parallel_for(
           sycl::nd_range<3>(sycl::range<3>(1, 1, 1), sycl::range<3>(1, 1, 1)),
           [=](sycl::nd_item<3> item_ct1) {
             test_image(
                 dpct::image_accessor_ext<sycl::uint2, 2>(tex_smpl, tex_acc));
           });
     });
   }

which is rewritten to:

.. code-block:: cpp
   :linenos:

   dpct::image_wrapper<sycl::uint4, 2> tex;
   
   void test_image(dpct::image_accessor_ext<sycl::uint4, 2> tex) {
     sycl::uint4 tex_data = tex.read(0, 0);
   }
   void foo(sycl::uint2 *image_data) {
     // (1) Please allocate sycl::uint4 type new_image_data and initialize the value with image_data.
     // (3) Bind new_image_data to the tex object instead of using the image_data.
     // (4) Free the memory of new_image_data after usage.
     ...
     dpct::get_default_queue().submit([&](sycl::handler &cgh) {
       auto tex_acc = tex.get_access(cgh);
   
       auto tex_smpl = tex.get_sampler();
   
       cgh.parallel_for(
           sycl::nd_range<3>(sycl::range<3>(1, 1, 1), sycl::range<3>(1, 1, 1)),
           [=](sycl::nd_item<3> item_ct1) {
             test_image(
                 dpct::image_accessor_ext<sycl::uint4, 2>(tex_smpl, tex_acc));
           });
     });
   }

Suggestions to Fix
------------------

You may need to rewrite this code.