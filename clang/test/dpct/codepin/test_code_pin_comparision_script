#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import unittest
from auto_compare import (  # replace 'yourscript' with the actual script name
    compare_data_value,
    compare_container_value,
    compare_list_value,
    comparison_error,
    get_check_point_list_from_json_file,
    compare_dict_value
)

class TestJsonComparison(unittest.TestCase):

    def test_compare_data_value_equal(self):
        """Test that equal data values do not raise an exception."""
        try:
            compare_data_value("value", "value")
        except Exception as e:
            self.fail(f"Unexpected exception raised: {e}")

    def test_compare_data_value_not_equal(self):
        """Test that non-equal data values raise a comparison_error."""
        with self.assertRaises(comparison_error):
            compare_data_value("value1", "value2")

    def test_compare_list_value_same(self):
        """Test that comparing lists with same values does not raise an exception."""
        try:
            compare_list_value([1, 2, 3], [1, 2, 3])
        except Exception as e:
            self.fail(f"Unexpected exception raised: {e}")

    def test_compare_list_value_different(self):
        """Test that comparing lists with different values raises a comparison_error."""
        with self.assertRaises(comparison_error):
            compare_list_value([1, 2, 3], [4, 5, 6])

    def test_compare_container_value_diff_length(self):
        """Test that containers of different lengths raise a comparison_error."""
        with self.assertRaises(comparison_error):
            compare_container_value([1, 2], [1, 2, 3])

    # Add more test cases covering the different functionalities and edge cases.
    
    # Optionally mock filesystem I/O if needed, then test get_check_point_list_from_json_file
class TestJsonComparisonMore2(unittest.TestCase):
    
    def test_compare_dict_value_same(self):
        """Test that comparing dicts with the same key-value pairs does not raise an exception."""
        try:
            compare_dict_value({'a': 1, 'b': 2}, {'a': 1, 'b': 2})
        except Exception as e:
            self.fail(f"Unexpected exception raised: {e}")

    def test_compare_dict_value_different(self):
        """Test that comparing dicts with different values raises a comparison_error."""
        with self.assertRaises(comparison_error) as cm:
            compare_dict_value({'a': 1, 'b': 2}, {'a': 3, 'b': 4})
        self.assertEqual(
            str(cm.exception.message), 
            '.\"a\".  the CUDA value "1" differs from the SYCL value "3".'
        )

    def test_compare_dict_value_missing_key(self):
        """Test that comparing dicts with a missing key raises a comparison_error."""
        with self.assertRaises(comparison_error) as cm:
            compare_dict_value({'a': 1, 'b': 2}, {'a': 1})
        self.assertEqual(
            str(cm.exception.message), 
            "Cannot find the b in SYCL dumped json.\n"
        )

    def test_compare_empty_lists(self):
        """Test that comparing two empty lists does not raise an exception."""
        try:
            compare_list_value([], [])
        except Exception as e:
            self.fail(f"Unexpected exception raised: {e}")

    def test_compare_empty_dicts(self):
        """Test that comparing two empty dicts does not raise an exception."""
        try:
            compare_dict_value({}, {})
        except Exception as e:
            self.fail(f"Unexpected exception raised: {e}")

    def test_compare_list_value_nested(self):
        """Test that comparing lists with nested containers raises no exception."""
        try:
            compare_list_value([1, [2, 3], {'a': 4}], [1, [2, 3], {'a': 4}])
        except Exception as e:
            self.fail(f"Unexpected exception raised: {e}")

    def test_compare_list_value_nested_failure(self):
        """Test that comparing lists with nested containers having different values raises an exception."""
        with self.assertRaises(comparison_error) as cm:
            compare_list_value([1, [2, 3], {'a': 4}], [1, [2, 3], {'a': 5}])
        error_msg_endswith = '.\"a\".  the CUDA value "4" differs from the SYCL value "5".'
        self.assertTrue(
            str(cm.exception.message).endswith(error_msg_endswith),
            f"Expected error message to end with '{error_msg_endswith}', got: {cm.exception.message}"
        )

if __name__ == '__main__':
    unittest.main()
