//CHECK: #ifndef __DPCT_CODEPIN_AUTOGEN_UTIL__
//CHECK: #define __DPCT_CODEPIN_AUTOGEN_UTIL__

//CHECK: struct Color;

//CHECK: template<typename T>
//CHECK: class Point3D;

//CHECK: struct PointCloud;

//CHECK: class Point3DExt;

//CHECK: struct Point2D;


//CHECK: namespace dpct {
//CHECK: namespace experimental {
//CHECK: namespace codepin {
//CHECK: namespace detail {
//CHECK: struct Color_codepin {
//CHECK: public:
//CHECK:   int r_codepin;
//CHECK:   int g_codepin;
//CHECK:   int b_codepin;
//CHECK: };

//CHECK: template<typename T>
//CHECK: class Point3D_codepin {
//CHECK: public:
//CHECK:   T x_codepin;
//CHECK:   T y_codepin;
//CHECK:   T z_codepin;
//CHECK: };

//CHECK: struct PointCloud_codepin {
//CHECK: public:
//CHECK:   float3 pc_codepin[3];
//CHECK: };

//CHECK: class Point3DExt_codepin : public Point3D_codepin<int> {
//CHECK: public:
//CHECK:   Color_codepin col_codepin;
//CHECK: };

//CHECK: struct Point2D_codepin {
//CHECK: public:
//CHECK:   int x_codepin;
//CHECK:   int y_codepin;
//CHECK: };

//CHECK: template <> class data_ser<Color_codepin> {
//CHECK: public:
//CHECK:   static void dump(dpctexp::codepin::detail::json_stringstream &ss, Color_codepin &value,
//CHECK:                    dpctexp::codepin::queue_t queue) {
//CHECK:     auto arr = ss.array();
//CHECK:     {
//CHECK:       auto obj0 = arr.object();
//CHECK:       obj0.key("r");
//CHECK:       auto value0 = obj0.value<dpctexp::codepin::detail::json_stringstream::json_obj>();
//CHECK:       dpctexp::codepin::detail::data_ser<int>::print_type_name(value0);
//CHECK:       obj0.key("Data");
//CHECK:       dpctexp::codepin::detail::data_ser<int>::dump(ss, value.r_codepin, queue);
//CHECK:     }
//CHECK:     {
//CHECK:       auto obj1 = arr.object();
//CHECK:       obj1.key("g");
//CHECK:       auto value1 = obj1.value<dpctexp::codepin::detail::json_stringstream::json_obj>();
//CHECK:       dpctexp::codepin::detail::data_ser<int>::print_type_name(value1);
//CHECK:       obj1.key("Data");
//CHECK:       dpctexp::codepin::detail::data_ser<int>::dump(ss, value.g_codepin, queue);
//CHECK:     }
//CHECK:     {
//CHECK:       auto obj2 = arr.object();
//CHECK:       obj2.key("b");
//CHECK:       auto value2 = obj2.value<dpctexp::codepin::detail::json_stringstream::json_obj>();
//CHECK:       dpctexp::codepin::detail::data_ser<int>::print_type_name(value2);
//CHECK:       obj2.key("Data");
//CHECK:       dpctexp::codepin::detail::data_ser<int>::dump(ss, value.b_codepin, queue);
//CHECK:     }

//CHECK:   }
//CHECK:   static void print_type_name(json_stringstream::json_obj &obj) {
//CHECK:     obj.key("Type");
//CHECK:     obj.value("Color_codepin");
//CHECK:   }
//CHECK: };

//CHECK: template <> class data_ser<Point3D_codepin<int>> {
//CHECK: public:
//CHECK:   static void dump(dpctexp::codepin::detail::json_stringstream &ss, Point3D_codepin<int> &value,
//CHECK:                    dpctexp::codepin::queue_t queue) {
//CHECK:     auto arr = ss.array();
//CHECK:     {
//CHECK:       auto obj0 = arr.object();
//CHECK:       obj0.key("x");
//CHECK:       auto value0 = obj0.value<dpctexp::codepin::detail::json_stringstream::json_obj>();
//CHECK:       dpctexp::codepin::detail::data_ser<int>::print_type_name(value0);
//CHECK:       obj0.key("Data");
//CHECK:       dpctexp::codepin::detail::data_ser<int>::dump(ss, value.x_codepin, queue);
//CHECK:     }
//CHECK:     {
//CHECK:       auto obj1 = arr.object();
//CHECK:       obj1.key("y");
//CHECK:       auto value1 = obj1.value<dpctexp::codepin::detail::json_stringstream::json_obj>();
//CHECK:       dpctexp::codepin::detail::data_ser<int>::print_type_name(value1);
//CHECK:       obj1.key("Data");
//CHECK:       dpctexp::codepin::detail::data_ser<int>::dump(ss, value.y_codepin, queue);
//CHECK:     }
//CHECK:     {
//CHECK:       auto obj2 = arr.object();
//CHECK:       obj2.key("z");
//CHECK:       auto value2 = obj2.value<dpctexp::codepin::detail::json_stringstream::json_obj>();
//CHECK:       dpctexp::codepin::detail::data_ser<int>::print_type_name(value2);
//CHECK:       obj2.key("Data");
//CHECK:       dpctexp::codepin::detail::data_ser<int>::dump(ss, value.z_codepin, queue);
//CHECK:     }

//CHECK:   }
//CHECK:   static void print_type_name(json_stringstream::json_obj &obj) {
//CHECK:     obj.key("Type");
//CHECK:     obj.value("Point3D_codepin<int>");
//CHECK:   }
//CHECK: };

//CHECK: template <> class data_ser<PointCloud_codepin> {
//CHECK: public:
//CHECK:   static void dump(dpctexp::codepin::detail::json_stringstream &ss, PointCloud_codepin &value,
//CHECK:                    dpctexp::codepin::queue_t queue) {
//CHECK:     auto arr = ss.array();
//CHECK:     {
//CHECK:       auto obj0 = arr.object();
//CHECK:       obj0.key("pc");
//CHECK:       auto value0 = obj0.value<dpctexp::codepin::detail::json_stringstream::json_obj>();
//CHECK:       dpctexp::codepin::detail::data_ser<float3[3]>::print_type_name(value0);
//CHECK:       obj0.key("Data");
//CHECK:       dpctexp::codepin::detail::data_ser<float3[3]>::dump(ss, value.pc_codepin, queue);
//CHECK:     }

//CHECK:   }
//CHECK:   static void print_type_name(json_stringstream::json_obj &obj) {
//CHECK:     obj.key("Type");
//CHECK:     obj.value("PointCloud_codepin");
//CHECK:   }
//CHECK: };

//CHECK: template <> class data_ser<PointCloud> {
//CHECK: public:
//CHECK:   static void dump(dpctexp::codepin::detail::json_stringstream &ss, PointCloud &value,
//CHECK:                    dpctexp::codepin::queue_t queue) {
//CHECK:     PointCloud_codepin& temp = reinterpret_cast<PointCloud_codepin&>(value);
//CHECK:     dpctexp::codepin::detail::data_ser<PointCloud_codepin>::dump(ss, temp, queue);
//CHECK:   }
//CHECK:   static void print_type_name(json_stringstream::json_obj &obj) {
//CHECK:     obj.key("Type");
//CHECK:     obj.value("PointCloud");
//CHECK:   }
//CHECK: };

//CHECK: template <> class data_ser<Point3DExt_codepin> {
//CHECK: public:
//CHECK:   static void dump(dpctexp::codepin::detail::json_stringstream &ss, Point3DExt_codepin &value,
//CHECK:                    dpctexp::codepin::queue_t queue) {
//CHECK:     auto arr = ss.array();
//CHECK:     {
//CHECK:       auto obj0 = arr.object();
//CHECK:       obj0.key("x");
//CHECK:       auto value0 = obj0.value<dpctexp::codepin::detail::json_stringstream::json_obj>();
//CHECK:       dpctexp::codepin::detail::data_ser<int>::print_type_name(value0);
//CHECK:       obj0.key("Data");
//CHECK:       dpctexp::codepin::detail::data_ser<int>::dump(ss, value.x_codepin, queue);
//CHECK:     }
//CHECK:     {
//CHECK:       auto obj1 = arr.object();
//CHECK:       obj1.key("y");
//CHECK:       auto value1 = obj1.value<dpctexp::codepin::detail::json_stringstream::json_obj>();
//CHECK:       dpctexp::codepin::detail::data_ser<int>::print_type_name(value1);
//CHECK:       obj1.key("Data");
//CHECK:       dpctexp::codepin::detail::data_ser<int>::dump(ss, value.y_codepin, queue);
//CHECK:     }
//CHECK:     {
//CHECK:       auto obj2 = arr.object();
//CHECK:       obj2.key("z");
//CHECK:       auto value2 = obj2.value<dpctexp::codepin::detail::json_stringstream::json_obj>();
//CHECK:       dpctexp::codepin::detail::data_ser<int>::print_type_name(value2);
//CHECK:       obj2.key("Data");
//CHECK:       dpctexp::codepin::detail::data_ser<int>::dump(ss, value.z_codepin, queue);
//CHECK:     }
//CHECK:     {
//CHECK:       auto obj3 = arr.object();
//CHECK:       obj3.key("col");
//CHECK:       auto value3 = obj3.value<dpctexp::codepin::detail::json_stringstream::json_obj>();
//CHECK:       dpctexp::codepin::detail::data_ser<Color_codepin>::print_type_name(value3);
//CHECK:       obj3.key("Data");
//CHECK:       dpctexp::codepin::detail::data_ser<Color_codepin>::dump(ss, value.col_codepin, queue);
//CHECK:     }

//CHECK:   }
//CHECK:   static void print_type_name(json_stringstream::json_obj &obj) {
//CHECK:     obj.key("Type");
//CHECK:     obj.value("Point3DExt_codepin");
//CHECK:   }
//CHECK: };

//CHECK: template <> class data_ser<Point3DExt> {
//CHECK: public:
//CHECK:   static void dump(dpctexp::codepin::detail::json_stringstream &ss, Point3DExt &value,
//CHECK:                    dpctexp::codepin::queue_t queue) {
//CHECK:     Point3DExt_codepin& temp = reinterpret_cast<Point3DExt_codepin&>(value);
//CHECK:     dpctexp::codepin::detail::data_ser<Point3DExt_codepin>::dump(ss, temp, queue);
//CHECK:   }
//CHECK:   static void print_type_name(json_stringstream::json_obj &obj) {
//CHECK:     obj.key("Type");
//CHECK:     obj.value("Point3DExt");
//CHECK:   }
//CHECK: };

//CHECK: template <> class data_ser<Point3D_codepin<float>> {
//CHECK: public:
//CHECK:   static void dump(dpctexp::codepin::detail::json_stringstream &ss, Point3D_codepin<float> &value,
//CHECK:                    dpctexp::codepin::queue_t queue) {
//CHECK:     auto arr = ss.array();
//CHECK:     {
//CHECK:       auto obj0 = arr.object();
//CHECK:       obj0.key("x");
//CHECK:       auto value0 = obj0.value<dpctexp::codepin::detail::json_stringstream::json_obj>();
//CHECK:       dpctexp::codepin::detail::data_ser<float>::print_type_name(value0);
//CHECK:       obj0.key("Data");
//CHECK:       dpctexp::codepin::detail::data_ser<float>::dump(ss, value.x_codepin, queue);
//CHECK:     }
//CHECK:     {
//CHECK:       auto obj1 = arr.object();
//CHECK:       obj1.key("y");
//CHECK:       auto value1 = obj1.value<dpctexp::codepin::detail::json_stringstream::json_obj>();
//CHECK:       dpctexp::codepin::detail::data_ser<float>::print_type_name(value1);
//CHECK:       obj1.key("Data");
//CHECK:       dpctexp::codepin::detail::data_ser<float>::dump(ss, value.y_codepin, queue);
//CHECK:     }
//CHECK:     {
//CHECK:       auto obj2 = arr.object();
//CHECK:       obj2.key("z");
//CHECK:       auto value2 = obj2.value<dpctexp::codepin::detail::json_stringstream::json_obj>();
//CHECK:       dpctexp::codepin::detail::data_ser<float>::print_type_name(value2);
//CHECK:       obj2.key("Data");
//CHECK:       dpctexp::codepin::detail::data_ser<float>::dump(ss, value.z_codepin, queue);
//CHECK:     }

//CHECK:   }
//CHECK:   static void print_type_name(json_stringstream::json_obj &obj) {
//CHECK:     obj.key("Type");
//CHECK:     obj.value("Point3D_codepin<float>");
//CHECK:   }
//CHECK: };

//CHECK: template <> class data_ser<Point3D<float>> {
//CHECK: public:
//CHECK:   static void dump(dpctexp::codepin::detail::json_stringstream &ss, Point3D<float> &value,
//CHECK:                    dpctexp::codepin::queue_t queue) {
//CHECK:     Point3D_codepin<float>& temp = reinterpret_cast<Point3D_codepin<float>&>(value);
//CHECK:     dpctexp::codepin::detail::data_ser<Point3D_codepin<float>>::dump(ss, temp, queue);
//CHECK:   }
//CHECK:   static void print_type_name(json_stringstream::json_obj &obj) {
//CHECK:     obj.key("Type");
//CHECK:     obj.value("Point3D<float>");
//CHECK:   }
//CHECK: };

//CHECK: template <> class data_ser<Point2D_codepin> {
//CHECK: public:
//CHECK:   static void dump(dpctexp::codepin::detail::json_stringstream &ss, Point2D_codepin &value,
//CHECK:                    dpctexp::codepin::queue_t queue) {
//CHECK:     auto arr = ss.array();
//CHECK:     {
//CHECK:       auto obj0 = arr.object();
//CHECK:       obj0.key("x");
//CHECK:       auto value0 = obj0.value<dpctexp::codepin::detail::json_stringstream::json_obj>();
//CHECK:       dpctexp::codepin::detail::data_ser<int>::print_type_name(value0);
//CHECK:       obj0.key("Data");
//CHECK:       dpctexp::codepin::detail::data_ser<int>::dump(ss, value.x_codepin, queue);
//CHECK:     }
//CHECK:     {
//CHECK:       auto obj1 = arr.object();
//CHECK:       obj1.key("y");
//CHECK:       auto value1 = obj1.value<dpctexp::codepin::detail::json_stringstream::json_obj>();
//CHECK:       dpctexp::codepin::detail::data_ser<int>::print_type_name(value1);
//CHECK:       obj1.key("Data");
//CHECK:       dpctexp::codepin::detail::data_ser<int>::dump(ss, value.y_codepin, queue);
//CHECK:     }

//CHECK:   }
//CHECK:   static void print_type_name(json_stringstream::json_obj &obj) {
//CHECK:     obj.key("Type");
//CHECK:     obj.value("Point2D_codepin");
//CHECK:   }
//CHECK: };

//CHECK: template <> class data_ser<Point2D> {
//CHECK: public:
//CHECK:   static void dump(dpctexp::codepin::detail::json_stringstream &ss, Point2D &value,
//CHECK:                    dpctexp::codepin::queue_t queue) {
//CHECK:     Point2D_codepin& temp = reinterpret_cast<Point2D_codepin&>(value);
//CHECK:     dpctexp::codepin::detail::data_ser<Point2D_codepin>::dump(ss, temp, queue);
//CHECK:   }
//CHECK:   static void print_type_name(json_stringstream::json_obj &obj) {
//CHECK:     obj.key("Type");
//CHECK:     obj.value("Point2D");
//CHECK:   }
//CHECK: };

//CHECK: }
//CHECK: }
//CHECK: }
//CHECK: }
//CHECK: #endif
