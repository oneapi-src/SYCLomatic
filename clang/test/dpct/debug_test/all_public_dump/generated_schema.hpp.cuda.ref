//CHECK:  #ifndef __DPCT_CODEPIN_GENRATED_SCHEMA__
//CHECK:  #define __DPCT_CODEPIN_GENRATED_SCHEMA__

//CHECK:  struct Color;

//CHECK:  template<typename T>
//CHECK:  class Point3D;

//CHECK:  struct PointCloud;

//CHECK:  class Point3DExt;

//CHECK:  struct Point2D;

//CHECK:  namespace dpct {
//CHECK:  namespace experimental {
//CHECK:  namespace detail {
//CHECK:  struct Color_codepin {
//CHECK:  public:
//CHECK:    int r;
//CHECK:    int g;
//CHECK:    int b;
//CHECK:  };

//CHECK:  template<typename T>
//CHECK:  class Point3D_codepin {
//CHECK:  public:
//CHECK:    T x;
//CHECK:    T y;
//CHECK:    T z;
//CHECK:  };

//CHECK:  struct PointCloud_codepin {
//CHECK:  public:
//CHECK:    float3 pc[3];
//CHECK:  };

//CHECK:  class Point3DExt_codepin : public Point3D_codepin<int> {
//CHECK:  public:
//CHECK:    Color_codepin col;
//CHECK:  };

//CHECK:  struct Point2D_codepin {
//CHECK:  public:
//CHECK:    int x;
//CHECK:    int y;
//CHECK:  };

//CHECK:  template <> class DataSer<Color_codepin> {
//CHECK:  public:
//CHECK:    static void dump(dpct::experimental::detail::json_stringstream &ss, Color_codepin &value,
//CHECK:                     dpct::experimental::StreamType stream) {
//CHECK:      ss << "{\"Type\":\"Color\",\"Data\":[";
//CHECK:      ss << "{\"r\":";
//CHECK:      dpct::experimental::detail::DataSer<int>::dump(ss, value.r, stream);
//CHECK:      ss << "},";
//CHECK:      ss << "{\"g\":";
//CHECK:      dpct::experimental::detail::DataSer<int>::dump(ss, value.g, stream);
//CHECK:      ss << "},";
//CHECK:      ss << "{\"b\":";
//CHECK:      dpct::experimental::detail::DataSer<int>::dump(ss, value.b, stream);
//CHECK:      ss << "}";
//CHECK:      ss << "]}";
//CHECK:    }
//CHECK:  };

//CHECK:  template <> class DataSer<Point3D_codepin<int>> {
//CHECK:  public:
//CHECK:    static void dump(dpct::experimental::detail::json_stringstream &ss, Point3D_codepin<int> &value,
//CHECK:                     dpct::experimental::StreamType stream) {
//CHECK:      ss << "{\"Type\":\"Point3D<int>\",\"Data\":[";
//CHECK:      ss << "{\"x\":";
//CHECK:      dpct::experimental::detail::DataSer<int>::dump(ss, value.x, stream);
//CHECK:      ss << "},";
//CHECK:      ss << "{\"y\":";
//CHECK:      dpct::experimental::detail::DataSer<int>::dump(ss, value.y, stream);
//CHECK:      ss << "},";
//CHECK:      ss << "{\"z\":";
//CHECK:      dpct::experimental::detail::DataSer<int>::dump(ss, value.z, stream);
//CHECK:      ss << "}";
//CHECK:      ss << "]}";
//CHECK:    }
//CHECK:  };

//CHECK:  template <> class DataSer<PointCloud_codepin> {
//CHECK:  public:
//CHECK:    static void dump(dpct::experimental::detail::json_stringstream &ss, PointCloud_codepin &value,
//CHECK:                     dpct::experimental::StreamType stream) {
//CHECK:      ss << "{\"Type\":\"PointCloud\",\"Data\":[";
//CHECK:      ss << "{\"pc\":";
//CHECK:      dpct::experimental::detail::DataSer<float3[3]>::dump(ss, value.pc, stream);
//CHECK:      ss << "}";
//CHECK:      ss << "]}";
//CHECK:    }
//CHECK:  };

//CHECK:  template <> class DataSer<PointCloud> {
//CHECK:  public:
//CHECK:    static void dump(dpct::experimental::detail::json_stringstream &ss, PointCloud &value,
//CHECK:                     dpct::experimental::StreamType stream) {
//CHECK:      PointCloud_codepin& temp = reinterpret_cast<PointCloud_codepin&>(value);
//CHECK:      dpct::experimental::detail::DataSer<PointCloud_codepin>::dump(ss, temp, stream);
//CHECK:    }
//CHECK:  };

//CHECK:  template <> class DataSer<Point3DExt_codepin> {
//CHECK:  public:
//CHECK:    static void dump(dpct::experimental::detail::json_stringstream &ss, Point3DExt_codepin &value,
//CHECK:                     dpct::experimental::StreamType stream) {
//CHECK:      ss << "{\"Type\":\"Point3DExt\",\"Data\":[";
//CHECK:      ss << "{\"x\":";
//CHECK:      dpct::experimental::detail::DataSer<int>::dump(ss, value.x, stream);
//CHECK:      ss << "},";
//CHECK:      ss << "{\"y\":";
//CHECK:      dpct::experimental::detail::DataSer<int>::dump(ss, value.y, stream);
//CHECK:      ss << "},";
//CHECK:      ss << "{\"z\":";
//CHECK:      dpct::experimental::detail::DataSer<int>::dump(ss, value.z, stream);
//CHECK:      ss << "},";
//CHECK:      ss << "{\"col\":";
//CHECK:      dpct::experimental::detail::DataSer<Color_codepin>::dump(ss, value.col, stream);
//CHECK:      ss << "}";
//CHECK:      ss << "]}";
//CHECK:    }
//CHECK:  };

//CHECK:  template <> class DataSer<Point3DExt> {
//CHECK:  public:
//CHECK:    static void dump(dpct::experimental::detail::json_stringstream &ss, Point3DExt &value,
//CHECK:                     dpct::experimental::StreamType stream) {
//CHECK:      Point3DExt_codepin& temp = reinterpret_cast<Point3DExt_codepin&>(value);
//CHECK:      dpct::experimental::detail::DataSer<Point3DExt_codepin>::dump(ss, temp, stream);
//CHECK:    }
//CHECK:  };

//CHECK:  template <> class DataSer<Point3D_codepin<float>> {
//CHECK:  public:
//CHECK:    static void dump(dpct::experimental::detail::json_stringstream &ss, Point3D_codepin<float> &value,
//CHECK:                     dpct::experimental::StreamType stream) {
//CHECK:      ss << "{\"Type\":\"Point3D<float>\",\"Data\":[";
//CHECK:      ss << "{\"x\":";
//CHECK:      dpct::experimental::detail::DataSer<float>::dump(ss, value.x, stream);
//CHECK:      ss << "},";
//CHECK:      ss << "{\"y\":";
//CHECK:      dpct::experimental::detail::DataSer<float>::dump(ss, value.y, stream);
//CHECK:      ss << "},";
//CHECK:      ss << "{\"z\":";
//CHECK:      dpct::experimental::detail::DataSer<float>::dump(ss, value.z, stream);
//CHECK:      ss << "}";
//CHECK:      ss << "]}";
//CHECK:    }
//CHECK:  };

//CHECK:  template <> class DataSer<Point3D<float>> {
//CHECK:  public:
//CHECK:    static void dump(dpct::experimental::detail::json_stringstream &ss, Point3D<float> &value,
//CHECK:                     dpct::experimental::StreamType stream) {
//CHECK:      Point3D_codepin<float>& temp = reinterpret_cast<Point3D_codepin<float>&>(value);
//CHECK:      dpct::experimental::detail::DataSer<Point3D_codepin<float>>::dump(ss, temp, stream);
//CHECK:    }
//CHECK:  };

//CHECK:  template <> class DataSer<Point2D_codepin> {
//CHECK:  public:
//CHECK:    static void dump(dpct::experimental::detail::json_stringstream &ss, Point2D_codepin &value,
//CHECK:                     dpct::experimental::StreamType stream) {
//CHECK:      ss << "{\"Type\":\"Point2D\",\"Data\":[";
//CHECK:      ss << "{\"x\":";
//CHECK:      dpct::experimental::detail::DataSer<int>::dump(ss, value.x, stream);
//CHECK:      ss << "},";
//CHECK:      ss << "{\"y\":";
//CHECK:      dpct::experimental::detail::DataSer<int>::dump(ss, value.y, stream);
//CHECK:      ss << "}";
//CHECK:      ss << "]}";
//CHECK:    }
//CHECK:  };

//CHECK:  template <> class DataSer<Point2D> {
//CHECK:  public:
//CHECK:    static void dump(dpct::experimental::detail::json_stringstream &ss, Point2D &value,
//CHECK:                     dpct::experimental::StreamType stream) {
//CHECK:      Point2D_codepin& temp = reinterpret_cast<Point2D_codepin&>(value);
//CHECK:      dpct::experimental::detail::DataSer<Point2D_codepin>::dump(ss, temp, stream);
//CHECK:    }
//CHECK:  };

//CHECK:  }
//CHECK:  }
//CHECK:  }
//CHECK:  #endif
