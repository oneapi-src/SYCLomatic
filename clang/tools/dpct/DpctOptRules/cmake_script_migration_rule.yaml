# Copyright (C) Intel Corporation
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
# See https://llvm.org/LICENSE.txt for license information.

# This file will be installed to folder:
# {dpct_install_folder}/extensions/opt_rules.
# The rule specified in this file can be imported with commandline option:
# --rule-file={dpct_install_folder}/extensions/opt_rules/cmake_rules/cmake_script_migration_rule.yaml

- Rule: rule_project
  Kind: CMakeRule
  MatchMode: Partial
  Priority: Fallback
  CmakeSyntax: project
  In: project(${arg0} ${argN})
  Out: |
   project(${arg0} ${argN})
   set(CMAKE_CXX_FLAGS "\${CMAKE_CXX_FLAGS} -fsycl")
  Subrules:
    argN:
      In: CUDA
      Out: ""
      MatchMode: Full
      RuleId: "remove_cuda"

- Rule: rule_find_package
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: find_package
  In: find_package(${arg0} REQUIRED)
  Out: find_package(IntelSYCL REQUIRED)

- Rule: rule_set
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: set
  In: set(${value})
  Out: set(${value})
  Subrules:
    value:
      In: ${arg}.cu
      Out: ${arg}.dp.cpp

- Rule: rule_set_property
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: set_property
  In: set_property(${value})
  Out: set_property(${value})
  Subrules:
    value:
      In: ${arg}.cu
      Out: ${arg}.dp.cpp
      MatchMode: Partial
      RuleId: "replace_set_property_cu_extension_with_dp_cpp"

- Rule: rule_cuda_add_executable
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: cuda_add_executable
  In: cuda_add_executable(${value})
  Out: add_executable(${value})
  Subrules:
    value:
      In: ${arg}.cu
      Out: ${arg}.dp.cpp
      MatchMode: Partial
      RuleId: "replace_cuda_add_executable_cu_extension_with_dp_cpp"

- Rule: rule_add_executable
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: add_executable
  In: add_executable(${value})
  Out: add_executable(${value})
  Subrules:
    value:
      In: ${arg}.cu
      Out: ${arg}.dp.cpp
      MatchMode: Partial
      RuleId: "replace_add_executable_cu_extension_with_dp_cpp"

- Rule: rule_target_link_libraries_CUDA_LIBRARIES
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: CUDA_LIBRARIES_target_link_libraries
  In: target_link_libraries(${CUDALibraries})
  Out: target_link_libraries(${CUDALibraries})
  Subrules:
    CUDALibraries:
      In: |
        "\${CUDA_LIBRARIES}"
      Out: ""
      MatchMode: Full
      RuleId: "replace_cuda_reserved_variable_CUDA_LIBRARIES"

- Rule: rule_target_link_libraries_-lcublas
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: -lcublas_target_link_libraries
  In: target_link_libraries(${CUDALibraries})
  Out: target_link_libraries(${CUDALibraries})
  Subrules:
    CUDALibraries:
      In: -lcublas
      Out: -qmkl
      MatchMode: Full
      RuleId: "replace_-lcublas_with_qmkl"

- Rule: rule_target_link_libraries_CUDA_cublas
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: CUDA_cublas_target_link_libraries
  In: target_link_libraries(${CUDALibraries})
  Out: target_link_libraries(${CUDALibraries})
  Subrules:
    CUDALibraries:
      In: "CUDA::cublas"
      Out: -qmkl
      MatchMode: Full
      RuleId: "replace_CUDA_cublas_with_qmkl"

# libsycl.so is linked by default as alternative to cuda_driver library, so removing here
- Rule: rule_target_link_libraries_cuda_driver
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: cuda_driver_target_link_libraries
  In: target_link_libraries(${CUDALibraries})
  Out: target_link_libraries(${CUDALibraries})
  Subrules:
    CUDALibraries:
      In: "CUDA::cuda_driver"
      Out: ""
      MatchMode: Full
      RuleId: "remove_CUDA_driver"

# libsycl.so is linked by default as alternative to cuda_driver library, so removing here
- Rule: rule_target_link_libraries_cuda_rt
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: cudart_target_link_libraries
  In: target_link_libraries(${CUDALibraries})
  Out: target_link_libraries(${CUDALibraries})
  Subrules:
    CUDALibraries:
      In: "CUDA::cudart"
      Out: ""
      MatchMode: Full
      RuleId: "remove_CUDA_cudart"

- Rule: rule_target_link_libraries_cudnn
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: cudnn_target_link_libraries
  In: target_link_libraries(${CUDALibraries})
  Out: target_link_libraries(${CUDALibraries})
  Subrules:
    CUDALibraries:
      In: "CUDNN::cudnn"
      Out: libdnn.so
      MatchMode: Full
      RuleId: "replace_cudnn_with_libdnn"

# SYCL does not have mapping for nvrtc currently, so removing here
- Rule: rule_target_link_libraries_nvrtc
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: nvrtc_target_link_libraries
  In: target_link_libraries(${CUDALibraries})
  Out: target_link_libraries(${CUDALibraries})
  Subrules:
    CUDALibraries:
      In: "CUDA::nvrtc"
      Out: ""
      MatchMode: Full
      RuleId: "remove_nvrtc"
  
# SYCL does not have mapping for nvToolsExt currently, so removing here
- Rule: rule_target_link_libraries_nvToolsExt
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: nvToolsExt_target_link_libraries
  In: target_link_libraries(${CUDALibraries})
  Out: target_link_libraries(${CUDALibraries})
  Subrules:
    CUDALibraries:
      In: "CUDA::nvToolsExt"
      Out: ""
      MatchMode: Full
      RuleId: "remove_nvToolsExt"

# SYCL does not have mapping for libnvinfer currently, so removing here
- Rule: rule_target_link_libraries_libnvinfer
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: libnvinfer_target_link_libraries
  In: target_link_libraries(${CUDALibraries})
  Out: target_link_libraries(${CUDALibraries})
  Subrules:
    CUDALibraries:
      In: libnvinfer.so
      Out: ""
      MatchMode: Full
      RuleId: "remove_libnvinfer"

# SYCL does not have mapping for libnvonnxparser currently, so removing here
- Rule: rule_target_link_libraries_libnvonnxparser
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: libnvonnxparser_target_link_libraries
  In: target_link_libraries(${CUDALibraries})
  Out: target_link_libraries(${CUDALibraries})
  Subrules:
    CUDALibraries:
      In: libnvonnxparser.so
      Out: ""
      MatchMode: Full
      RuleId: "remove_libnvonnxparser"

- Rule: rule_target_link_libraries_libstdc++
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: libstdc++_target_link_libraries
  In: target_link_libraries(${StaticLibraries})
  Out: target_link_libraries(${StaticLibraries})
  Subrules:
    StaticLibraries:
      In: -static-libstdc++
      Out: ""
      MatchMode: Full
      RuleId: "remove_-static-libstdc++"
