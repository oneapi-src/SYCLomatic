# Copyright (C) Intel Corporation
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
# See https://llvm.org/LICENSE.txt for license information.

# This file will be installed to folder:
# {dpct_install_folder}/extensions/opt_rules.
# The rule specified in this file can be imported with commandline option:
# --rule-file={dpct_install_folder}/extensions/opt_rules/cmake_rules/cmake_script_migration_rule.yaml

- Rule: rule_project
  Kind: CMakeRule
  MatchMode: Partial
  Priority: Fallback
  CmakeSyntax: project
  In: project(${arg0})
  Out: |
   project(${arg0})
   set(CMAKE_CXX_FLAGS "\${CMAKE_CXX_FLAGS} -fsycl")
   find_program(dpct_bin_path NAMES dpct PATHS)
   get_filename_component(bin_path_of_dpct \${dpct_bin_path} DIRECTORY)
   set(dpct_cmake_file_path "\${bin_path_of_dpct}/../cmake/dpct.cmake")
   include(\${dpct_cmake_file_path})

- Rule: rule_project-remove_cuda
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: project-remove_cuda
  In: project(${arg0} ${argN})
  Out: |
   project(${arg0} ${argN})
  Subrules:
    argN:
      In: CUDA
      Out: ""
      MatchMode: Full
      RuleId: "remove_cuda"

- Rule: rule_find_package-cuda_no_args
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: find_package-cuda_no_args
  In: find_package(CUDA)
  Out: find_package(IntelSYCL REQUIRED)

- Rule: rule_find_package-cuda
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: find_package-cuda
  In: find_package(CUDA ${opts})
  Out: find_package(IntelSYCL REQUIRED)

- Rule: rule_find_package-cudatoolkit_no_args
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: find_package-cudatoolkit_no_args
  In: find_package(CUDAToolkit)
  Out: |
    find_package(IntelSYCL)
    find_package(MKL)

- Rule: rule_find_package-cudatoolkit
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: find_package-cudatoolkit
  In: find_package(CUDAToolkit ${value})
  Out: |
    find_package(IntelSYCL REQUIRED)
    find_package(MKL REQUIRED)

- Rule: rule_find_package-cub_no_args
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: find_package-cub_no_args
  In: find_package(CUB)
  Out: find_package(oneDPL)

- Rule: rule_find_package-cub
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: find_package-cub
  In: find_package(CUB ${args})
  Out: find_package(oneDPL REQUIRED)

- Rule: rule_find_package-mpi_no_args
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: find_package-mpi_no_args
  In: find_package(MPI)
  Out: "#find_package(MPI)"

- Rule: rule_find_package-mpi
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: find_package-mpi
  In: find_package(MPI ${args})
  Out: "#find_package(MPI ${args})"

- Rule: rule_find_package-omp_no_args
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: find_package-omp_no_args
  In: find_package(OpenMP)
  Out: "#find_package(OpenMP)"

- Rule: rule_find_package-omp
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: find_package-omp
  In: find_package(OpenMP ${args})
  Out: "#find_package(OpenMP ${args})"

- Rule: rule_find_package-nvjpeg_no_args
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: find_package-nvjpeg_no_args
  In: find_package(NVJPEG)
  Out: "#find_package(NVJPEG)"

- Rule: rule_find_package-nvjpeg
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: find_package-nvjpeg
  In: find_package(NVJPEG ${args})
  Out: "#find_package(NVJPEG ${args})"

- Rule: rule_cmake_cxx_standard
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: cmake_cxx_standard
  In: set (CMAKE_CXX_STANDARD ${version})
  Out: set (CMAKE_CXX_STANDARD 17)

- Rule: rule_cmake_cxx_compiler
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: cmake_cxx_compiler
  In: set (CMAKE_CXX_COMPILER ${version})
  Out: set (CMAKE_CXX_COMPILER icpx)

- Rule: rule_set_property_cxx_standard
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: set_property_cxx_standard
  In: set_target_properties(${targets} PROPERTIES CXX_STANDARD ${version})
  Out: set_target_properties(${targets} PROPERTIES CXX_STANDARD 17)

- Rule: rule_set_property_cuda_seprarable_only
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: set_property_cuda_seprarable_only
  In: set_target_properties(${target_property} CUDA_SEPARABLE_COMPILATION ${state})
  Out: |
    #[[
    set_target_properties(${target_property} CUDA_SEPARABLE_COMPILATION ${state})]]

- Rule: rule_set_property_cuda_seprarable
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: set_property_cuda_seprarable
  In: set_target_properties(${target_property} CUDA_SEPARABLE_COMPILATION ${state} ${other_properties})
  Out: set_target_properties(${target_property} ${other_properties})

- Rule: rule_set_property_cuda_architechtures
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: set_property_cuda_architechtures
  In: set_target_properties(${targets} PROPERTIES CUDA_ARCHITECHTURES ${state} ${other_properties})
  Out: set_target_properties(${targets} PROPERTIES ${other_properties})

- Rule: rule_set_property_cuda_architechtures_only
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: set_property_cuda_architechtures_only
  In: set_target_properties(${target_property} CUDA_ARCHITECHTURES ${state})
  Out: |
    #[[
    set_target_properties(${target_property} CUDA_ARCHITECHTURES ${state})]]

- Rule: rule_cuda_compile_ptx
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: cuda_compile_ptx
  In: cuda_compile_ptx(${device} ${value})
  Out: dpct_helper_compile_sycl_code(${device} ${value})
  Subrules:
    value:
      MatchMode: Full
      In: ${arg}.cu
      Out: ${arg}.dp.cpp

- Rule: rule_user_defined_function_cpp
  Kind: CMakeRule
  Priority: Fallback
  MatchMode: Partial
  CmakeSyntax: cuda_files_in_user_defined_function_cpp
  In: ${func_name}(${value})
  Out: ${func_name}(${value})
  Subrules:
    value:
      MatchMode: Full
      In: ${arg}.cpp
      Out: ${arg}.${rewrite_extention_name}

- Rule: rule_user_defined_function_cu
  Kind: CMakeRule
  Priority: Fallback
  MatchMode: Partial
  CmakeSyntax: cuda_files_in_user_defined_function_cu
  In: ${func_name}(${value})
  Out: ${func_name}(${value})
  Subrules:
    value:
      MatchMode: Full
      In: ${arg}.cu
      Out: ${arg}.${rewrite_extention_name}

# ${CUDA_LIBRARIES} is cmake reserved variable for static version of the CUDA runtime library.
# In SYCL side, SYCL runtime is default auto-loaded when option "-fsycl" is specified, so we remove it in SYCL side.
- Rule: CUDA_LIBRARIES_removed
  Kind: CMakeRule
  Priority: Fallback
  MatchMode: Partial
  CmakeSyntax: CUDA_LIBRARIES
  In: ${func_name}(${value})
  Out: ${func_name}(${value})
  Subrules:
    value:
      MatchMode: Full
      In: \${CUDA_LIBRARIES}
      Out: ""

- Rule: rule_cuda_compile_with_opts
  Kind: CMakeRule
  Priority: Fallback
  MatchMode: Partial
  CmakeSyntax: rule_cuda_compile_01
  In: cuda_compile(${libname} ${srcs} STATIC OPTIONS ${opts})
  Out: dpct_helper_sycl_compile(${libname} ${srcs})
  Subrules:
    srcs:
      MatchMode: Full
      In: ${arg}.cu
      Out: ${arg}.dp.cpp

- Rule: rule_cuda_compile_with_opts
  Kind: CMakeRule
  Priority: Fallback
  MatchMode: Partial
  CmakeSyntax: rule_cuda_compile_02
  In: cuda_compile(${libname} ${srcs} SHARED OPTIONS ${opts})
  Out: dpct_helper_sycl_compile(${libname} ${srcs})
  Subrules:
    srcs:
      MatchMode: Full
      In: ${arg}.cu
      Out: ${arg}.dp.cpp


- Rule: rule_cuda_compile_with_lib_type
  Kind: CMakeRule
  Priority: Fallback
  MatchMode: Partial
  CmakeSyntax: rule_cuda_compile_03
  In: cuda_compile(${libname} ${srcs} STATIC)
  Out: dpct_helper_sycl_compile(${libname} ${srcs})
  Subrules:
    srcs:
      MatchMode: Full
      In: ${arg}.cu
      Out: ${arg}.dp.cpp

- Rule: rule_cuda_compile_with_lib_type
  Kind: CMakeRule
  Priority: Fallback
  MatchMode: Partial
  CmakeSyntax: rule_cuda_compile_04
  In: cuda_compile(${libname} ${srcs} SHARED)
  Out: dpct_helper_sycl_compile(${libname} ${srcs})
  Subrules:
    srcs:
      MatchMode: Full
      In: ${arg}.cu
      Out: ${arg}.dp.cpp


- Rule: rule_cuda_compile_with_no_opts
  Kind: CMakeRule
  Priority: Fallback
  MatchMode: Partial
  CmakeSyntax: rule_cuda_compile_05
  In: cuda_compile(${libname} ${srcs})
  Out: dpct_helper_sycl_compile(${libname} ${srcs})
  Subrules:
    srcs:
      MatchMode: Full
      In: ${arg}.cu
      Out: ${arg}.dp.cpp

- Rule: rule_add_compile_options
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: add_compile_options
  In: add_compile_options(${arg})
  Out: add_compile_options(${arg})
  Subrules:
    arg:
      In: -std=${cxx_standard}
      Out: -std=c++17
      RuleId: "add_compile_options_cxx_standard"

- Rule: rule_target_compile_options
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: target_compile_options
  In: target_compile_options(${arg})
  Out: target_compile_options(${arg})
  Subrules:
    arg:
      In: $<$<COMPILE_LANGUAGE:CUDA>:${flags}>
      Out: ""
      RuleId: "target_compile_options_cuda_arg"

- Rule: rule_CUDA_HAS_FP16
  Kind: CMakeRule
  Priority: Fallback
  MatchMode: Partial
  CmakeSyntax: CUDA_HAS_FP16
  In: ${func_name}(${value})
  Out: ${func_name}(${value})
  Subrules:
    value:
      MatchMode: Full
      In: CUDA_HAS_FP16
      Out: SYCL_HAS_FP16

# Current Yaml based rule hard-code to map "cxx_std_xx" to "cxx_std_17"
# A more flexible mapping logic should be implemented in implicit rules
- Rule: rule_cxx_target_compile_features
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: cxx_target_compile_features
  MatchMode: Partial
  In: target_compile_features(${value})
  Out: target_compile_features(${value})
  Subrules:
    value:
      In: cxx_std_${ver}
      Out: cxx_std_17
      RuleId: "adjust_cxx_ver"

# Current Yaml based rule hard-code to map "cuda_std_xx" to "cxx_std_17"
# A more flexible mapping logic should be implemented in implicit rules
- Rule: rule_cuda_target_compile_features
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: cuda_target_compile_features
  MatchMode: Partial
  In: target_compile_features(${value})
  Out: target_compile_features(${value})
  Subrules:
    value:
      In: cuda_std_${ver}
      Out: cxx_std_17
      RuleId: "adjust_cuda_ver"

- Rule: rule_header_file
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: cuh_file
  MatchMode: Partial
  In: file(${value})
  Out: file(${value})
  Subrules:
    value:
      In: ${arg}.cuh
      Out: ${arg}.dp.hpp
      MatchMode: Full
      RuleId: "adjust_CUDA_header_file_extension"

- Rule: rule_src_file
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: cu_file
  MatchMode: Partial
  In: file(${value})
  Out: file(${value})
  Subrules:
    value:
      In: ${arg}.cu
      Out: ${arg}.dp.cpp
      MatchMode: Full
      RuleId: "adjust_CUDA_src_file_extension"

- Rule: rule_set_property
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: set_property
  In: set_property(${value})
  Out: set_property(${value})
  Subrules:
    value:
      In: ${arg}.cu
      Out: ${arg}.dp.cpp
      MatchMode: Partial
      RuleId: "replace_set_property_cu_extension_with_dp_cpp"

- Rule: rule_cuda_add_executable
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: cuda_add_executable
  In: cuda_add_executable(${value})
  Out: add_executable(${value})
  Subrules:
    value:
      In: ${arg}.cu
      Out: ${arg}.dp.cpp
      MatchMode: Partial
      RuleId: "replace_cuda_add_executable_cu_extension_with_dp_cpp"

- Rule: rule_add_executable
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: add_executable
  In: add_executable(${value} OPTIONS {options})
  Out: add_executable(${value})
  Subrules:
    value:
      In: ${arg}.cu
      Out: ${arg}.dp.cpp
      MatchMode: Partial
      RuleId: "replace_add_executable_cu_extension_with_dp_cpp"

- Rule: rule_add_executable_remove_opts
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: add_executable_opts
  In: add_executable(${value} OPTIONS ${options})
  Out: add_executable(${value})

- Rule: rule_no_opts_cuda_compile_cubin
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: no_opts_cuda_compile_cubin
  MatchMode: Partial
  In: cuda_compile_cubin(${device} ${value})
  Out: dpct_helper_compile_sycl_code(${device} ${value})
  Subrules:
    value:
      In: ${arg}.cu
      Out: ${arg}.dp.cpp

- Rule: rule_cuda_compile_cubin
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: cuda_compile_cubin
  MatchMode: Partial
  In: cuda_compile_cubin(${device} ${value} OPTIONS ${opts})
  Out: dpct_helper_compile_sycl_code(${device} ${value})
  Subrules:
    value:
      In: ${arg}.cu
      Out: ${arg}.dp.cpp

# CUDA_cudadevrt_LIBRARY is cmake cuda reverved list variable, should be removed in SYCL
- Rule: rule_target_link_libraries_CUDA_cudadevrt_LIBRARY
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: CUDA_cudadevrt_LIBRARY_target_link_libraries
  In: ${prefix}link_libraries(${CULibraries})
  Out: ${prefix}link_libraries(${CULibraries})
  Subrules:
    CULibraries:
      In: |
        \${CUDA_cudadevrt_LIBRARY}
      Out: ""
      MatchMode: Full
      RuleId: "remove_cuda_reserved_variable_CUDA_cudadevrt_LIBRARY"

- Rule: rule_target_link_libraries_cuda
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: cuda_target_link_libraries
  In: ${prefix}link_libraries(${CULibraries})
  Out: ${prefix}link_libraries(${CULibraries})
  Subrules:
    CULibraries:
      In: cuda
      Out: ""
      MatchMode: Full

- Rule: rule_target_link_libraries_cublas
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: cublas_target_link_libraries
  In: ${prefix}link_libraries(${CUDALibraries})
  Out: ${prefix}link_libraries(${CUDALibraries})
  Subrules:
    CUDALibraries:
      In: cublas
      Out: |
        \${MKL_LIB}
      MatchMode: Full
      RuleId: "replace_cublas_with_MKL_target"

- Rule: rule_target_link_libraries_-lcublas
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: -lcublas_target_link_libraries
  In: ${prefix}link_libraries(${CUDALibraries})
  Out: ${prefix}link_libraries(${CUDALibraries})
  Subrules:
    CUDALibraries:
      In: -lcublas
      Out: |
        \${MKL_LIB}
      MatchMode: Full
      RuleId: "replace_-lcublas_with_qmkl"

- Rule: rule_target_link_libraries_CUDA_cublas
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: CUDA_cublas_target_link_libraries
  In: ${prefix}link_libraries(${CUDALibraries})
  Out: ${prefix}link_libraries(${CUDALibraries})
  Subrules:
    CUDALibraries:
      In: "CUDA::cublas"
      Out: |
        \${MKL_LIB}
      MatchMode: Full
      RuleId: "replace_CUDA_cublas_with_MKL"

- Rule: rule_target_link_libraries_CUDA_CUBLAS_LIBRARIES
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: CUDA_CUBLAS_LIBRARIES_target_link_libraries
  In: ${prefix}link_libraries(${CUDALibraries})
  Out: ${prefix}link_libraries(${CUDALibraries})
  Subrules:
    CUDALibraries:
      In: |
        \${CUDA_CUBLAS_LIBRARIES}
      Out: |
        \${MKL_LIB}
      MatchMode: Full
      RuleId: "replace_CUDA_CUBLAS_LIBRARIES_with_MKL"

- Rule: rule_target_link_libraries_CUDA_CUFFT_LIBRARIES
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: CUDA_CUFFT_LIBRARIES_target_link_libraries
  In: ${prefix}link_libraries(${CUDALibraries})
  Out: ${prefix}link_libraries(${CUDALibraries})
  Subrules:
    CUDALibraries:
      In: |
        \${CUDA_CUFFT_LIBRARIES}
      Out: |
        \${MKL_LIB}
      MatchMode: Full
      RuleId: "replace_CUDA_CUFFT_LIBRARIES_with_MKL"

- Rule: rule_target_link_libraries_CUDA_cusparse_LIBRARY
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: CUDA_cusparse_LIBRARY_target_link_libraries
  In: ${prefix}link_libraries(${CUDALibraries})
  Out: ${prefix}link_libraries(${CUDALibraries})
  Subrules:
    CUDALibraries:
      In: |
        \${CUDA_cusparse_LIBRARY}
      Out: |
        \${MKL_LIB}
      MatchMode: Full
      RuleId: "replace_CUDA_cusparse_LIBRARY_with_MKL"

# libsycl.so is linked by default as alternative to cuda_driver library, so removing here
- Rule: rule_target_link_libraries_cuda_driver
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: cuda_driver_target_link_libraries
  In: ${prefix}link_libraries(${CUDALibraries})
  Out: ${prefix}link_libraries(${CUDALibraries})
  Subrules:
    CUDALibraries:
      In: "CUDA::cuda_driver"
      Out: ""
      MatchMode: Full
      RuleId: "remove_CUDA_driver"

# libsycl.so is linked by default as alternative to cuda_driver library, so removing here
- Rule: rule_target_link_libraries_cuda_rt
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: cudart_target_link_libraries
  In: ${prefix}link_libraries(${CUDALibraries})
  Out: ${prefix}link_libraries(${CUDALibraries})
  Subrules:
    CUDALibraries:
      In: "CUDA::cudart"
      Out: ""
      MatchMode: Full
      RuleId: "remove_CUDA_cudart"

- Rule: rule_target_link_libraries_cudnn
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: cudnn_target_link_libraries
  In: ${prefix}link_libraries(${CUDALibraries})
  Out: ${prefix}link_libraries(${CUDALibraries})
  Subrules:
    CUDALibraries:
      In: "cudnn"
      Out: |
        \${DNN_LIB}
      MatchMode: Full
      RuleId: "replace_cudnn_with_libdnn"

# SYCL does not have mapping for nvrtc currently, so removing here
- Rule: rule_target_link_libraries_nvrtc
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: nvrtc_target_link_libraries
  In: ${prefix}link_libraries(${CUDALibraries})
  Out: ${prefix}link_libraries(${CUDALibraries})
  Subrules:
    CUDALibraries:
      In: "CUDA::nvrtc"
      Out: ""
      MatchMode: Full
      RuleId: "remove_nvrtc"

# SYCL does not have mapping for nvToolsExt currently, so removing here
- Rule: rule_target_link_libraries_nvToolsExt
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: nvToolsExt_target_link_libraries
  In: ${prefix}link_libraries(${CUDALibraries})
  Out: ${prefix}link_libraries(${CUDALibraries})
  Subrules:
    CUDALibraries:
      In: "CUDA::nvToolsExt"
      Out: ""
      MatchMode: Full
      RuleId: "remove_nvToolsExt"

# SYCL does not have mapping for libnvinfer currently, so removing here
- Rule: rule_target_link_libraries_libnvinfer
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: libnvinfer_target_link_libraries
  In: ${prefix}link_libraries(${CUDALibraries})
  Out: ${prefix}link_libraries(${CUDALibraries})
  Subrules:
    CUDALibraries:
      In: libnvinfer.so
      Out: ""
      MatchMode: Full
      RuleId: "remove_libnvinfer"

# SYCL does not have mapping for libnvonnxparser currently, so removing here
- Rule: rule_target_link_libraries_libnvonnxparser
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: libnvonnxparser_target_link_libraries
  In: ${prefix}link_libraries(${CUDALibraries})
  Out: ${prefix}link_libraries(${CUDALibraries})
  Subrules:
    CUDALibraries:
      In: libnvonnxparser.so
      Out: ""
      MatchMode: Full
      RuleId: "remove_libnvonnxparser"

# icpx: error: '-static-libstdc++' is not supported with '-fsycl', so removing here
- Rule: rule_target_link_libraries_libstdc++
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: libstdc++_target_link_libraries
  In: ${prefix}link_libraries(${StaticLibraries})
  Out: ${prefix}link_libraries(${StaticLibraries})
  Subrules:
    StaticLibraries:
      In: -static-libstdc++
      Out: ""
      MatchMode: Full
      RuleId: "remove_-static-libstdc++"

- Rule: rule_cuda_compile_fatbin
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: cuda_compile_fatbin
  In: cuda_compile_fatbin(${value})
  Out: dpct_helper_compile_sycl_code(${value})
  Subrules:
    value:
      In: ${arg}.cu
      Out: ${arg}.dp.cpp
      MatchMode: Partial
      RuleId: "replace_source_extension_with_dp_cpp"

- Rule: rule_cuda_compile_fatbin_remove_opts
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: cuda_compile_fatbin_opts
  In: dpct_helper_compile_sycl_code(${value} OPTIONS ${options})
  Out: dpct_helper_compile_sycl_code(${value})

- Rule: rule_cuda_include_directories
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: cuda_include_directories
  MatchMode: Partial
  In: cuda_include_directories(${value})
  Out: include_directories(${value})

- Rule: rule_cuda_add_cufft_to_target
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: cuda_add_cufft_to_target
  In: cuda_add_cufft_to_target(${target})
  Out: dpct_helper_add_mkl_to_target(${target})

- Rule: rule_cuda_add_cublas_to_target
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: cuda_add_cublas_to_target
  In: cuda_add_cublas_to_target(${target})
  Out: dpct_helper_add_mkl_to_target(${target})

- Rule: rule_include_directories
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: include_directories
  MatchMode: Partial
  In: include_directories(${value})
  Out: include_directories(${value})
  Subrules:
    value:
      In: CUDA_INCLUDE_DIRS
      Out: SYCL_INCLUDE_DIR
      MatchMode: Full

- Rule: rule_cuda_add_library
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: cuda_add_library
  In: cuda_add_library(${arg})
  Out: add_library(${arg})

- Rule: rule_cuda_64_bit_device_code-on
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: set_cuda_64_bit_device_code-on
  In: set(CUDA_64_BIT_DEVICE_CODE ON)
  Out: |
    set(CMAKE_CXX_FLAGS "\${CMAKE_CXX_FLAGS} -m64")

- Rule: rule_cuda_64_bit_device_code-off
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: set_cuda_64_bit_device_code-off
  In: set(CUDA_64_BIT_DEVICE_CODE OFF)
  Out: |
    set(CMAKE_CXX_FLAGS "\${CMAKE_CXX_FLAGS} -m32")

- Rule: rule_if_cuda_64_bit_device_code
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: if_cuda_64_bit_device_code
  In: if(${conditions}CUDA_64_BIT_DEVICE_CODE${other_conditions})
  Out: if(${conditions}(\${CMAKE_CXX_FLAGS} MATCHES "-m64")${other_conditions})
