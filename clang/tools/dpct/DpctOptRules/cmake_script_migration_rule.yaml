# Copyright (C) Intel Corporation
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
# See https://llvm.org/LICENSE.txt for license information.

# This file will be installed to folder:
# {dpct_install_folder}/extensions/opt_rules.
# The rule specified in this file can be imported with commandline option:
# --rule-file={dpct_install_folder}/extensions/opt_rules/cmake_rules/cmake_script_migration_rule.yaml

- Rule: rule_project
  Kind: CMakeRule
  MatchMode: Partial
  Priority: Fallback
  CmakeSyntax: project
  In: project(${arg0} ${argN})
  Out: |
   project(${arg0} ${argN})
   set(CMAKE_CXX_FLAGS "\${CMAKE_CXX_FLAGS} -fsycl")
   find_program(dpct_bin_path NAMES dpct PATHS)
   get_filename_component(bin_path_of_dpct \${dpct_bin_path} DIRECTORY)
   set(dpct_cmake_file_path "\${bin_path_of_dpct}/../cmake/dpct.cmake")
   include(\${dpct_cmake_file_path})
  Subrules:
    argN:
      In: CUDA
      Out: ""
      MatchMode: Full
      RuleId: "remove_cuda"

- Rule: rule_find_package
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: find_package
  In: find_package(${arg0} REQUIRED)
  Out: find_package(IntelSYCL REQUIRED)

- Rule: rule_set
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: set
  In: set(${value})
  Out: set(${value})
  Subrules:
    value:
      MatchMode: Full
      In: ${arg}.cu
      Out: ${arg}.dp.cpp

- Rule: rule_cmake_cxx_standard
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: cmake_cxx_standard
  In: set (CMAKE_CXX_STANDARD ${version})
  Out: set (CMAKE_CXX_STANDARD 17)

- Rule: rule_cmake_cxx_compiler
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: cmake_cxx_compiler
  In: set (CMAKE_CXX_COMPILER ${version})
  Out: set (CMAKE_CXX_COMPILER icpx)

- Rule: rule_set_property_cxx_standard
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: set_property_cxx_standard
  In: set_target_properties(${targets} PROPERTIES CXX_STANDARD ${version})
  Out: set_target_properties(${targets} PROPERTIES CXX_STANDARD 17)

- Rule: rule_set_property_cuda_seprarable_only
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: set_property_cuda_seprarable_only
  In: set_target_properties(${target_property} CUDA_SEPARABLE_COMPILATION ${state})
  Out: |
    #[[
    set_target_properties(${target_property} CUDA_SEPARABLE_COMPILATION ${state})]]

- Rule: rule_set_property_cuda_seprarable
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: set_property_cuda_seprarable
  In: set_target_properties(${target_property} CUDA_SEPARABLE_COMPILATION ${state} ${other_properties})
  Out: set_target_properties(${target_property} ${other_properties})

- Rule: rule_set_property_cuda_architechtures
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: set_property_cuda_architechtures
  In: set_target_properties(${targets} PROPERTIES CUDA_ARCHITECHTURES ${state} ${other_properties})
  Out: set_target_properties(${targets} PROPERTIES ${other_properties})

- Rule: rule_set_property_cuda_architechtures_only
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: set_property_cuda_architechtures_only
  In: set_target_properties(${target_property} CUDA_ARCHITECHTURES ${state})
  Out: |
    #[[
    set_target_properties(${target_property} CUDA_ARCHITECHTURES ${state})]]

- Rule: rule_cuda_compile_ptx
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: cuda_compile_ptx
  In: cuda_compile_ptx(${device} ${value})
  Out: dpct_helper_compile_sycl_code(${device} ${value})
  Subrules:
    value:
      MatchMode: Full
      In: ${arg}.cu
      Out: ${arg}.dp.cpp

- Rule: rule_user_defined_function
  Kind: CMakeRule
  Priority: Fallback
  MatchMode: Partial
  CmakeSyntax: cuda_files_in_user_defined_function
  In: ${func_name}(${value})
  Out: ${func_name}(${value})
  Subrules:
    value:
      MatchMode: Full
      In: ${arg}.cu
      Out: ${arg}.dp.cpp

- Rule: rule_add_compile_options
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: add_compile_options
  In: add_compile_options(${arg})
  Out: add_compile_options(${arg})
  Subrules:
    arg:
      In: -std=${cxx_standard}
      Out: -std=c++17
      RuleId: "add_compile_options_cxx_standard"

- Rule: rule_target_compile_options
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: target_compile_options
  In: target_compile_options(${arg})
  Out: target_compile_options(${arg})
  Subrules:
    arg:
      In: $<$<COMPILE_LANGUAGE:CUDA>:${flags}>
      Out: ""
      RuleId: "target_compile_options_cuda_arg"

- Rule: rule_CUDA_HAS_FP16
  Kind: CMakeRule
  Priority: Fallback
  MatchMode: Partial
  CmakeSyntax: CUDA_HAS_FP16
  In: ${func_name}(${value})
  Out: ${func_name}(${value})
  Subrules:
    value:
      MatchMode: Full
      In: CUDA_HAS_FP16
      Out: SYCL_HAS_FP16

# Current Yaml based rule hard-code to map "cxx_std_xx" to "cxx_std_17"
# A more flexible mapping logic should be implemented in implicit rules
- Rule: rule_cxx_target_compile_features
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: cxx_target_compile_features
  MatchMode: Partial
  In: target_compile_features(${value})
  Out: target_compile_features(${value})
  Subrules:
    value:
      In: cxx_std_${ver}
      Out: cxx_std_17
      RuleId: "adjust cxx_ver"

# Current Yaml based rule hard-code to map "cuda_std_xx" to "cxx_std_17"
# A more flexible mapping logic should be implemented in implicit rules
- Rule: rule_cuda_target_compile_features
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: cuda_target_compile_features
  MatchMode: Partial
  In: target_compile_features(${value})
  Out: target_compile_features(${value})
  Subrules:
    value:
      In: cuda_std_${ver}
      Out: cxx_std_17
      RuleId: "adjust cuda_ver"

- Rule: rule_header_file
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: cuh_file
  MatchMode: Partial
  In: file(${value})
  Out: file(${value})
  Subrules:
    value:
      In: ${arg}.cuh
      Out: ${arg}.dp.hpp
      MatchMode: Full
      RuleId: "adjust CUDA header file extension"

- Rule: rule_src_file
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: cu_file
  MatchMode: Partial
  In: file(${value})
  Out: file(${value})
  Subrules:
    value:
      In: ${arg}.cu
      Out: ${arg}.dp.cpp
      MatchMode: Full
      RuleId: "adjust CUDA src file extension"

- Rule: rule_set_property
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: set_property
  In: set_property(${value})
  Out: set_property(${value})
  Subrules:
    value:
      In: ${arg}.cu
      Out: ${arg}.dp.cpp
      MatchMode: Partial
      RuleId: "replace_set_property_cu_extension_with_dp_cpp"

- Rule: rule_cuda_add_executable
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: cuda_add_executable
  In: cuda_add_executable(${value})
  Out: add_executable(${value})
  Subrules:
    value:
      In: ${arg}.cu
      Out: ${arg}.dp.cpp
      MatchMode: Partial
      RuleId: "replace_cuda_add_executable_cu_extension_with_dp_cpp"

- Rule: rule_add_executable
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: add_executable
  In: add_executable(${value} OPTIONS {options})
  Out: add_executable(${value})
  Subrules:
    value:
      In: ${arg}.cu
      Out: ${arg}.dp.cpp
      MatchMode: Partial
      RuleId: "replace_add_executable_cu_extension_with_dp_cpp"

- Rule: rule_add_executable_remove_opts
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: add_executable_opts
  In: add_executable(${value} OPTIONS ${options})
  Out: add_executable(${value})

- Rule: rule_no_opts_cuda_compile_cubin
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: no_opts_cuda_compile_cubin
  MatchMode: Partial
  In: cuda_compile_cubin(${device} ${value})
  Out: dpct_helper_compile_sycl_code(${device} ${value})
  Subrules:
    value:
      In: ${arg}.cu
      Out: ${arg}.dp.cpp

- Rule: rule_cuda_compile_cubin
  Kind: CMakeRule
  Priority: Fallback
  CmakeSyntax: cuda_compile_cubin
  MatchMode: Partial
  In: cuda_compile_cubin(${device} ${value} OPTIONS ${opts})
  Out: dpct_helper_compile_sycl_code(${device} ${value})
  Subrules:
    value:
      In: ${arg}.cu
      Out: ${arg}.dp.cpp

