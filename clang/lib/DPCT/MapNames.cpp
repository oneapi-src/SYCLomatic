//===--------------- MapNames.cpp -----------------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#include "MapNames.h"
#include "ASTTraversal.h"
#include "DNNAPIMigration.h"
#include "CallExprRewriter.h"
#include "SaveNewFiles.h"
#include <map>

using namespace clang;
using namespace clang::dpct;
// Not use sycl:: namespace explicitly
// KeepNamespace = false/true --> ""/"sycl::"
std::vector<std::string> MapNames::ClNamespace = {"", "", "sycl::", "sycl::"};
// Not use dpct:: namespace explicitly
// KeepNamespace = false/true --> ""/"dpct::"
std::vector<std::string> MapNames::DpctNamespace = {"", "dpct::"};
std::string MapNames::getClNamespace(bool KeepNamespace, bool IsMathFunc) {
  return ClNamespace[(KeepNamespace << 1) + IsMathFunc];
}
std::string MapNames::getDpctNamespace(bool KeepNamespace) {
  return DpctNamespace[KeepNamespace];
}

std::unordered_map<std::string, std::shared_ptr<TypeNameRule>>
    MapNames::TypeNamesMap;
std::unordered_map<std::string, std::shared_ptr<ClassFieldRule>>
    MapNames::ClassFieldMap;
std::unordered_map<std::string, std::shared_ptr<TypeNameRule>>
    MapNames::CuDNNTypeNamesMap;
std::unordered_map<std::string, std::shared_ptr<EnumNameRule>>
    EnumConstantRule::EnumNamesMap;
MapNames::MapTy CuDNNTypeRule::CuDNNEnumNamesMap;
std::map<std::string /*Original API*/, HelperFeatureEnum>
    CuDNNTypeRule::CuDNNEnumNamesHelperFeaturesMap;
MapNames::ThrustMapTy MapNames::ThrustFuncNamesMap;
std::map<std::string /*Original API*/, HelperFeatureEnum>
    MapNames::ThrustFuncNamesHelperFeaturesMap;
MapNames::MapTy MapNames::MathFuncNameMap;
std::unordered_map<std::string, std::string> MapNames::AtomicFuncNamesMap;
MapNames::MapTy MapNames::ITFName;
std::map<std::string, MapNames::BLASFuncReplInfo> MapNames::BLASFuncReplInfoMap;
std::map<std::string, MapNames::BLASGemmExTypeInfo>
    MapNames::BLASTGemmExTypeInfoMap;
std::unordered_map<std::string, std::pair<std::string, std::string>>
    MapNames::MathTypeCastingMap;
MapNames::MapTy MapNames::BLASComputingAPIWithRewriter;
std::unordered_set<std::string> MapNames::SOLVERAPIWithRewriter;
std::unordered_set<std::string> MapNames::SPARSEAPIWithRewriter;

void MapNames::setExplicitNamespaceMap() {

  auto NamespaceSet = DpctGlobalInfo::getExplicitNamespaceSet();
  if (NamespaceSet.count(ExplicitNamespace::EN_DPCT)) {
    // Use dpct:: namespace explicitly
    DpctNamespace[0] = "dpct::";
  }
  if (NamespaceSet.count(ExplicitNamespace::EN_CL)) {
    // Use cl::sycl:: namespace explicitly
    ClNamespace = {"cl::sycl::", "cl::sycl::", "cl::sycl::", "cl::sycl::"};
  } else if (NamespaceSet.count(ExplicitNamespace::EN_SYCL)) {
    // Use sycl:: namespace explicitly
    ClNamespace = {"sycl::", "sycl::", "sycl::", "sycl::"};
  } else if (NamespaceSet.count(ExplicitNamespace::EN_SYCL_Math)) {
    // Use sycl:: namespce for SYCL math functions
    ClNamespace = {"", "sycl::", "sycl::", "sycl::"};
  }

  MathTypeCastingMap = {
      {"__half_as_short",
       {"short", MapNames::getClNamespace(false, true) + "half"}},
      {"__half_as_ushort",
       {"unsigned short", MapNames::getClNamespace(false, true) + "half"}},
      {"__short_as_half",
       {MapNames::getClNamespace(false, true) + "half", "short"}},
      {"__ushort_as_half",
       {MapNames::getClNamespace(false, true) + "half", "unsigned short"}},
      {"__double_as_longlong", {"long long", "double"}},
      {"__float_as_int", {"int", "float"}},
      {"__float_as_uint", {"unsigned int", "float"}},
      {"__int_as_float", {"float", "int"}},
      {"__longlong_as_double", {"double", "long long"}},
      {"__uint_as_float", {"float", "unsigned int"}}};

  // Type names mapping.
  TypeNamesMap = {
      {"cudaDeviceProp",
       std::make_shared<TypeNameRule>(getDpctNamespace() + "device_info",
                                      HelperFeatureEnum::Device_device_info)},
      {"cudaError_t", std::make_shared<TypeNameRule>("int")},
      {"cudaError", std::make_shared<TypeNameRule>("int")},
      {"CUresult", std::make_shared<TypeNameRule>("int")},
      {"CUcontext", std::make_shared<TypeNameRule>("int")},
      {"CUmodule", std::make_shared<TypeNameRule>(getDpctNamespace() + "kernel_library",
                         HelperFeatureEnum::Kernel_kernel_library)},
      {"CUfunction", std::make_shared<TypeNameRule>(
                         getDpctNamespace() + "kernel_function",
                         HelperFeatureEnum::Kernel_kernel_library)},
      {"cudaPointerAttributes",
       std::make_shared<TypeNameRule>(getDpctNamespace() + "pointer_attributes",
                                  HelperFeatureEnum::Memory_pointer_attributes)},
      {"dim3", std::make_shared<TypeNameRule>(getClNamespace() + "range<3>")},
      {"int2", std::make_shared<TypeNameRule>(getClNamespace() + "int2")},
      {"double2", std::make_shared<TypeNameRule>(getClNamespace() + "double2")},
      {"__half", std::make_shared<TypeNameRule>(getClNamespace() + "half")},
      {"__half2", std::make_shared<TypeNameRule>(getClNamespace() + "half2")},
      {"half", std::make_shared<TypeNameRule>(getClNamespace() + "half")},
      {"half2", std::make_shared<TypeNameRule>(getClNamespace() + "half2")},
      {"cudaEvent_t",
       std::make_shared<TypeNameRule>(getDpctNamespace() + "event_ptr")},
      {"CUevent", std::make_shared<TypeNameRule>(getDpctNamespace() + "event_ptr")},
      {"CUevent_st",
       std::make_shared<TypeNameRule>(getClNamespace() + "event")},
      {"CUfunc_cache", std::make_shared<TypeNameRule>("int")},
      {"cudaStream_t",
       std::make_shared<TypeNameRule>(getDpctNamespace() + "queue_ptr",
                                  HelperFeatureEnum::Device_typedef_queue_ptr)},
      {"CUstream",
       std::make_shared<TypeNameRule>(getDpctNamespace() + "queue_ptr",
                                  HelperFeatureEnum::Device_typedef_queue_ptr)},
      {"CUstream_st",
       std::make_shared<TypeNameRule>(getClNamespace() + "queue")},
      {"char1", std::make_shared<TypeNameRule>("char")},
      {"char2", std::make_shared<TypeNameRule>(getClNamespace() + "char2")},
      {"char3", std::make_shared<TypeNameRule>(getClNamespace() + "char3")},
      {"char4", std::make_shared<TypeNameRule>(getClNamespace() + "char4")},
      {"double1", std::make_shared<TypeNameRule>("double")},
      {"double2", std::make_shared<TypeNameRule>(getClNamespace() + "double2")},
      {"double3", std::make_shared<TypeNameRule>(getClNamespace() + "double3")},
      {"double4", std::make_shared<TypeNameRule>(getClNamespace() + "double4")},
      {"float1", std::make_shared<TypeNameRule>("float")},
      {"float2", std::make_shared<TypeNameRule>(getClNamespace() + "float2")},
      {"float3", std::make_shared<TypeNameRule>(getClNamespace() + "float3")},
      {"float4", std::make_shared<TypeNameRule>(getClNamespace() + "float4")},
      {"int1", std::make_shared<TypeNameRule>("int")},
      {"int2", std::make_shared<TypeNameRule>(getClNamespace() + "int2")},
      {"int3", std::make_shared<TypeNameRule>(getClNamespace() + "int3")},
      {"int4", std::make_shared<TypeNameRule>(getClNamespace() + "int4")},
      {"long1", std::make_shared<TypeNameRule>("long")},
      {"long2", std::make_shared<TypeNameRule>(getClNamespace() + "long2")},
      {"long3", std::make_shared<TypeNameRule>(getClNamespace() + "long3")},
      {"long4", std::make_shared<TypeNameRule>(getClNamespace() + "long4")},
      {"longlong1", std::make_shared<TypeNameRule>("int64_t")},
      {"longlong2",
       std::make_shared<TypeNameRule>(getClNamespace() + "longlong2")},
      {"longlong3",
       std::make_shared<TypeNameRule>(getClNamespace() + "longlong3")},
      {"longlong4",
       std::make_shared<TypeNameRule>(getClNamespace() + "longlong4")},
      {"short1", std::make_shared<TypeNameRule>("short")},
      {"short2", std::make_shared<TypeNameRule>(getClNamespace() + "short2")},
      {"short3", std::make_shared<TypeNameRule>(getClNamespace() + "short3")},
      {"short4", std::make_shared<TypeNameRule>(getClNamespace() + "short4")},
      {"uchar1", std::make_shared<TypeNameRule>("uint8_t")},
      {"uchar2", std::make_shared<TypeNameRule>(getClNamespace() + "uchar2")},
      {"uchar3", std::make_shared<TypeNameRule>(getClNamespace() + "uchar3")},
      {"uchar4", std::make_shared<TypeNameRule>(getClNamespace() + "uchar4")},
      {"uint1", std::make_shared<TypeNameRule>("uint32_t")},
      {"uint2", std::make_shared<TypeNameRule>(getClNamespace() + "uint2")},
      {"uint3", std::make_shared<TypeNameRule>(getClNamespace() + "uint3")},
      {"uint4", std::make_shared<TypeNameRule>(getClNamespace() + "uint4")},
      {"ulong1", std::make_shared<TypeNameRule>("uint64_t")},
      {"ulong2", std::make_shared<TypeNameRule>(getClNamespace() + "ulong2")},
      {"ulong3", std::make_shared<TypeNameRule>(getClNamespace() + "ulong3")},
      {"ulong4", std::make_shared<TypeNameRule>(getClNamespace() + "ulong4")},
      {"ulonglong1", std::make_shared<TypeNameRule>("uint64_t")},
      {"ulonglong2",
       std::make_shared<TypeNameRule>(getClNamespace() + "ulonglong2")},
      {"ulonglong3",
       std::make_shared<TypeNameRule>(getClNamespace() + "ulonglong3")},
      {"ulonglong4",
       std::make_shared<TypeNameRule>(getClNamespace() + "ulonglong4")},
      {"ushort1", std::make_shared<TypeNameRule>("uint16_t")},
      {"ushort2", std::make_shared<TypeNameRule>(getClNamespace() + "ushort2")},
      {"ushort3", std::make_shared<TypeNameRule>(getClNamespace() + "ushort3")},
      {"ushort4", std::make_shared<TypeNameRule>(getClNamespace() + "ushort4")},
      {"cublasHandle_t",
       std::make_shared<TypeNameRule>(getDpctNamespace() + "queue_ptr",
       HelperFeatureEnum::Device_typedef_queue_ptr)},
      {"cublasStatus_t", std::make_shared<TypeNameRule>("int")},
      {"cublasStatus", std::make_shared<TypeNameRule>("int")},
      {"cublasGemmAlgo_t", std::make_shared<TypeNameRule>("int")},
      {"cudaDataType_t", std::make_shared<TypeNameRule>(
                             getDpctNamespace() + "library_data_t",
                             HelperFeatureEnum::LibCommonUtils_library_data_t)},
      {"cudaDataType", std::make_shared<TypeNameRule>(
                           getDpctNamespace() + "library_data_t",
                           HelperFeatureEnum::LibCommonUtils_library_data_t)},
      {"cublasDataType_t",
       std::make_shared<TypeNameRule>(
           getDpctNamespace() + "library_data_t",
           HelperFeatureEnum::LibCommonUtils_library_data_t)},
      {"cublasComputeType_t",
       std::make_shared<TypeNameRule>(
           getDpctNamespace() + "library_data_t",
           HelperFeatureEnum::LibCommonUtils_library_data_t)},
      {"cuComplex",
       std::make_shared<TypeNameRule>(getClNamespace() + "float2")},
      {"cuFloatComplex",
       std::make_shared<TypeNameRule>(getClNamespace() + "float2")},
      {"cuDoubleComplex",
       std::make_shared<TypeNameRule>(getClNamespace() + "double2")},
      {"cublasFillMode_t", std::make_shared<TypeNameRule>("oneapi::mkl::uplo")},
      {"cublasDiagType_t", std::make_shared<TypeNameRule>("oneapi::mkl::diag")},
      {"cublasSideMode_t", std::make_shared<TypeNameRule>("oneapi::mkl::side")},
      {"cublasOperation_t",
       std::make_shared<TypeNameRule>("oneapi::mkl::transpose")},
      {"cublasPointerMode_t", std::make_shared<TypeNameRule>("int")},
      {"cublasAtomicsMode_t", std::make_shared<TypeNameRule>("int")},
      {"cublasMath_t", std::make_shared<TypeNameRule>("int")},
      {"cusparsePointerMode_t", std::make_shared<TypeNameRule>("int")},
      {"cusparseFillMode_t",
       std::make_shared<TypeNameRule>("oneapi::mkl::uplo")},
      {"cusparseDiagType_t",
       std::make_shared<TypeNameRule>("oneapi::mkl::diag")},
      {"cusparseIndexBase_t",
       std::make_shared<TypeNameRule>("oneapi::mkl::index_base")},
      {"cusparseMatrixType_t", std::make_shared<TypeNameRule>(
           getDpctNamespace() + "sparse::sparse_matrix_info::matrix_type",
           HelperFeatureEnum::SparseUtils_sparse_matrix_info)},
      {"cusparseOperation_t",
       std::make_shared<TypeNameRule>("oneapi::mkl::transpose")},
      {"cusparseSolveAnalysisInfo_t", std::make_shared<TypeNameRule>("int")},
      {"thrust::device_ptr",
       std::make_shared<TypeNameRule>(
           getDpctNamespace() + "device_pointer",
           HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl)},
      {"thrust::device_reference",
       std::make_shared<TypeNameRule>(getDpctNamespace() + "device_reference",
				      HelperFeatureEnum::DplExtrasMemory_device_reference)},
      {"thrust::device_vector",
       std::make_shared<TypeNameRule>(
           getDpctNamespace() + "device_vector",
           HelperFeatureEnum::DplExtrasVector_device_vector)},
      {"thrust::device_malloc_allocator",
       std::make_shared<TypeNameRule>(getClNamespace() + "buffer_allocator")},
      {"thrust::maximum",
       std::make_shared<TypeNameRule>("oneapi::dpl::maximum")},
      {"thrust::multiplies", std::make_shared<TypeNameRule>("std::multiplies")},
      {"thrust::plus", std::make_shared<TypeNameRule>("std::plus")},
      {"thrust::seq",
       std::make_shared<TypeNameRule>("oneapi::dpl::execution::seq")},
      {"thrust::device",
       std::make_shared<TypeNameRule>("oneapi::dpl::execution::dpcpp_default")},
      {"thrust::host",
       std::make_shared<TypeNameRule>("oneapi::dpl::execution::seq")},
      {"thrust::minus", std::make_shared<TypeNameRule>("std::minus")},
      {"thrust::greater", std::make_shared<TypeNameRule>("std::greater")},
      {"thrust::equal_to",
       std::make_shared<TypeNameRule>("oneapi::dpl::equal_to")},
      {"thrust::less", std::make_shared<TypeNameRule>("oneapi::dpl::less")},
      {"thrust::negate", std::make_shared<TypeNameRule>("std::negate")},
      {"thrust::identity",
       std::make_shared<TypeNameRule>("oneapi::dpl::identity")},
      {"thrust::logical_or", std::make_shared<TypeNameRule>("std::logical_or")},
      {"thrust::divides", std::make_shared<TypeNameRule>("std::divides")},
      {"thrust::tuple", std::make_shared<TypeNameRule>("std::tuple")},
      {"thrust::pair", std::make_shared<TypeNameRule>("std::pair")},
      {"thrust::host_vector", std::make_shared<TypeNameRule>("std::vector")},
      {"thrust::complex", std::make_shared<TypeNameRule>("std::complex")},
      {"thrust::counting_iterator",
       std::make_shared<TypeNameRule>("oneapi::dpl::counting_iterator")},
      {"thrust::permutation_iterator",
       std::make_shared<TypeNameRule>("oneapi::dpl::permutation_iterator")},
      {"thrust::transform_iterator",
       std::make_shared<TypeNameRule>("oneapi::dpl::transform_iterator")},
      {"thrust::iterator_difference",
       std::make_shared<TypeNameRule>("std::iterator_traits")},
      {"thrust::tuple_element",
       std::make_shared<TypeNameRule>("std::tuple_element")},
       {"thrust::tuple_size",
       std::make_shared<TypeNameRule>("std::tuple_size")},
       {"thrust::swap",
       std::make_shared<TypeNameRule>("std::swap")},
      {"cusolverDnHandle_t",
       std::make_shared<TypeNameRule>(getClNamespace() + "queue*")},
      {"cusolverEigType_t", std::make_shared<TypeNameRule>("int64_t")},
      {"cusolverEigMode_t", std::make_shared<TypeNameRule>("oneapi::mkl::job")},
      {"cusolverStatus_t", std::make_shared<TypeNameRule>("int")},
      {"cudaChannelFormatDesc",
       std::make_shared<TypeNameRule>(getDpctNamespace() + "image_channel",
                                      HelperFeatureEnum::Image_image_channel)},
      {"cudaChannelFormatKind",
       std::make_shared<TypeNameRule>(
           getDpctNamespace() + "image_channel_data_type",
           HelperFeatureEnum::Image_image_channel_data_type)},
      {"cudaArray",
       std::make_shared<TypeNameRule>(getDpctNamespace() + "image_matrix",
                                      HelperFeatureEnum::Image_image_matrix)},
      {"cudaArray_t", std::make_shared<TypeNameRule>(
                          getDpctNamespace() + "image_matrix_p",
                          HelperFeatureEnum::Image_image_matrix_p_alias)},
      {"cudaTextureDesc",
       std::make_shared<TypeNameRule>(getDpctNamespace() + "sampling_info",
                                      HelperFeatureEnum::Image_sampling_info)},
      {"cudaResourceDesc",
       std::make_shared<TypeNameRule>(getDpctNamespace() + "image_data",
                                      HelperFeatureEnum::Image_image_data)},
      {"cudaTextureObject_t",
       std::make_shared<TypeNameRule>(
           getDpctNamespace() + "image_wrapper_base_p",
           HelperFeatureEnum::Image_image_wrapper_base_p_alias)},
      {"cudaTextureAddressMode",
       std::make_shared<TypeNameRule>(getClNamespace() + "addressing_mode")},
      {"cudaTextureFilterMode",
       std::make_shared<TypeNameRule>(getClNamespace() + "filtering_mode")},
      {"curandStatus_t", std::make_shared<TypeNameRule>("int")},
      {"curandStatus", std::make_shared<TypeNameRule>("int")},
      {"cusparseStatus_t", std::make_shared<TypeNameRule>("int")},
      {"cusparseMatDescr_t",
       std::make_shared<TypeNameRule>(
        "std::shared_ptr<" + getDpctNamespace() + "sparse::sparse_matrix_info>",
        HelperFeatureEnum::SparseUtils_sparse_matrix_info)},
      {"cusparseHandle_t",
       std::make_shared<TypeNameRule>(getClNamespace() + "queue*")},
      {"cudaMemoryAdvise", std::make_shared<TypeNameRule>("int")},
      {"CUmem_advise", std::make_shared<TypeNameRule>("int")},
      {"cudaPos", std::make_shared<TypeNameRule>(getClNamespace() + "id<3>")},
      {"cudaExtent",
       std::make_shared<TypeNameRule>(getClNamespace() + "range<3>")},
      {"cudaPitchedPtr",
       std::make_shared<TypeNameRule>(getDpctNamespace() + "pitched_data",
                                      HelperFeatureEnum::Memory_pitched_data)},
      {"cudaMemcpyKind", std::make_shared<TypeNameRule>(
                             getDpctNamespace() + "memcpy_direction",
                             HelperFeatureEnum::Memory_memcpy_direction)},
      {"cudaComputeMode", std::make_shared<TypeNameRule>("int")},
      {"cudaSharedMemConfig", std::make_shared<TypeNameRule>("int")},
      {"cufftReal", std::make_shared<TypeNameRule>("float")},
      {"cufftDoubleReal", std::make_shared<TypeNameRule>("double")},
      {"cufftComplex",
       std::make_shared<TypeNameRule>(getClNamespace() + "float2")},
      {"cufftDoubleComplex",
       std::make_shared<TypeNameRule>(getClNamespace() + "double2")},
      {"cufftResult_t", std::make_shared<TypeNameRule>("int")},
      {"cufftResult", std::make_shared<TypeNameRule>("int")},
      {"cufftType_t",
       std::make_shared<TypeNameRule>(getDpctNamespace() + "fft::fft_type",
                                      HelperFeatureEnum::FftUtils_fft_type)},
      {"cufftType",
       std::make_shared<TypeNameRule>(getDpctNamespace() + "fft::fft_type",
                                      HelperFeatureEnum::FftUtils_fft_type)},
      {"cufftHandle",
       std::make_shared<TypeNameRule>(getDpctNamespace() +
                                          "fft::fft_engine*",
                                      HelperFeatureEnum::FftUtils_fft_engine)},
      {"CUdevice", std::make_shared<TypeNameRule>("int")},
      {"CUarray_st",
       std::make_shared<TypeNameRule>(getDpctNamespace() + "image_matrix",
                                      HelperFeatureEnum::Image_image_matrix)},
      {"CUarray", std::make_shared<TypeNameRule>(
                      getDpctNamespace() + "image_matrix_p",
                      HelperFeatureEnum::Image_image_matrix_p_alias)},
      {"CUarray_format",
       std::make_shared<TypeNameRule>(getClNamespace() + "image_channel_type")},
      {"CUarray_format_enum",
       std::make_shared<TypeNameRule>(getClNamespace() + "image_channel_type")},
      {"CUtexObject", std::make_shared<TypeNameRule>(
                          getDpctNamespace() + "image_wrapper_base_p",
                          HelperFeatureEnum::Image_image_wrapper_base_p_alias)},
      {"CUDA_RESOURCE_DESC",
       std::make_shared<TypeNameRule>(getDpctNamespace() + "image_data",
                                      HelperFeatureEnum::Image_image_data)},
      {"CUDA_TEXTURE_DESC",
       std::make_shared<TypeNameRule>(getDpctNamespace() + "sampling_info",
                                      HelperFeatureEnum::Image_sampling_info)},
      {"CUaddress_mode",
       std::make_shared<TypeNameRule>(getClNamespace() + "addressing_mode")},
      {"CUaddress_mode_enum",
       std::make_shared<TypeNameRule>(getClNamespace() + "addressing_mode")},
      {"CUfilter_mode",
       std::make_shared<TypeNameRule>(getClNamespace() + "filtering_mode")},
      {"CUfilter_mode_enum",
       std::make_shared<TypeNameRule>(getClNamespace() + "filtering_mode")},
      {"CUdeviceptr", std::make_shared<TypeNameRule>("char *")},
      {"CUresourcetype_enum", std::make_shared<TypeNameRule>(
                                  getDpctNamespace() + "image_data_type",
                                  HelperFeatureEnum::Image_image_data_type)},
      {"CUresourcetype", std::make_shared<TypeNameRule>(
                             getDpctNamespace() + "image_data_type",
                             HelperFeatureEnum::Image_image_data_type)},
      {"cudaResourceType", std::make_shared<TypeNameRule>(
                               getDpctNamespace() + "image_data_type",
                               HelperFeatureEnum::Image_image_data_type)},
      {"CUtexref", std::make_shared<TypeNameRule>(
                       getDpctNamespace() + "image_wrapper_base_p",
                       HelperFeatureEnum::Image_image_wrapper_base_p_alias)},
      {"cudaDeviceAttr", std::make_shared<TypeNameRule>("int")},
      {"__nv_bfloat16",
       std::make_shared<TypeNameRule>("oneapi::mkl::bfloat16")},
      {"libraryPropertyType_t",
       std::make_shared<TypeNameRule>(
           getDpctNamespace() + "version_field",
           HelperFeatureEnum::LibCommonUtils_version_field)},
      {"libraryPropertyType",
       std::make_shared<TypeNameRule>(
           getDpctNamespace() + "version_field",
           HelperFeatureEnum::LibCommonUtils_version_field)},
      {"ncclUniqueId", std::make_shared<TypeNameRule>(
                           "oneapi::ccl::kvs::address_type",
                           HelperFeatureEnum::CclUtils_create_kvs_address)},
      {"ncclComm_t",
       std::make_shared<TypeNameRule>("oneapi::ccl::communicator *",
                                      HelperFeatureEnum::CclUtils_create_kvs)},
      {"ncclRedOp_t", std::make_shared<TypeNameRule>("oneapi::ccl::reduction")},
      {"ncclDataType_t", std::make_shared<TypeNameRule>("oneapi::ccl::datatype")},
      // ...
  };

  // CuDNN Type names mapping.
  CuDNNTypeNamesMap = {
      {"cudnnHandle_t",
       std::make_shared<TypeNameRule>(getDpctNamespace() + "dnnl::engine_ext",
                                      HelperFeatureEnum::DnnlUtils_engine_ext)},
      {"cudnnStatus_t", std::make_shared<TypeNameRule>("int")},
      {"cudnnTensorDescriptor_t",
       std::make_shared<TypeNameRule>(
           getDpctNamespace() + "dnnl::memory_desc_ext",
           HelperFeatureEnum::DnnlUtils_memory_desc_ext)},
      {"cudnnFilterDescriptor_t",
       std::make_shared<TypeNameRule>(
           getDpctNamespace() + "dnnl::memory_desc_ext",
           HelperFeatureEnum::DnnlUtils_memory_desc_ext)},
      {"cudnnTensorFormat_t",
       std::make_shared<TypeNameRule>(
           getDpctNamespace() + "dnnl::memory_format_tag",
           HelperFeatureEnum::DnnlUtils_memory_format_tag)},
      {"cudnnDataType_t",
       std::make_shared<TypeNameRule>(
           getDpctNamespace() + "library_data_t",
           HelperFeatureEnum::LibCommonUtils_library_data_t)},
      {"cudnnActivationDescriptor_t",
       std::make_shared<TypeNameRule>(
           getDpctNamespace() + "dnnl::activation_desc",
           HelperFeatureEnum::DnnlUtils_activation_desc)},
      {"cudnnActivationMode_t",
       std::make_shared<TypeNameRule>("dnnl::algorithm")},
      {"cudnnLRNDescriptor_t",
       std::make_shared<TypeNameRule>(getDpctNamespace() + "dnnl::lrn_desc",
                                      HelperFeatureEnum::DnnlUtils_lrn_desc)},
      {"cudnnLRNMode_t", std::make_shared<TypeNameRule>("dnnl::algorithm")},
      {"cudnnPoolingDescriptor_t",
       std::make_shared<TypeNameRule>(
           getDpctNamespace() + "dnnl::pooling_desc",
           HelperFeatureEnum::DnnlUtils_pooling_desc)},
      {"cudnnPoolingMode_t", std::make_shared<TypeNameRule>("dnnl::algorithm")},
      {"cudnnSoftmaxAlgorithm_t",
       std::make_shared<TypeNameRule>(
           getDpctNamespace() + "dnnl::softmax_algorithm",
           HelperFeatureEnum::DnnlUtils_softmax_algorithm)},
      {"cudnnSoftmaxMode_t", std::make_shared<TypeNameRule>(
                                 getDpctNamespace() + "dnnl::softmax_mode",
                                 HelperFeatureEnum::DnnlUtils_softmax_mode)},
      {"cudnnReduceTensorDescriptor_t",
       std::make_shared<TypeNameRule>(
           getDpctNamespace() + "dnnl::reduction_op",
           HelperFeatureEnum::DnnlUtils_reduction_op)},
      {"cudnnReduceTensorOp_t", std::make_shared<TypeNameRule>(
                                    getDpctNamespace() + "dnnl::reduction_op",
                                    HelperFeatureEnum::DnnlUtils_reduction_op)},
      {"cudnnOpTensorDescriptor_t",
       std::make_shared<TypeNameRule>(getDpctNamespace() + "dnnl::binary_op",
                                      HelperFeatureEnum::DnnlUtils_binary_op)},
      {"cudnnOpTensorOp_t",
       std::make_shared<TypeNameRule>(getDpctNamespace() + "dnnl::binary_op",
                                      HelperFeatureEnum::DnnlUtils_binary_op)},
      {"cudnnBatchNormOps_t",
       std::make_shared<TypeNameRule>(
           getDpctNamespace() + "dnnl::batch_normalization_ops",
           HelperFeatureEnum::DnnlUtils_batch_normalization_ops)},
      {"cudnnBatchNormMode_t",
       std::make_shared<TypeNameRule>(
           getDpctNamespace() + "dnnl::batch_normalization_mode",
           HelperFeatureEnum::DnnlUtils_batch_normalization_mode)},
      {"cudnnNormOps_t",
       std::make_shared<TypeNameRule>(
           getDpctNamespace() + "dnnl::batch_normalization_ops",
           HelperFeatureEnum::DnnlUtils_batch_normalization_ops)},
      {"cudnnNormMode_t",
       std::make_shared<TypeNameRule>(
           getDpctNamespace() + "dnnl::batch_normalization_mode",
           HelperFeatureEnum::DnnlUtils_batch_normalization_mode)},
      {"cudnnConvolutionDescriptor_t",
       std::make_shared<TypeNameRule>(
           getDpctNamespace() + "dnnl::convolution_desc",
           HelperFeatureEnum::DnnlUtils_convolution_desc)},
      {"cudnnConvolutionFwdAlgo_t",
       std::make_shared<TypeNameRule>("dnnl::algorithm")},
      {"cudnnConvolutionBwdDataAlgo_t",
       std::make_shared<TypeNameRule>("dnnl::algorithm")},
      {"cudnnConvolutionBwdFilterAlgo_t",
       std::make_shared<TypeNameRule>("dnnl::algorithm")},
      {"cudnnRNNMode_t",
       std::make_shared<TypeNameRule>(getDpctNamespace() + "dnnl::rnn_mode",
                                      HelperFeatureEnum::DnnlUtils_rnn_mode)},
      {"cudnnRNNBiasMode_t", std::make_shared<TypeNameRule>(
                                 getDpctNamespace() + "dnnl::rnn_bias_mode",
                                 HelperFeatureEnum::DnnlUtils_rnn_bias_mode)},
      {"cudnnDirectionMode_t", std::make_shared<TypeNameRule>(
                                   getDpctNamespace() + "dnnl::rnn_direction",
                                   HelperFeatureEnum::DnnlUtils_rnn_direction)},
      {"cudnnRNNDescriptor_t",
       std::make_shared<TypeNameRule>(getDpctNamespace() + "dnnl::rnn_desc",
                                      HelperFeatureEnum::DnnlUtils_rnn_desc)},
      {"cudnnForwardMode_t", std::make_shared<TypeNameRule>("dnnl::prop_kind")},
      {"cudnnRNNDataDescriptor_t",
       std::make_shared<TypeNameRule>(
           getDpctNamespace() + "dnnl::memory_desc_ext",
           HelperFeatureEnum::DnnlUtils_memory_desc_ext)},
      {"cudnnRNNDataLayout_t",
       std::make_shared<TypeNameRule>(
           getDpctNamespace() + "dnnl::rnn_memory_format_tag",
           HelperFeatureEnum::DnnlUtils_rnn_memory_format_tag)},
  };

  // CuDNN Enum constants name mapping.
  CuDNNTypeRule::CuDNNEnumNamesMap = {
      {"CUDNN_TENSOR_NCHW",
       getDpctNamespace() + "dnnl::memory_format_tag::nchw"},
      {"CUDNN_TENSOR_NHWC",
       getDpctNamespace() + "dnnl::memory_format_tag::nhwc"},
      {"CUDNN_TENSOR_NCHW_VECT_C",
       getDpctNamespace() + "dnnl::memory_format_tag::nchw_blocked"},
      {"CUDNN_DATA_FLOAT", getDpctNamespace() + "library_data_t::real_float"},
      {"CUDNN_DATA_HALF", getDpctNamespace() + "library_data_t::real_half"},
      {"CUDNN_DATA_INT8", getDpctNamespace() + "library_data_t::real_int8"},
      {"CUDNN_DATA_UINT8", getDpctNamespace() + "library_data_t::real_uint8"},
      {"CUDNN_DATA_INT32", getDpctNamespace() + "library_data_t::real_int32"},
      {"CUDNN_DATA_INT8x4", getDpctNamespace() + "library_data_t::real_int8_4"},
      {"CUDNN_DATA_INT8x32",
       getDpctNamespace() + "library_data_t::real_int8_32"},
      {"CUDNN_DATA_UINT8x4",
       getDpctNamespace() + "library_data_t::real_uint8_4"},
      {"CUDNN_DATA_BFLOAT16",
       getDpctNamespace() + "library_data_t::real_bfloat16"},
      {"CUDNN_ACTIVATION_SIGMOID",
       "dnnl::algorithm::eltwise_logistic_use_dst_for_bwd"},
      {"CUDNN_ACTIVATION_RELU", "dnnl::algorithm::eltwise_relu_use_dst_for_bwd"},
      {"CUDNN_ACTIVATION_TANH", "dnnl::algorithm::eltwise_tanh_use_dst_for_bwd"},
      {"CUDNN_ACTIVATION_CLIPPED_RELU",
       "dnnl::algorithm::eltwise_clip"},
      {"CUDNN_ACTIVATION_ELU", "dnnl::algorithm::eltwise_elu_use_dst_for_bwd"},
      {"CUDNN_ACTIVATION_IDENTITY", "dnnl::algorithm::eltwise_linear"},
      {"CUDNN_ACTIVATION_SWISH", "dnnl::algorithm::eltwise_swish"},
      {"CUDNN_LRN_CROSS_CHANNEL_DIM1", "dnnl::algorithm::lrn_across_channels"},
      {"CUDNN_POOLING_MAX", "dnnl::algorithm::pooling_max"},
      {"CUDNN_POOLING_AVERAGE_COUNT_INCLUDE_PADDING",
       "dnnl::algorithm::pooling_avg_include_padding"},
      {"CUDNN_POOLING_AVERAGE_COUNT_EXCLUDE_PADDING",
       "dnnl::algorithm::pooling_avg_exclude_padding"},
      {"CUDNN_POOLING_MAX_DETERMINISTIC", "dnnl::algorithm::pooling_max"},
      {"CUDNN_SOFTMAX_FAST",
       getDpctNamespace() + "dnnl::softmax_algorithm::normal"},
      {"CUDNN_SOFTMAX_ACCURATE",
       getDpctNamespace() + "dnnl::softmax_algorithm::normal"},
      {"CUDNN_SOFTMAX_LOG",
       getDpctNamespace() + "dnnl::softmax_algorithm::log"},
      {"CUDNN_SOFTMAX_MODE_INSTANCE",
       getDpctNamespace() + "dnnl::softmax_mode::instance"},
      {"CUDNN_SOFTMAX_MODE_CHANNEL",
       getDpctNamespace() + "dnnl::softmax_mode::channel"},
      {"CUDNN_REDUCE_TENSOR_ADD",
       getDpctNamespace() + "dnnl::reduction_op::sum"},
      {"CUDNN_REDUCE_TENSOR_MUL",
       getDpctNamespace() + "dnnl::reduction_op::mul"},
      {"CUDNN_REDUCE_TENSOR_MIN",
       getDpctNamespace() + "dnnl::reduction_op::min"},
      {"CUDNN_REDUCE_TENSOR_MAX",
       getDpctNamespace() + "dnnl::reduction_op::max"},
      {"CUDNN_REDUCE_TENSOR_AMAX",
       getDpctNamespace() + "dnnl::reduction_op::amax"},
      {"CUDNN_REDUCE_TENSOR_AVG",
       getDpctNamespace() + "dnnl::reduction_op::mean"},
      {"CUDNN_REDUCE_TENSOR_NORM1",
       getDpctNamespace() + "dnnl::reduction_op::norm1"},
      {"CUDNN_REDUCE_TENSOR_NORM2",
       getDpctNamespace() + "dnnl::reduction_op::norm2"},
      {"CUDNN_REDUCE_TENSOR_MUL_NO_ZEROS",
       getDpctNamespace() + "dnnl::reduction_op::mul_no_zeros"},
      {"CUDNN_OP_TENSOR_ADD", getDpctNamespace() + "dnnl::binary_op::add"},
      {"CUDNN_OP_TENSOR_MUL", getDpctNamespace() + "dnnl::binary_op::mul"},
      {"CUDNN_OP_TENSOR_MIN", getDpctNamespace() + "dnnl::binary_op::min"},
      {"CUDNN_OP_TENSOR_MAX", getDpctNamespace() + "dnnl::binary_op::max"},
      {"CUDNN_OP_TENSOR_SQRT", getDpctNamespace() + "dnnl::binary_op::sqrt"},
      {"CUDNN_OP_TENSOR_NOT", getDpctNamespace() + "dnnl::binary_op::neg"},
      {"CUDNN_BATCHNORM_OPS_BN",
       getDpctNamespace() + "dnnl::batch_normalization_ops::none"},
      {"CUDNN_BATCHNORM_OPS_BN_ACTIVATION",
       getDpctNamespace() + "dnnl::batch_normalization_ops::activation"},
      {"CUDNN_BATCHNORM_OPS_BN_ADD_ACTIVATION",
       getDpctNamespace() + "dnnl::batch_normalization_ops::add_activation"},
      {"CUDNN_BATCHNORM_PER_ACTIVATION",
       getDpctNamespace() + "dnnl::batch_normalization_mode::per_activation"},
      {"CUDNN_BATCHNORM_SPATIAL",
       getDpctNamespace() + "dnnl::batch_normalization_mode::spatial"},
      {"CUDNN_BATCHNORM_SPATIAL_PERSISTENT",
       getDpctNamespace() + "dnnl::batch_normalization_mode::spatial"},
      {"CUDNN_NORM_OPS_NORM",
       getDpctNamespace() + "dnnl::batch_normalization_ops::none"},
      {"CUDNN_NORM_OPS_NORM_ACTIVATION",
       getDpctNamespace() + "dnnl::batch_normalization_ops::activation"},
      {"CUDNN_NORM_OPS_NORM_ADD_ACTIVATION",
       getDpctNamespace() + "dnnl::batch_normalization_ops::add_activation"},
      {"CUDNN_NORM_PER_ACTIVATION",
       getDpctNamespace() + "dnnl::batch_normalization_mode::per_activation"},
      {"CUDNN_NORM_PER_CHANNEL",
       getDpctNamespace() + "dnnl::batch_normalization_mode::spatial"},
      {"CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_GEMM",
       "dnnl::algorithm::convolution_auto"},
      {"CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_PRECOMP_GEMM",
       "dnnl::algorithm::convolution_auto"},
      {"CUDNN_CONVOLUTION_FWD_ALGO_GEMM", "dnnl::algorithm::convolution_auto"},
      {"CUDNN_CONVOLUTION_FWD_ALGO_DIRECT",
       "dnnl::algorithm::convolution_direct"},
      {"CUDNN_CONVOLUTION_FWD_ALGO_FFT", "dnnl::algorithm::convolution_auto"},
      {"CUDNN_CONVOLUTION_FWD_ALGO_FFT_TILING",
       "dnnl::algorithm::convolution_auto"},
      {"CUDNN_CONVOLUTION_FWD_ALGO_WINOGRAD",
       "dnnl::algorithm::convolution_winograd"},
      {"CUDNN_CONVOLUTION_FWD_ALGO_WINOGRAD_NONFUSED",
       "dnnl::algorithm::convolution_winograd"},
      {"CUDNN_CONVOLUTION_BWD_DATA_ALGO_0",
       "dnnl::algorithm::convolution_direct"},
      {"CUDNN_CONVOLUTION_BWD_DATA_ALGO_1",
       "dnnl::algorithm::convolution_direct"},
      {"CUDNN_CONVOLUTION_BWD_DATA_ALGO_FFT",
       "dnnl::algorithm::convolution_auto"},
      {"CUDNN_CONVOLUTION_BWD_DATA_ALGO_FFT_TILING",
       "dnnl::algorithm::convolution_auto"},
      {"CUDNN_CONVOLUTION_BWD_DATA_ALGO_WINOGRAD",
       "dnnl::algorithm::convolution_winograd"},
      {"CUDNN_CONVOLUTION_BWD_DATA_ALGO_WINOGRAD_NONFUSED",
       "dnnl::algorithm::convolution_winograd"},
      {"CUDNN_CONVOLUTION_BWD_FILTER_ALGO_0",
       "dnnl::algorithm::convolution_direct"},
      {"CUDNN_CONVOLUTION_BWD_FILTER_ALGO_1",
       "dnnl::algorithm::convolution_direct"},
      {"CUDNN_CONVOLUTION_BWD_FILTER_ALGO_FFT",
       "dnnl::algorithm::convolution_auto"},
      {"CUDNN_CONVOLUTION_BWD_FILTER_ALGO_FFT_TILING",
       "dnnl::algorithm::convolution_auto"},
      {"CUDNN_CONVOLUTION_BWD_FILTER_ALGO_WINOGRAD",
       "dnnl::algorithm::convolution_winograd"},
      {"CUDNN_CONVOLUTION_BWD_FILTER_ALGO_WINOGRAD_NONFUSED",
       "dnnl::algorithm::convolution_winograd"},
      {"CUDNN_RNN_RELU", getDpctNamespace() + "dnnl::rnn_mode::vanilla_relu"},
      {"CUDNN_RNN_TANH", getDpctNamespace() + "dnnl::rnn_mode::vanilla_tanh"},
      {"CUDNN_LSTM", getDpctNamespace() + "dnnl::rnn_mode::lstm"},
      {"CUDNN_GRU", getDpctNamespace() + "dnnl::rnn_mode::gru"},
      {"CUDNN_RNN_NO_BIAS", getDpctNamespace() + "dnnl::rnn_bias_mode::none"},
      {"CUDNN_RNN_SINGLE_INP_BIAS",
       getDpctNamespace() + "dnnl::rnn_bias_mode::single"},
      {"CUDNN_UNIDIRECTIONAL",
       getDpctNamespace() + "dnnl::rnn_direction::unidirectional"},
      {"CUDNN_BIDIRECTIONAL",
       getDpctNamespace() + "dnnl::rnn_direction::bidirectional"},
      {"CUDNN_FWD_MODE_INFERENCE",
       "dnnl::prop_kind::forward_inference"},
      {"CUDNN_FWD_MODE_TRAINING",
       "dnnl::prop_kind::forward_training"},
      {"CUDNN_RNN_DATA_LAYOUT_SEQ_MAJOR_PACKED",
       getDpctNamespace() + "dnnl::rnn_memory_format_tag::tnc"},
  };

  // CuDNN Enum constants name to helper feature mapping.
  CuDNNTypeRule::CuDNNEnumNamesHelperFeaturesMap = {
      {"CUDNN_TENSOR_NCHW", HelperFeatureEnum::DnnlUtils_memory_format_tag},
      {"CUDNN_TENSOR_NHWC", HelperFeatureEnum::DnnlUtils_memory_format_tag},
      {"CUDNN_TENSOR_NCHW_VECT_C",
       HelperFeatureEnum::DnnlUtils_memory_format_tag},
      {"CUDNN_DATA_FLOAT", HelperFeatureEnum::LibCommonUtils_library_data_t},
      {"CUDNN_DATA_HALF", HelperFeatureEnum::LibCommonUtils_library_data_t},
      {"CUDNN_DATA_INT8", HelperFeatureEnum::LibCommonUtils_library_data_t},
      {"CUDNN_DATA_UINT8", HelperFeatureEnum::LibCommonUtils_library_data_t},
      {"CUDNN_DATA_INT32", HelperFeatureEnum::LibCommonUtils_library_data_t},
      {"CUDNN_DATA_INT8x4", HelperFeatureEnum::LibCommonUtils_library_data_t},
      {"CUDNN_DATA_INT8x32", HelperFeatureEnum::LibCommonUtils_library_data_t},
      {"CUDNN_DATA_UINT8x4", HelperFeatureEnum::LibCommonUtils_library_data_t},
      {"CUDNN_DATA_BFLOAT16", HelperFeatureEnum::LibCommonUtils_library_data_t},
      {"CUDNN_SOFTMAX_FAST", HelperFeatureEnum::DnnlUtils_softmax_algorithm},
      {"CUDNN_SOFTMAX_ACCURATE",
       HelperFeatureEnum::DnnlUtils_softmax_algorithm},
      {"CUDNN_SOFTMAX_LOG", HelperFeatureEnum::DnnlUtils_softmax_algorithm},
      {"CUDNN_SOFTMAX_MODE_INSTANCE",
       HelperFeatureEnum::DnnlUtils_softmax_mode},
      {"CUDNN_SOFTMAX_MODE_CHANNEL", HelperFeatureEnum::DnnlUtils_softmax_mode},
      {"CUDNN_REDUCE_TENSOR_ADD", HelperFeatureEnum::DnnlUtils_reduction_op},
      {"CUDNN_REDUCE_TENSOR_MUL", HelperFeatureEnum::DnnlUtils_reduction_op},
      {"CUDNN_REDUCE_TENSOR_MIN", HelperFeatureEnum::DnnlUtils_reduction_op},
      {"CUDNN_REDUCE_TENSOR_MAX", HelperFeatureEnum::DnnlUtils_reduction_op},
      {"CUDNN_REDUCE_TENSOR_AMAX", HelperFeatureEnum::DnnlUtils_reduction_op},
      {"CUDNN_REDUCE_TENSOR_AVG", HelperFeatureEnum::DnnlUtils_reduction_op},
      {"CUDNN_REDUCE_TENSOR_NORM1", HelperFeatureEnum::DnnlUtils_reduction_op},
      {"CUDNN_REDUCE_TENSOR_NORM2", HelperFeatureEnum::DnnlUtils_reduction_op},
      {"CUDNN_REDUCE_TENSOR_MUL_NO_ZEROS",
       HelperFeatureEnum::DnnlUtils_reduction_op},
      {"CUDNN_OP_TENSOR_ADD", HelperFeatureEnum::DnnlUtils_binary_op},
      {"CUDNN_OP_TENSOR_MUL", HelperFeatureEnum::DnnlUtils_binary_op},
      {"CUDNN_OP_TENSOR_MIN", HelperFeatureEnum::DnnlUtils_binary_op},
      {"CUDNN_OP_TENSOR_MAX", HelperFeatureEnum::DnnlUtils_binary_op},
      {"CUDNN_OP_TENSOR_SQRT", HelperFeatureEnum::DnnlUtils_binary_op},
      {"CUDNN_OP_TENSOR_NOT", HelperFeatureEnum::DnnlUtils_binary_op},
      {"CUDNN_BATCHNORM_OPS_BN",
       HelperFeatureEnum::DnnlUtils_batch_normalization_ops},
      {"CUDNN_BATCHNORM_OPS_BN_ACTIVATION",
       HelperFeatureEnum::DnnlUtils_batch_normalization_ops},
      {"CUDNN_BATCHNORM_OPS_BN_ADD_ACTIVATION",
       HelperFeatureEnum::DnnlUtils_batch_normalization_ops},
      {"CUDNN_BATCHNORM_PER_ACTIVATION",
       HelperFeatureEnum::DnnlUtils_batch_normalization_mode},
      {"CUDNN_BATCHNORM_SPATIAL",
       HelperFeatureEnum::DnnlUtils_batch_normalization_mode},
      {"CUDNN_BATCHNORM_SPATIAL_PERSISTENT",
       HelperFeatureEnum::DnnlUtils_batch_normalization_mode},
      {"CUDNN_NORM_OPS_NORM",
       HelperFeatureEnum::DnnlUtils_batch_normalization_ops},
      {"CUDNN_NORM_OPS_NORM_ACTIVATION",
       HelperFeatureEnum::DnnlUtils_batch_normalization_ops},
      {"CUDNN_NORM_OPS_NORM_ADD_ACTIVATION",
       HelperFeatureEnum::DnnlUtils_batch_normalization_ops},
      {"CUDNN_NORM_PER_ACTIVATION",
       HelperFeatureEnum::DnnlUtils_batch_normalization_mode},
      {"CUDNN_NORM_PER_CHANNEL",
       HelperFeatureEnum::DnnlUtils_batch_normalization_mode},
      {"CUDNN_RNN_RELU", HelperFeatureEnum::DnnlUtils_rnn_mode},
      {"CUDNN_RNN_TANH", HelperFeatureEnum::DnnlUtils_rnn_mode},
      {"CUDNN_LSTM", HelperFeatureEnum::DnnlUtils_rnn_mode},
      {"CUDNN_GRU", HelperFeatureEnum::DnnlUtils_rnn_mode},
      {"CUDNN_RNN_NO_BIAS", HelperFeatureEnum::DnnlUtils_rnn_bias_mode},
      {"CUDNN_RNN_SINGLE_INP_BIAS",
       HelperFeatureEnum::DnnlUtils_rnn_bias_mode},
      {"CUDNN_UNIDIRECTIONAL",
       HelperFeatureEnum::DnnlUtils_rnn_direction},
      {"CUDNN_BIDIRECTIONAL",
       HelperFeatureEnum::DnnlUtils_rnn_direction},
      {"CUDNN_RNN_DATA_LAYOUT_SEQ_MAJOR_PACKED",
       HelperFeatureEnum::DnnlUtils_rnn_memory_format_tag},
  };

  // Enum constants name mapping.
  EnumConstantRule::EnumNamesMap = {
      // ...
      // enum Device Attribute
      // ...
      {"cudaDevAttrHostNativeAtomicSupported",
       std::make_shared<EnumNameRule>(
           "is_native_atomic_supported",
           HelperFeatureEnum::Device_device_ext_is_native_atomic_supported)},
      {"cudaDevAttrComputeCapabilityMajor",
       std::make_shared<EnumNameRule>(
           "get_major_version",
           HelperFeatureEnum::Device_device_ext_get_major_version)},
      {"cudaDevAttrComputeCapabilityMinor",
       std::make_shared<EnumNameRule>(
           "get_minor_version",
           HelperFeatureEnum::Device_device_ext_get_minor_version)},
      {"cudaDevAttrMultiProcessorCount",
       std::make_shared<EnumNameRule>(
           "get_max_compute_units",
           HelperFeatureEnum::Device_device_ext_get_max_compute_units)},
      {"cudaDevAttrClockRate",
       std::make_shared<EnumNameRule>(
           "get_max_clock_frequency",
           HelperFeatureEnum::Device_device_ext_get_max_clock_frequency)},
      {"cudaDevAttrIntegrated",
       std::make_shared<EnumNameRule>(
           "get_integrated",
           HelperFeatureEnum::Device_device_ext_get_integrated)},
      {"cudaDevAttrConcurrentManagedAccess",
      std::make_shared<EnumNameRule>(
        "get_info<sycl::info::device::usm_shared_allocations>")},
      // enum Memcpy Kind
      {"cudaMemcpyHostToHost", std::make_shared<EnumNameRule>(
                                   getDpctNamespace() + "host_to_host",
                                   HelperFeatureEnum::Memory_memcpy_direction)},
      {"cudaMemcpyHostToDevice",
       std::make_shared<EnumNameRule>(
           getDpctNamespace() + "host_to_device",
           HelperFeatureEnum::Memory_memcpy_direction)},
      {"cudaMemcpyDeviceToHost",
       std::make_shared<EnumNameRule>(
           getDpctNamespace() + "device_to_host",
           HelperFeatureEnum::Memory_memcpy_direction)},
      {"cudaMemcpyDeviceToDevice",
       std::make_shared<EnumNameRule>(
           getDpctNamespace() + "device_to_device",
           HelperFeatureEnum::Memory_memcpy_direction)},
      {"cudaMemcpyDefault", std::make_shared<EnumNameRule>(
                                getDpctNamespace() + "automatic",
                                HelperFeatureEnum::Memory_memcpy_direction)},
      // enum cudaMemory Type
      {"cudaMemoryTypeHost",
       std::make_shared<EnumNameRule>(
           getClNamespace() + "usm::alloc::host",
           HelperFeatureEnum::Memory_pointer_attributes)},
      {"cudaMemoryTypeDevice",
       std::make_shared<EnumNameRule>(
           getClNamespace() + "usm::alloc::device",
           HelperFeatureEnum::Memory_pointer_attributes)},
      {"cudaMemoryTypeUnregistered",
       std::make_shared<EnumNameRule>(
           getClNamespace() + "usm::alloc::unknown",
           HelperFeatureEnum::Memory_pointer_attributes)},
      {"cudaMemoryTypeManaged",
       std::make_shared<EnumNameRule>(
           getClNamespace() + "usm::alloc::shared",
           HelperFeatureEnum::Memory_pointer_attributes)},
      // enum Texture Address Mode
      {"cudaAddressModeWrap",
       std::make_shared<EnumNameRule>(getClNamespace() +
                                      "addressing_mode::repeat")},
      {"cudaAddressModeClamp",
       std::make_shared<EnumNameRule>(getClNamespace() +
                                      "addressing_mode::clamp_to_edge")},
      {"cudaAddressModeMirror",
       std::make_shared<EnumNameRule>(getClNamespace() +
                                      "addressing_mode::mirrored_repeat")},
      {"cudaAddressModeBorder",
       std::make_shared<EnumNameRule>(getClNamespace() +
                                      "addressing_mode::clamp")},
      // enum Texture Filter Mode
      {"cudaFilterModePoint",
       std::make_shared<EnumNameRule>(getClNamespace() +
                                      "filtering_mode::nearest")},
      {"cudaFilterModeLinear",
       std::make_shared<EnumNameRule>(getClNamespace() +
                                      "filtering_mode::linear")},
      // enum Channel Format Kind
      {"cudaChannelFormatKindSigned",
       std::make_shared<EnumNameRule>(
           getDpctNamespace() + "image_channel_data_type::signed_int",
           HelperFeatureEnum::Image_image_channel_data_type)},
      {"cudaChannelFormatKindUnsigned",
       std::make_shared<EnumNameRule>(
           getDpctNamespace() + "image_channel_data_type::unsigned_int",
           HelperFeatureEnum::Image_image_channel_data_type)},
      {"cudaChannelFormatKindFloat",
       std::make_shared<EnumNameRule>(
           getDpctNamespace() + "image_channel_data_type::fp",
           HelperFeatureEnum::Image_image_channel_data_type)},
      // enum Resource Type
      {"cudaResourceTypeArray",
       std::make_shared<EnumNameRule>(
           getDpctNamespace() + "image_data_type::matrix",
           HelperFeatureEnum::Image_image_data_type)},
      {"cudaResourceTypeLinear",
       std::make_shared<EnumNameRule>(
           getDpctNamespace() + "image_data_type::linear",
           HelperFeatureEnum::Image_image_data_type)},
      {"cudaResourceTypePitch2D",
       std::make_shared<EnumNameRule>(
           getDpctNamespace() + "image_data_type::pitch",
           HelperFeatureEnum::Image_image_data_type)},
      // enum cudaMemoryAdvise
      {"cudaMemAdviseSetReadMostly", std::make_shared<EnumNameRule>("0")},
      {"cudaMemAdviseUnsetReadMostly", std::make_shared<EnumNameRule>("0")},
      {"cudaMemAdviseSetPreferredLocation",
       std::make_shared<EnumNameRule>("0")},
      {"cudaMemAdviseUnsetPreferredLocation",
       std::make_shared<EnumNameRule>("0")},
      {"cudaMemAdviseSetAccessedBy", std::make_shared<EnumNameRule>("0")},
      {"cudaMemAdviseUnsetAccessedBy", std::make_shared<EnumNameRule>("0")},
      // enum CUmem_advise_enum
      {"CU_MEM_ADVISE_SET_READ_MOSTLY", std::make_shared<EnumNameRule>("0")},
      {"CU_MEM_ADVISE_UNSET_READ_MOSTLY", std::make_shared<EnumNameRule>("0")},
      {"CU_MEM_ADVISE_SET_PREFERRED_LOCATION",
       std::make_shared<EnumNameRule>("0")},
      {"CU_MEM_ADVISE_UNSET_PREFERRED_LOCATION",
       std::make_shared<EnumNameRule>("0")},
      {"CU_MEM_ADVISE_SET_ACCESSED_BY", std::make_shared<EnumNameRule>("0")},
      {"CU_MEM_ADVISE_UNSET_ACCESSED_BY", std::make_shared<EnumNameRule>("0")},
      // enum Driver Device Attribute
      {"CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MAJOR",
       std::make_shared<EnumNameRule>(
           "get_major_version",
           HelperFeatureEnum::Device_device_ext_get_major_version)},
      {"CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MINOR",
       std::make_shared<EnumNameRule>(
           "get_minor_version",
           HelperFeatureEnum::Device_device_ext_get_minor_version)},
      {"CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY",
       std::make_shared<EnumNameRule>(
           "has(sycl::aspect::usm_host_allocations)")},
      {"CU_DEVICE_ATTRIBUTE_WARP_SIZE",
       std::make_shared<EnumNameRule>(
           "get_max_sub_group_size",
           HelperFeatureEnum::Device_device_ext_get_max_sub_group_size)},
      {"CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK",
       std::make_shared<EnumNameRule>(
        "get_max_register_size_per_work_group",
        HelperFeatureEnum::Device_device_ext_get_max_register_size_per_work_group)},
      {"CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK",
       std::make_shared<EnumNameRule>(
           "get_max_work_group_size",
           HelperFeatureEnum::Device_device_ext_get_max_work_group_size)},
      {"CU_DEVICE_ATTRIBUTE_TEXTURE_ALIGNMENT",
       std::make_shared<EnumNameRule>(
           "get_mem_base_addr_align",
           HelperFeatureEnum::Device_device_ext_get_mem_base_addr_align)},
      {"CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY",
       std::make_shared<EnumNameRule>(
           "get_global_mem_size",
           HelperFeatureEnum::Device_device_ext_get_global_mem_size)},
      {"CU_DEVICE_ATTRIBUTE_INTEGRATED",
       std::make_shared<EnumNameRule>(
           "get_integrated",
           HelperFeatureEnum::Device_device_ext_get_integrated)},
      {"CU_DEVICE_ATTRIBUTE_CLOCK_RATE",
       std::make_shared<EnumNameRule>(
           "get_max_clock_frequency",
           HelperFeatureEnum::Device_device_ext_get_max_clock_frequency)},
      {"CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT",
       std::make_shared<EnumNameRule>(
           "get_max_compute_units",
           HelperFeatureEnum::Device_device_ext_get_max_compute_units)},
      {"CU_DEVICE_ATTRIBUTE_HOST_NATIVE_ATOMIC_SUPPORTED",
       std::make_shared<EnumNameRule>(
           "is_native_atomic_supported",
           HelperFeatureEnum::Device_device_ext_is_native_atomic_supported)},
      {"CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X",
        std::make_shared<EnumNameRule>(
          "get_max_work_item_sizes",
          HelperFeatureEnum::Device_device_info_get_max_work_item_sizes)},
      {"CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y",
        std::make_shared<EnumNameRule>(
          "get_max_work_item_sizes",
          HelperFeatureEnum::Device_device_info_get_max_work_item_sizes)},
      {"CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z",
        std::make_shared<EnumNameRule>(
          "get_max_work_item_sizes",
          HelperFeatureEnum::Device_device_info_get_max_work_item_sizes)},
      {"CU_CTX_MAP_HOST",
        std::make_shared<EnumNameRule>("0")},
      {"CU_CTX_SCHED_BLOCKING_SYNC",
        std::make_shared<EnumNameRule>("0")},
      {"CU_CTX_SCHED_SPIN",
        std::make_shared<EnumNameRule>("0")},
      {"CU_CTX_SCHED_SPIN",
        std::make_shared<EnumNameRule>("0")},
      {"CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK",
      std::make_shared<EnumNameRule>(
          "get_device_info().get_local_mem_size",
          HelperFeatureEnum::Device_device_ext_get_device_info_return_info)},

      // enum CUlimit
      {"CU_LIMIT_PRINTF_FIFO_SIZE",
       std::make_shared<EnumNameRule>("INT_MAX")},

      // enum CUarray_format
      {"CU_AD_FORMAT_UNSIGNED_INT8",
       std::make_shared<EnumNameRule>(getClNamespace() +
                                      "image_channel_type::unsigned_int8")},
      {"CU_AD_FORMAT_UNSIGNED_INT16",
       std::make_shared<EnumNameRule>(getClNamespace() +
                                      "image_channel_type::unsigned_int16")},
      {"CU_AD_FORMAT_UNSIGNED_INT32",
       std::make_shared<EnumNameRule>(getClNamespace() +
                                      "image_channel_type::unsigned_int32")},
      {"CU_AD_FORMAT_SIGNED_INT8",
       std::make_shared<EnumNameRule>(getClNamespace() +
                                      "image_channel_type::signed_int8")},
      {"CU_AD_FORMAT_SIGNED_INT16",
       std::make_shared<EnumNameRule>(getClNamespace() +
                                      "image_channel_type::unsigned_int16")},
      {"CU_AD_FORMAT_SIGNED_INT32",
       std::make_shared<EnumNameRule>(getClNamespace() +
                                      "image_channel_type::unsigned_int32")},
      {"CU_AD_FORMAT_HALF", std::make_shared<EnumNameRule>(
                                getClNamespace() + "image_channel_type::fp16")},
      {"CU_AD_FORMAT_FLOAT",
       std::make_shared<EnumNameRule>(getClNamespace() +
                                      "image_channel_type::fp32")},
      // enum CUaddress_mode_enum
      {"CU_TR_ADDRESS_MODE_WRAP",
       std::make_shared<EnumNameRule>(getClNamespace() +
                                      "addressing_mode::repeat")},
      {"CU_TR_ADDRESS_MODE_CLAMP",
       std::make_shared<EnumNameRule>(getClNamespace() +
                                      "addressing_mode::clamp_to_edge")},
      {"CU_TR_ADDRESS_MODE_MIRROR",
       std::make_shared<EnumNameRule>(getClNamespace() +
                                      "addressing_mode::mirrored_repeat")},
      {"CU_TR_ADDRESS_MODE_BORDER",
       std::make_shared<EnumNameRule>(getClNamespace() +
                                      "addressing_mode::clamp")},
      // enum CUfilter_mode_enum
      {"CU_TR_FILTER_MODE_POINT",
       std::make_shared<EnumNameRule>(getClNamespace() +
                                      "filtering_mode::nearest")},
      {"CU_TR_FILTER_MODE_LINEAR",
       std::make_shared<EnumNameRule>(getClNamespace() +
                                      "filtering_mode::linear")},
      // enum CUresourcetype_enum
      {"CU_RESOURCE_TYPE_ARRAY",
       std::make_shared<EnumNameRule>(
           getDpctNamespace() + "image_data_type::matrix",
           HelperFeatureEnum::Image_image_data_type)},
      {"CU_RESOURCE_TYPE_LINEAR",
       std::make_shared<EnumNameRule>(
           getDpctNamespace() + "image_data_type::linear",
           HelperFeatureEnum::Image_image_data_type)},
      {"CU_RESOURCE_TYPE_PITCH2D",
       std::make_shared<EnumNameRule>(
           getDpctNamespace() + "image_data_type::pitch",
           HelperFeatureEnum::Image_image_data_type)},
      // enum libraryPropertyType_t
      {"MAJOR_VERSION", std::make_shared<EnumNameRule>(
                            getDpctNamespace() + "version_field::major",
                            HelperFeatureEnum::LibCommonUtils_version_field)},
      {"MINOR_VERSION", std::make_shared<EnumNameRule>(
                            getDpctNamespace() + "version_field::update",
                            HelperFeatureEnum::LibCommonUtils_version_field)},
      {"PATCH_LEVEL", std::make_shared<EnumNameRule>(
                          getDpctNamespace() + "version_field::patch",
                          HelperFeatureEnum::LibCommonUtils_version_field)},
      // enum cudaDataType_t
      {"CUDA_R_16F", std::make_shared<EnumNameRule>(
                         getDpctNamespace() + "library_data_t::real_half")},
      {"CUDA_C_16F", std::make_shared<EnumNameRule>(
                         getDpctNamespace() + "library_data_t::complex_half")},
      {"CUDA_R_16BF",
       std::make_shared<EnumNameRule>(getDpctNamespace() +
                                      "library_data_t::real_bfloat16")},
      {"CUDA_C_16BF",
       std::make_shared<EnumNameRule>(getDpctNamespace() +
                                      "library_data_t::complex_bfloat16")},
      {"CUDA_R_32F", std::make_shared<EnumNameRule>(
                         getDpctNamespace() + "library_data_t::real_float")},
      {"CUDA_C_32F", std::make_shared<EnumNameRule>(
                         getDpctNamespace() + "library_data_t::complex_float")},
      {"CUDA_R_64F", std::make_shared<EnumNameRule>(
                         getDpctNamespace() + "library_data_t::real_double")},
      {"CUDA_C_64F",
       std::make_shared<EnumNameRule>(getDpctNamespace() +
                                      "library_data_t::complex_double")},
      {"CUDA_R_4I", std::make_shared<EnumNameRule>(
                        getDpctNamespace() + "library_data_t::real_int4")},
      {"CUDA_C_4I", std::make_shared<EnumNameRule>(
                        getDpctNamespace() + "library_data_t::complex_int4")},
      {"CUDA_R_4U", std::make_shared<EnumNameRule>(
                        getDpctNamespace() + "library_data_t::real_uint4")},
      {"CUDA_C_4U", std::make_shared<EnumNameRule>(
                        getDpctNamespace() + "library_data_t::complex_uint4")},
      {"CUDA_R_8I", std::make_shared<EnumNameRule>(
                        getDpctNamespace() + "library_data_t::real_int8")},
      {"CUDA_C_8I", std::make_shared<EnumNameRule>(
                        getDpctNamespace() + "library_data_t::complex_int8")},
      {"CUDA_R_8U", std::make_shared<EnumNameRule>(
                        getDpctNamespace() + "library_data_t::real_uint8")},
      {"CUDA_C_8U", std::make_shared<EnumNameRule>(
                        getDpctNamespace() + "library_data_t::complex_uint8")},
      {"CUDA_R_16I", std::make_shared<EnumNameRule>(
                         getDpctNamespace() + "library_data_t::real_int16")},
      {"CUDA_C_16I", std::make_shared<EnumNameRule>(
                         getDpctNamespace() + "library_data_t::complex_int16")},
      {"CUDA_R_16U", std::make_shared<EnumNameRule>(
                         getDpctNamespace() + "library_data_t::real_uint16")},
      {"CUDA_C_16U",
       std::make_shared<EnumNameRule>(getDpctNamespace() +
                                      "library_data_t::complex_uint16")},
      {"CUDA_R_32I", std::make_shared<EnumNameRule>(
                         getDpctNamespace() + "library_data_t::real_int32")},
      {"CUDA_C_32I", std::make_shared<EnumNameRule>(
                         getDpctNamespace() + "library_data_t::complex_int32")},
      {"CUDA_R_32U", std::make_shared<EnumNameRule>(
                         getDpctNamespace() + "library_data_t::real_uint32")},
      {"CUDA_C_32U",
       std::make_shared<EnumNameRule>(getDpctNamespace() +
                                      "library_data_t::complex_uint32")},
      {"CUDA_R_64I", std::make_shared<EnumNameRule>(
                         getDpctNamespace() + "library_data_t::real_int64")},
      {"CUDA_C_64I", std::make_shared<EnumNameRule>(
                         getDpctNamespace() + "library_data_t::complex_int64")},
      {"CUDA_R_64U", std::make_shared<EnumNameRule>(
                         getDpctNamespace() + "library_data_t::real_uint64")},
      {"CUDA_C_64U",
       std::make_shared<EnumNameRule>(getDpctNamespace() +
                                      "library_data_t::complex_uint64")},
      // cublasComputeType_t
      {"CUBLAS_COMPUTE_16F",
       std::make_shared<EnumNameRule>(getDpctNamespace() +
                                      "library_data_t::real_half")},
      {"CUBLAS_COMPUTE_16F_PEDANTIC",
       std::make_shared<EnumNameRule>(getDpctNamespace() +
                                      "library_data_t::real_half")},
      {"CUBLAS_COMPUTE_32F",
       std::make_shared<EnumNameRule>(getDpctNamespace() +
                                      "library_data_t::real_float")},
      {"CUBLAS_COMPUTE_32F_PEDANTIC",
       std::make_shared<EnumNameRule>(getDpctNamespace() +
                                      "library_data_t::real_float")},
      {"CUBLAS_COMPUTE_32F_FAST_16F",
       std::make_shared<EnumNameRule>(getDpctNamespace() +
                                      "library_data_t::real_float")},
      {"CUBLAS_COMPUTE_32F_FAST_16BF",
       std::make_shared<EnumNameRule>(getDpctNamespace() +
                                      "library_data_t::real_float")},
      {"CUBLAS_COMPUTE_32F_FAST_TF32",
       std::make_shared<EnumNameRule>(getDpctNamespace() +
                                      "library_data_t::real_float")},
      {"CUBLAS_COMPUTE_64F",
       std::make_shared<EnumNameRule>(getDpctNamespace() +
                                      "library_data_t::real_double")},
      {"CUBLAS_COMPUTE_64F_PEDANTIC",
       std::make_shared<EnumNameRule>(getDpctNamespace() +
                                      "library_data_t::real_double")},
      {"CUBLAS_COMPUTE_32I",
       std::make_shared<EnumNameRule>(getDpctNamespace() +
                                      "library_data_t::real_int32")},
      {"CUBLAS_COMPUTE_32I_PEDANTIC",
       std::make_shared<EnumNameRule>(getDpctNamespace() +
                                      "library_data_t::real_int32")},
      {"cuda::thread_scope_system",
       std::make_shared<EnumNameRule>(getClNamespace() + "memory_scope::system")},
      {"cuda::thread_scope_device",
       std::make_shared<EnumNameRule>(getClNamespace() + "memory_scope::device")},
      {"cuda::thread_scope_block",
       std::make_shared<EnumNameRule>(getClNamespace() + "memory_scope::work_group")},
      {"cuda::memory_order_relaxed",
       std::make_shared<EnumNameRule>(getClNamespace() + "memory_order::relaxed")},
      {"cuda::memory_order_acq_rel",
       std::make_shared<EnumNameRule>(getClNamespace() + "memory_order::acq_rel")},
      {"cuda::memory_order_release",
       std::make_shared<EnumNameRule>(getClNamespace() + "memory_order::release")},
      {"cuda:::memory_order_acquire",
       std::make_shared<EnumNameRule>(getClNamespace() + "memory_order::acquire")},
      {"cuda::memory_order_seq_cst",
       std::make_shared<EnumNameRule>(getClNamespace() + "memory_order::seq_cst")},
      {"CUFFT_R2C",
       std::make_shared<EnumNameRule>(
           getDpctNamespace() + "fft::fft_type::real_float_to_complex_float",
           HelperFeatureEnum::FftUtils_fft_type)},
      {"CUFFT_C2R",
       std::make_shared<EnumNameRule>(
           getDpctNamespace() + "fft::fft_type::complex_float_to_real_float",
           HelperFeatureEnum::FftUtils_fft_type)},
      {"CUFFT_D2Z",
       std::make_shared<EnumNameRule>(
           getDpctNamespace() + "fft::fft_type::real_double_to_complex_double",
           HelperFeatureEnum::FftUtils_fft_type)},
      {"CUFFT_Z2D",
       std::make_shared<EnumNameRule>(
           getDpctNamespace() + "fft::fft_type::complex_double_to_real_double",
           HelperFeatureEnum::FftUtils_fft_type)},
      {"CUFFT_C2C",
       std::make_shared<EnumNameRule>(
           getDpctNamespace() + "fft::fft_type::complex_float_to_complex_float",
           HelperFeatureEnum::FftUtils_fft_type)},
      {"CUFFT_Z2Z", std::make_shared<EnumNameRule>(
                        getDpctNamespace() +
                            "fft::fft_type::complex_double_to_complex_double",
                        HelperFeatureEnum::FftUtils_fft_type)},
      {"ncclSum", std::make_shared<EnumNameRule>("oneapi::ccl::reduction::sum")},
      {"ncclProd", std::make_shared<EnumNameRule>("oneapi::ccl::reduction::prod")},
      {"ncclMin", std::make_shared<EnumNameRule>("oneapi::ccl::reduction::min")},
      {"ncclMax", std::make_shared<EnumNameRule>("oneapi::ccl::reduction::max")},
      {"ncclInt8", std::make_shared<EnumNameRule>("oneapi::ccl::datatype::int8")},
      {"ncclChar", std::make_shared<EnumNameRule>("oneapi::ccl::datatype::int8")},
      {"ncclUint8", std::make_shared<EnumNameRule>("oneapi::ccl::datatype::uint8")},
      {"ncclInt32", std::make_shared<EnumNameRule>("oneapi::ccl::datatype::int32")},
      {"ncclInt", std::make_shared<EnumNameRule>("oneapi::ccl::datatype::int32")},
      {"ncclUint32", std::make_shared<EnumNameRule>("oneapi::ccl::datatype::uint32")},
      {"ncclInt64", std::make_shared<EnumNameRule>("oneapi::ccl::datatype::int64")},
      {"ncclUint64", std::make_shared<EnumNameRule>("oneapi::ccl::datatype::uint64")},
      {"ncclFloat16", std::make_shared<EnumNameRule>("oneapi::ccl::datatype::float16")},
      {"ncclHalf", std::make_shared<EnumNameRule>("oneapi::ccl::datatype::float16")},
      {"ncclFloat32", std::make_shared<EnumNameRule>("oneapi::ccl::datatype::float32")},
      {"ncclFloat", std::make_shared<EnumNameRule>("oneapi::ccl::datatype::float32")},
      {"ncclFloat64", std::make_shared<EnumNameRule>("oneapi::ccl::datatype::float64")},
      {"ncclDouble", std::make_shared<EnumNameRule>("oneapi::ccl::datatype::float64")},
      {"ncclBfloat16", std::make_shared<EnumNameRule>("oneapi::ccl::datatype::bfloat16")},
      // ...
  };

  ClassFieldMap = {};

  // Thrust function name mapping
  ThrustFuncNamesMap = {
#define ENTRY(from, to, policy) {from, {to, policy}},
#define ENTRY_HOST(from, to, policy) ENTRY(from, to, policy)
#define ENTRY_DEVICE(from, to, policy) ENTRY(from, to, policy)
#define ENTRY_BOTH(from, to, policy) ENTRY(from, to, policy)
#include "APINamesMapThrust.inc"
#undef ENTRY
#undef ENTRY_HOST
#undef ENTRY_DEVICE
#undef ENTRY_BOTH
  };

  ThrustFuncNamesHelperFeaturesMap = {
      {"thrust::sequence", HelperFeatureEnum::DplExtrasAlgorithm_iota},
      {"thrust::stable_sort_by_key",
       HelperFeatureEnum::DplExtrasAlgorithm_stable_sort},
      {"thrust::transform_if",
       HelperFeatureEnum::DplExtrasAlgorithm_transform_if},
      {"thrust::device_free", HelperFeatureEnum::DplExtrasMemory_free_device},
      {"thrust::device_malloc",
       HelperFeatureEnum::DplExtrasMemory_malloc_device},
      {"thrust::raw_pointer_cast",
       HelperFeatureEnum::DplExtrasMemory_get_raw_pointer},
      {"thrust::make_counting_iterator",
       HelperFeatureEnum::DplExtrasIterators_make_counting_iterator},
      {"thrust::device_pointer_cast",
       HelperFeatureEnum::DplExtrasMemory_get_device_pointer},
      {"thrust::make_constant_iterator",
       HelperFeatureEnum::DplExtrasIterators_make_constant_iterator},
      {"thrust::partition_point",
       HelperFeatureEnum::DplExtrasAlgorithm_partition_point}};

  ITFName = {
#define ENTRY(INTERFACENAME, APINAME, VALUE, FLAG, TARGET, COMMENT)            \
  {#APINAME, #INTERFACENAME},
#define ENTRY_MEMBER_FUNCTION(OBJNAME, INTERFACENAME, APINAME, VALUE, FLAG,    \
                              TARGET, COMMENT)                                 \
  {#OBJNAME "." #APINAME, #OBJNAME "." #INTERFACENAME},
#include "APINames.inc"
#include "APINames_CUB.inc"
#include "APINames_NCCL.inc"
#include "APINames_cuBLAS.inc"
#include "APINames_cuFFT.inc"
#include "APINames_cuGRAPH.inc"
#include "APINames_cuRAND.inc"
#include "APINames_cuSOLVER.inc"
#include "APINames_cuSPARSE.inc"
#include "APINames_nvJPEG.inc"
#include "APINames_thrust.inc"
#undef ENTRY_MEMBER_FUNCTION
#undef ENTRY
  };

  // BLAS functions names and parameters replacements information mapping
  BLASFuncReplInfoMap = {
      /*BLAS level 1*/
      {"cublasIsamax_v2",
       {std::vector<int>{2, 4}, std::vector<int>{},
        std::vector<std::string>{"float", "int"}, std::vector<int>{}, -1, -1,
        -1, "oneapi::mkl::blas::column_major::iamax"}},
      {"cublasIdamax_v2",
       {std::vector<int>{2, 4}, std::vector<int>{},
        std::vector<std::string>{"double", "int"}, std::vector<int>{}, -1, -1,
        -1, "oneapi::mkl::blas::column_major::iamax"}},
      {"cublasIsamin_v2",
       {std::vector<int>{2, 4}, std::vector<int>{},
        std::vector<std::string>{"float", "int"}, std::vector<int>{}, -1, -1,
        -1, "oneapi::mkl::blas::column_major::iamin"}},
      {"cublasIdamin_v2",
       {std::vector<int>{2, 4}, std::vector<int>{},
        std::vector<std::string>{"double", "int"}, std::vector<int>{}, -1, -1,
        -1, "oneapi::mkl::blas::column_major::iamin"}},
      {"cublasSasum_v2",
       {std::vector<int>{2, 4}, std::vector<int>{},
        std::vector<std::string>{"float", "float"}, std::vector<int>{}, -1, -1,
        -1, "oneapi::mkl::blas::column_major::asum"}},
      {"cublasDasum_v2",
       {std::vector<int>{2, 4}, std::vector<int>{},
        std::vector<std::string>{"double", "double"}, std::vector<int>{}, -1,
        -1, -1, "oneapi::mkl::blas::column_major::asum"}},
      {"cublasSaxpy_v2",
       {std::vector<int>{3, 5}, std::vector<int>{2},
        std::vector<std::string>{"float", "float"}, std::vector<int>{}, -1, -1,
        -1, "oneapi::mkl::blas::column_major::axpy"}},
      {"cublasDaxpy_v2",
       {std::vector<int>{3, 5}, std::vector<int>{2},
        std::vector<std::string>{"double", "double"}, std::vector<int>{}, -1,
        -1, -1, "oneapi::mkl::blas::column_major::axpy"}},
      {"cublasScopy_v2",
       {std::vector<int>{2, 4}, std::vector<int>{},
        std::vector<std::string>{"float", "float"}, std::vector<int>{}, -1, -1,
        -1, "oneapi::mkl::blas::column_major::copy"}},
      {"cublasDcopy_v2",
       {std::vector<int>{2, 4}, std::vector<int>{},
        std::vector<std::string>{"double", "double"}, std::vector<int>{}, -1,
        -1, -1, "oneapi::mkl::blas::column_major::copy"}},
      {"cublasSdot_v2",
       {std::vector<int>{2, 4, 6}, std::vector<int>{},
        std::vector<std::string>{"float", "float", "float"}, std::vector<int>{},
        -1, -1, -1, "oneapi::mkl::blas::column_major::dot"}},
      {"cublasDdot_v2",
       {std::vector<int>{2, 4, 6}, std::vector<int>{},
        std::vector<std::string>{"double", "double", "double"},
        std::vector<int>{}, -1, -1, -1,
        "oneapi::mkl::blas::column_major::dot"}},
      {"cublasSnrm2_v2",
       {std::vector<int>{2, 4}, std::vector<int>{},
        std::vector<std::string>{"float", "float"}, std::vector<int>{}, -1, -1,
        -1, "oneapi::mkl::blas::column_major::nrm2"}},
      {"cublasDnrm2_v2",
       {std::vector<int>{2, 4}, std::vector<int>{},
        std::vector<std::string>{"double", "double"}, std::vector<int>{}, -1,
        -1, -1, "oneapi::mkl::blas::column_major::nrm2"}},
      {"cublasSrot_v2",
       {std::vector<int>{2, 4}, std::vector<int>{6, 7},
        std::vector<std::string>{"float", "float"}, std::vector<int>{}, -1, -1,
        -1, "oneapi::mkl::blas::column_major::rot"}},
      {"cublasDrot_v2",
       {std::vector<int>{2, 4}, std::vector<int>{6, 7},
        std::vector<std::string>{"double", "double"}, std::vector<int>{}, -1,
        -1, -1, "oneapi::mkl::blas::column_major::rot"}},
      {"cublasSrotg_v2",
       {std::vector<int>{1, 2, 3, 4}, std::vector<int>{},
        std::vector<std::string>{"float", "float", "float", "float"},
        std::vector<int>{}, -1, -1, -1,
        "oneapi::mkl::blas::column_major::rotg"}},
      {"cublasDrotg_v2",
       {std::vector<int>{1, 2, 3, 4}, std::vector<int>{},
        std::vector<std::string>{"double", "double", "double", "double"},
        std::vector<int>{}, -1, -1, -1,
        "oneapi::mkl::blas::column_major::rotg"}},
      {"cublasSrotm_v2",
       {std::vector<int>{2, 4, 6}, std::vector<int>{},
        std::vector<std::string>{"float", "float", "float"}, std::vector<int>{},
        -1, -1, -1, "oneapi::mkl::blas::column_major::rotm"}},
      {"cublasDrotm_v2",
       {std::vector<int>{2, 4, 6}, std::vector<int>{},
        std::vector<std::string>{"double", "double", "double"},
        std::vector<int>{}, -1, -1, -1,
        "oneapi::mkl::blas::column_major::rotm"}},
      {"cublasSrotmg_v2",
       {std::vector<int>{1, 2, 3, 5}, std::vector<int>{4},
        std::vector<std::string>{"float", "float", "float", "float"},
        std::vector<int>{}, -1, -1, -1,
        "oneapi::mkl::blas::column_major::rotmg"}},
      {"cublasDrotmg_v2",
       {std::vector<int>{1, 2, 3, 5}, std::vector<int>{4},
        std::vector<std::string>{"double", "double", "double", "double"},
        std::vector<int>{}, -1, -1, -1,
        "oneapi::mkl::blas::column_major::rotmg"}},
      {"cublasSscal_v2",
       {std::vector<int>{3}, std::vector<int>{2},
        std::vector<std::string>{"float"}, std::vector<int>{}, -1, -1, -1,
        "oneapi::mkl::blas::column_major::scal"}},
      {"cublasDscal_v2",
       {std::vector<int>{3}, std::vector<int>{2},
        std::vector<std::string>{"double"}, std::vector<int>{}, -1, -1, -1,
        "oneapi::mkl::blas::column_major::scal"}},
      {"cublasSswap_v2",
       {std::vector<int>{2, 4}, std::vector<int>{},
        std::vector<std::string>{"float", "float"}, std::vector<int>{}, -1, -1,
        -1, "oneapi::mkl::blas::column_major::swap"}},
      {"cublasDswap_v2",
       {std::vector<int>{2, 4}, std::vector<int>{},
        std::vector<std::string>{"double", "double"}, std::vector<int>{}, -1,
        -1, -1, "oneapi::mkl::blas::column_major::swap"}},
      /*BLAS level 2*/
      {"cublasSgbmv_v2",
       {std::vector<int>{7, 9, 12}, std::vector<int>{6, 11},
        std::vector<std::string>{"float", "float", "float"},
        std::vector<int>{1}, -1, -1, -1,
        "oneapi::mkl::blas::column_major::gbmv"}},
      {"cublasDgbmv_v2",
       {std::vector<int>{7, 9, 12}, std::vector<int>{6, 11},
        std::vector<std::string>{"double", "double", "double"},
        std::vector<int>{1}, -1, -1, -1,
        "oneapi::mkl::blas::column_major::gbmv"}},
      {"cublasSgemv_v2",
       {std::vector<int>{5, 7, 10}, std::vector<int>{4, 9},
        std::vector<std::string>{"float", "float", "float"},
        std::vector<int>{1}, -1, -1, -1,
        "oneapi::mkl::blas::column_major::gemv"}},
      {"cublasDgemv_v2",
       {std::vector<int>{5, 7, 10}, std::vector<int>{4, 9},
        std::vector<std::string>{"double", "double", "double"},
        std::vector<int>{1}, -1, -1, -1,
        "oneapi::mkl::blas::column_major::gemv"}},
      {"cublasSger_v2",
       {std::vector<int>{4, 6, 8}, std::vector<int>{3},
        std::vector<std::string>{"float", "float", "float"}, std::vector<int>{},
        -1, -1, -1, "oneapi::mkl::blas::column_major::ger"}},
      {"cublasDger_v2",
       {std::vector<int>{4, 6, 8}, std::vector<int>{3},
        std::vector<std::string>{"double", "double", "double"},
        std::vector<int>{}, -1, -1, -1,
        "oneapi::mkl::blas::column_major::ger"}},
      {"cublasSsbmv_v2",
       {std::vector<int>{5, 7, 10}, std::vector<int>{4, 9},
        std::vector<std::string>{"float", "float", "float"}, std::vector<int>{},
        1, -1, -1, "oneapi::mkl::blas::column_major::sbmv"}},
      {"cublasDsbmv_v2",
       {std::vector<int>{5, 7, 10}, std::vector<int>{4, 9},
        std::vector<std::string>{"double", "double", "double"},
        std::vector<int>{}, 1, -1, -1,
        "oneapi::mkl::blas::column_major::sbmv"}},
      {"cublasSspmv_v2",
       {std::vector<int>{4, 5, 8}, std::vector<int>{3, 7},
        std::vector<std::string>{"float", "float", "float"}, std::vector<int>{},
        1, -1, -1, "oneapi::mkl::blas::column_major::spmv"}},
      {"cublasDspmv_v2",
       {std::vector<int>{4, 5, 8}, std::vector<int>{3, 7},
        std::vector<std::string>{"double", "double", "double"},
        std::vector<int>{}, 1, -1, -1,
        "oneapi::mkl::blas::column_major::spmv"}},
      {"cublasSspr_v2",
       {std::vector<int>{4, 6}, std::vector<int>{3},
        std::vector<std::string>{"float", "float"}, std::vector<int>{}, 1, -1,
        -1, "oneapi::mkl::blas::column_major::spr"}},
      {"cublasDspr_v2",
       {std::vector<int>{4, 6}, std::vector<int>{3},
        std::vector<std::string>{"double", "double"}, std::vector<int>{}, 1, -1,
        -1, "oneapi::mkl::blas::column_major::spr"}},
      {"cublasSspr2_v2",
       {std::vector<int>{4, 6, 8}, std::vector<int>{3},
        std::vector<std::string>{"float", "float", "float"}, std::vector<int>{},
        1, -1, -1, "oneapi::mkl::blas::column_major::spr2"}},
      {"cublasDspr2_v2",
       {std::vector<int>{4, 6, 8}, std::vector<int>{3},
        std::vector<std::string>{"double", "double", "double"},
        std::vector<int>{}, 1, -1, -1,
        "oneapi::mkl::blas::column_major::spr2"}},
      {"cublasSsymv_v2",
       {std::vector<int>{4, 6, 9}, std::vector<int>{3, 8},
        std::vector<std::string>{"float", "float", "float"}, std::vector<int>{},
        1, -1, -1, "oneapi::mkl::blas::column_major::symv"}},
      {"cublasDsymv_v2",
       {std::vector<int>{4, 6, 9}, std::vector<int>{3, 8},
        std::vector<std::string>{"double", "double", "double"},
        std::vector<int>{}, 1, -1, -1,
        "oneapi::mkl::blas::column_major::symv"}},
      {"cublasSsyr_v2",
       {std::vector<int>{4, 6}, std::vector<int>{3},
        std::vector<std::string>{"float", "float"}, std::vector<int>{}, 1, -1,
        -1, "oneapi::mkl::blas::column_major::syr"}},
      {"cublasDsyr_v2",
       {std::vector<int>{4, 6}, std::vector<int>{3},
        std::vector<std::string>{"double", "double"}, std::vector<int>{}, 1, -1,
        -1, "oneapi::mkl::blas::column_major::syr"}},
      {"cublasSsyr2_v2",
       {std::vector<int>{4, 6, 8}, std::vector<int>{3},
        std::vector<std::string>{"float", "float", "float"}, std::vector<int>{},
        1, -1, -1, "oneapi::mkl::blas::column_major::syr2"}},
      {"cublasDsyr2_v2",
       {std::vector<int>{4, 6, 8}, std::vector<int>{3},
        std::vector<std::string>{"double", "double", "double"},
        std::vector<int>{}, 1, -1, -1,
        "oneapi::mkl::blas::column_major::syr2"}},
      {"cublasStbmv_v2",
       {std::vector<int>{6, 8}, std::vector<int>{},
        std::vector<std::string>{"float", "float"}, std::vector<int>{2}, 1, -1,
        3, "oneapi::mkl::blas::column_major::tbmv"}},
      {"cublasDtbmv_v2",
       {std::vector<int>{6, 8}, std::vector<int>{},
        std::vector<std::string>{"double", "double"}, std::vector<int>{2}, 1,
        -1, 3, "oneapi::mkl::blas::column_major::tbmv"}},
      {"cublasStbsv_v2",
       {std::vector<int>{6, 8}, std::vector<int>{},
        std::vector<std::string>{"float", "float"}, std::vector<int>{2}, 1, -1,
        3, "oneapi::mkl::blas::column_major::tbsv"}},
      {"cublasDtbsv_v2",
       {std::vector<int>{6, 8}, std::vector<int>{},
        std::vector<std::string>{"double", "double"}, std::vector<int>{2}, 1,
        -1, 3, "oneapi::mkl::blas::column_major::tbsv"}},
      {"cublasStpmv_v2",
       {std::vector<int>{5, 6}, std::vector<int>{},
        std::vector<std::string>{"float", "float"}, std::vector<int>{2}, 1, -1,
        3, "oneapi::mkl::blas::column_major::tpmv"}},
      {"cublasDtpmv_v2",
       {std::vector<int>{5, 6}, std::vector<int>{},
        std::vector<std::string>{"double", "double"}, std::vector<int>{2}, 1,
        -1, 3, "oneapi::mkl::blas::column_major::tpmv"}},
      {"cublasStpsv_v2",
       {std::vector<int>{5, 6}, std::vector<int>{},
        std::vector<std::string>{"float", "float"}, std::vector<int>{2}, 1, -1,
        3, "oneapi::mkl::blas::column_major::tpsv"}},
      {"cublasDtpsv_v2",
       {std::vector<int>{5, 6}, std::vector<int>{},
        std::vector<std::string>{"double", "double"}, std::vector<int>{2}, 1,
        -1, 3, "oneapi::mkl::blas::column_major::tpsv"}},
      {"cublasStrmv_v2",
       {std::vector<int>{5, 7}, std::vector<int>{},
        std::vector<std::string>{"float", "float"}, std::vector<int>{2}, 1, -1,
        3, "oneapi::mkl::blas::column_major::trmv"}},
      {"cublasDtrmv_v2",
       {std::vector<int>{5, 7}, std::vector<int>{},
        std::vector<std::string>{"double", "double"}, std::vector<int>{2}, 1,
        -1, 3, "oneapi::mkl::blas::column_major::trmv"}},
      {"cublasStrsv_v2",
       {std::vector<int>{5, 7}, std::vector<int>{},
        std::vector<std::string>{"float", "float"}, std::vector<int>{2}, 1, -1,
        3, "oneapi::mkl::blas::column_major::trsv"}},
      {"cublasDtrsv_v2",
       {std::vector<int>{5, 7}, std::vector<int>{},
        std::vector<std::string>{"double", "double"}, std::vector<int>{2}, 1,
        -1, 3, "oneapi::mkl::blas::column_major::trsv"}},
      /*BLAS level 3*/
      {"cublasHgemm",
       {std::vector<int>{7, 9, 12}, std::vector<int>{6, 11},
        std::vector<std::string>{getClNamespace() + "half",
                                 getClNamespace() + "half",
                                 getClNamespace() + "half"},
        std::vector<int>{1, 2}, -1, -1, -1,
        "oneapi::mkl::blas::column_major::gemm"}},
      {"cublasSgemm_v2",
       {std::vector<int>{7, 9, 12}, std::vector<int>{6, 11},
        std::vector<std::string>{"float", "float", "float"},
        std::vector<int>{1, 2}, -1, -1, -1,
        "oneapi::mkl::blas::column_major::gemm"}},
      {"cublasDgemm_v2",
       {std::vector<int>{7, 9, 12}, std::vector<int>{6, 11},
        std::vector<std::string>{"double", "double", "double"},
        std::vector<int>{1, 2}, -1, -1, -1,
        "oneapi::mkl::blas::column_major::gemm"}},
      {"cublasHgemmStridedBatched",
       {std::vector<int>{7, 10, 14}, std::vector<int>{6, 13},
        std::vector<std::string>{getClNamespace() + "half",
                                 getClNamespace() + "half",
                                 getClNamespace() + "half"},
        std::vector<int>{1, 2}, -1, -1, -1,
        "oneapi::mkl::blas::column_major::gemm_batch"}},
      {"cublasSgemmStridedBatched",
       {std::vector<int>{7, 10, 14}, std::vector<int>{6, 13},
        std::vector<std::string>{"float", "float", "float"},
        std::vector<int>{1, 2}, -1, -1, -1,
        "oneapi::mkl::blas::column_major::gemm_batch"}},
      {"cublasDgemmStridedBatched",
       {std::vector<int>{7, 10, 14}, std::vector<int>{6, 13},
        std::vector<std::string>{"double", "double", "double"},
        std::vector<int>{1, 2}, -1, -1, -1,
        "oneapi::mkl::blas::column_major::gemm_batch"}},
      {"cublasSsymm_v2",
       {std::vector<int>{6, 8, 11}, std::vector<int>{5, 10},
        std::vector<std::string>{"float", "float", "float"}, std::vector<int>{},
        2, 1, -1, "oneapi::mkl::blas::column_major::symm"}},
      {"cublasDsymm_v2",
       {std::vector<int>{6, 8, 11}, std::vector<int>{5, 10},
        std::vector<std::string>{"double", "double", "double"},
        std::vector<int>{}, 2, 1, -1, "oneapi::mkl::blas::column_major::symm"}},
      {"cublasSsyrk_v2",
       {std::vector<int>{6, 9}, std::vector<int>{5, 8},
        std::vector<std::string>{"float", "float"}, std::vector<int>{2}, 1, -1,
        -1, "oneapi::mkl::blas::column_major::syrk"}},
      {"cublasDsyrk_v2",
       {std::vector<int>{6, 9}, std::vector<int>{5, 8},
        std::vector<std::string>{"double", "double"}, std::vector<int>{2}, 1,
        -1, -1, "oneapi::mkl::blas::column_major::syrk"}},
      {"cublasSsyr2k_v2",
       {std::vector<int>{6, 8, 11}, std::vector<int>{5, 10},
        std::vector<std::string>{"float", "float", "float"},
        std::vector<int>{2}, 1, -1, -1,
        "oneapi::mkl::blas::column_major::syr2k"}},
      {"cublasDsyr2k_v2",
       {std::vector<int>{6, 8, 11}, std::vector<int>{5, 10},
        std::vector<std::string>{"double", "double", "double"},
        std::vector<int>{2}, 1, -1, -1,
        "oneapi::mkl::blas::column_major::syr2k"}},
      {"cublasStrsm_v2",
       {std::vector<int>{8, 10}, std::vector<int>{7},
        std::vector<std::string>{"float", "float"}, std::vector<int>{3}, 2, 1,
        4, "oneapi::mkl::blas::column_major::trsm"}},
      {"cublasDtrsm_v2",
       {std::vector<int>{8, 10}, std::vector<int>{7},
        std::vector<std::string>{"double", "double"}, std::vector<int>{3}, 2, 1,
        4, "oneapi::mkl::blas::column_major::trsm"}},
      {"cublasSgeam",
         {std::vector<int>{6, 9, 11}, std::vector<int>{5, 8},
          std::vector<std::string>{"float", "float", "float"},
          std::vector<int>{1, 2}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::omatadd"}},
      {"cublasDgeam",
         {std::vector<int>{6, 9, 11}, std::vector<int>{5, 8},
          std::vector<std::string>{"double", "double", "double"},
          std::vector<int>{1, 2}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::omatadd"}}
  };

  BLASTGemmExTypeInfoMap = {
      {"2:2",
       {"float", getClNamespace() + "half", getClNamespace() + "half",
        getClNamespace() + "half", getClNamespace() + "half",
        getClNamespace() + "half"}},
      {"2:0",
       {"float", "float", getClNamespace() + "half", getClNamespace() + "half",
        "float", "float"}},
      {"0:0", {"float", "float", "float", "float", "float", "float"}},
      {"4:4",
       {"std::complex<float>", "std::complex<float>",
        getClNamespace() + "float2", "std::complex<float>",
        getClNamespace() + "float2", "std::complex<float>"}}};
  // Atomic function names mapping
  AtomicFuncNamesMap = {
      {"atomicAdd", getDpctNamespace() + "atomic_fetch_add"},
      {"atomicSub", getDpctNamespace() + "atomic_fetch_sub"},
      {"atomicAnd", getDpctNamespace() + "atomic_fetch_and"},
      {"atomicOr", getDpctNamespace() + "atomic_fetch_or"},
      {"atomicXor", getDpctNamespace() + "atomic_fetch_xor"},
      {"atomicMin", getDpctNamespace() + "atomic_fetch_min"},
      {"atomicMax", getDpctNamespace() + "atomic_fetch_max"},
      {"atomicExch", getDpctNamespace() + "atomic_exchange"},
      {"atomicCAS", getDpctNamespace() + "atomic_compare_exchange_strong"},
      {"atomicInc", getDpctNamespace() + "atomic_fetch_compare_inc"},
  };

  BLASComputingAPIWithRewriter = {
      {"cublasNrm2Ex", getDpctNamespace() + "nrm2_ex"},
      {"cublasDotEx", getDpctNamespace() + "dot_ex"},
      {"cublasDotcEx", getDpctNamespace() + "dotc_ex"},
      {"cublasScalEx", getDpctNamespace() + "scal_ex"},
      {"cublasAxpyEx", getDpctNamespace() + "axpy_ex"},
      {"cublasRotEx", getDpctNamespace() + "rot_ex"},
      {"cublasGemmEx", getDpctNamespace() + "gemm_ex"},
      {"cublasGemmBatchedEx", getDpctNamespace() + "gemm_batched_ex"},
      {"cublasGemmStridedBatchedEx",
       getDpctNamespace() + "gemm_strided_batched_ex"},
      {"cublasSsyrkx", getDpctNamespace() + "syrkx"},
      {"cublasDsyrkx", getDpctNamespace() + "syrkx"},
      {"cublasCsyrkx", getDpctNamespace() + "syrkx"},
      {"cublasZsyrkx", getDpctNamespace() + "syrkx"},
      {"cublasCherkx", getDpctNamespace() + "hrkx"},
      {"cublasZherkx", getDpctNamespace() + "hrkx"},
      {"cublasHgemmBatched", getDpctNamespace() + "gemm_batch"},
      {"cublasSgemmBatched", getDpctNamespace() + "gemm_batch"},
      {"cublasDgemmBatched", getDpctNamespace() + "gemm_batch"},
      {"cublasCgemmBatched", getDpctNamespace() + "gemm_batch"},
      {"cublasZgemmBatched", getDpctNamespace() + "gemm_batch"},
      {"cublasStrsmBatched", getDpctNamespace() + "trsm_batch"},
      {"cublasDtrsmBatched", getDpctNamespace() + "trsm_batch"},
      {"cublasCtrsmBatched", getDpctNamespace() + "trsm_batch"},
      {"cublasZtrsmBatched", getDpctNamespace() + "trsm_batch"},
      {"cublasStrmm_v2", getDpctNamespace() + "trmm"},
      {"cublasDtrmm_v2", getDpctNamespace() + "trmm"},
      {"cublasCtrmm_v2", getDpctNamespace() + "trmm"},
      {"cublasZtrmm_v2", getDpctNamespace() + "trmm"},
      {"cublasSgetrfBatched", getDpctNamespace() + "getrf_batch_wrapper"},
      {"cublasDgetrfBatched", getDpctNamespace() + "getrf_batch_wrapper"},
      {"cublasCgetrfBatched", getDpctNamespace() + "getrf_batch_wrapper"},
      {"cublasZgetrfBatched", getDpctNamespace() + "getrf_batch_wrapper"},
      {"cublasSgetrsBatched", getDpctNamespace() + "getrs_batch_wrapper"},
      {"cublasDgetrsBatched", getDpctNamespace() + "getrs_batch_wrapper"},
      {"cublasCgetrsBatched", getDpctNamespace() + "getrs_batch_wrapper"},
      {"cublasZgetrsBatched", getDpctNamespace() + "getrs_batch_wrapper"},
      {"cublasSgetriBatched", getDpctNamespace() + "getri_batch_wrapper"},
      {"cublasDgetriBatched", getDpctNamespace() + "getri_batch_wrapper"},
      {"cublasCgetriBatched", getDpctNamespace() + "getri_batch_wrapper"},
      {"cublasZgetriBatched", getDpctNamespace() + "getri_batch_wrapper"},
      {"cublasSgeqrfBatched", getDpctNamespace() + "geqrf_batch_wrapper"},
      {"cublasDgeqrfBatched", getDpctNamespace() + "geqrf_batch_wrapper"},
      {"cublasCgeqrfBatched", getDpctNamespace() + "geqrf_batch_wrapper"},
      {"cublasZgeqrfBatched", getDpctNamespace() + "geqrf_batch_wrapper"},
      {"cublasCrot_v2", getDpctNamespace() + "rot"},
      {"cublasZrot_v2", getDpctNamespace() + "rot"}};

  SOLVERAPIWithRewriter = {"cusolverDnSetStream",
                           "cusolverDnGetStream",
                           "cusolverDnSpotrfBatched",
                           "cusolverDnDpotrfBatched",
                           "cusolverDnCpotrfBatched",
                           "cusolverDnZpotrfBatched",
                           "cusolverDnSpotrsBatched",
                           "cusolverDnDpotrsBatched",
                           "cusolverDnCpotrsBatched",
                           "cusolverDnZpotrsBatched",
                           "cusolverDnSsygvd",
                           "cusolverDnDsygvd",
                           "cusolverDnSsygvd_bufferSize",
                           "cusolverDnDsygvd_bufferSize",
                           "cusolverDnChegvd",
                           "cusolverDnZhegvd",
                           "cusolverDnChegvd_bufferSize",
                           "cusolverDnZhegvd_bufferSize"};
  SPARSEAPIWithRewriter = {"cusparseCreateMatDescr",  "cusparseDestroyMatDescr",
                           "cusparseSetMatType",      "cusparseGetMatType",
                           "cusparseSetMatIndexBase", "cusparseGetMatIndexBase",
                           "cusparseSetMatDiagType",  "cusparseGetMatDiagType",
                           "cusparseSetMatFillMode",  "cusparseGetMatFillMode"};

  // This map now is only used to migrate using declaration
  MathFuncNameMap = {
#define ENTRY_RENAMED(SOURCEAPINAME, TARGETAPINAME)                            \
  {SOURCEAPINAME, TARGETAPINAME},
#define ENTRY_RENAMED_NO_REWRITE(SOURCEAPINAME, TARGETAPINAME)                 \
  {SOURCEAPINAME, TARGETAPINAME},
#define ENTRY_RENAMED_SINGLE(SOURCEAPINAME, TARGETAPINAME)                     \
  {SOURCEAPINAME, TARGETAPINAME},
#define ENTRY_RENAMED_DOUBLE(SOURCEAPINAME, TARGETAPINAME)                     \
  {SOURCEAPINAME, TARGETAPINAME},
#define ENTRY_EMULATED(SOURCEAPINAME, TARGETAPINAME)
#define ENTRY_OPERATOR(SOURCEAPINAME, TARGETAPINAME)
#define ENTRY_TYPECAST(SOURCEAPINAME)
#define ENTRY_UNSUPPORTED(SOURCEAPINAME)
#define ENTRY_REWRITE(APINAME)
#include "APINamesMath.inc"
#undef ENTRY_RENAMED
#undef ENTRY_RENAMED_NO_REWRITE
#undef ENTRY_RENAMED_SINGLE
#undef ENTRY_RENAMED_DOUBLE
#undef ENTRY_EMULATED
#undef ENTRY_OPERATOR
#undef ENTRY_TYPECAST
#undef ENTRY_UNSUPPORTED
#undef ENTRY_REWRITE
  {"abs", MapNames::getClNamespace(false, true) + "abs"},
  {"saturate", MapNames::getClNamespace(false, true) + "clamp"},
  };
}

// Supported vector types
const MapNames::SetTy MapNames::SupportedVectorTypes{SUPPORTEDVECTORTYPENAMES};

const std::map<std::string, int> MapNames::VectorTypeMigratedTypeSizeMap{
    {"char1", 1},       {"char2", 2},       {"char3", 4},
    {"char4", 4},       {"uchar1", 1},      {"uchar2", 2},
    {"uchar3", 4},      {"uchar4", 4},      {"short1", 2},
    {"short2", 4},      {"short3", 8},      {"short4", 8},
    {"ushort1", 2},     {"ushort2", 4},     {"ushort3", 8},
    {"ushort4", 8},     {"int1", 4},        {"int2", 8},
    {"int3", 16},       {"int4", 16},       {"uint1", 4},
    {"uint2", 8},       {"uint3", 16},      {"uint4", 16},
    {"long1", 8},       {"long2", 16},      {"long3", 32},
    {"long4", 32},      {"ulong1", 8},      {"ulong2", 16},
    {"ulong3", 32},     {"ulong4", 32},     {"longlong1", 8},
    {"longlong2", 16},  {"longlong3", 32},  {"longlong4", 32},
    {"ulonglong1", 8},  {"ulonglong2", 16}, {"ulonglong3", 32},
    {"ulonglong4", 32}, {"float1", 4},      {"float2", 8},
    {"float3", 16},     {"float4", 16},     {"double1", 8},
    {"double2", 16},    {"double3", 32},    {"double4", 32}};

const std::map<clang::dpct::KernelArgType, int> MapNames::KernelArgTypeSizeMap{
    {clang::dpct::KernelArgType::KAT_Stream, 208},
    {clang::dpct::KernelArgType::KAT_Texture,
     48 /*32(image accessor) + 16(sampler)*/},
    {clang::dpct::KernelArgType::KAT_Accessor1D, 32},
    {clang::dpct::KernelArgType::KAT_Accessor2D, 56},
    {clang::dpct::KernelArgType::KAT_Accessor3D, 80},
    {clang::dpct::KernelArgType::KAT_Array1D, 8},
    {clang::dpct::KernelArgType::KAT_Array2D, 24},
    {clang::dpct::KernelArgType::KAT_Array3D, 32},
    {clang::dpct::KernelArgType::KAT_Default, 8},
    {clang::dpct::KernelArgType::KAT_MaxParameterSize, 1024}};

int MapNames::getArrayTypeSize(const int Dim) {
  if (DpctGlobalInfo::getUsmLevel() == UsmLevel::UL_None) {
    if (Dim == 2) {
      return KernelArgTypeSizeMap.at(
          clang::dpct::KernelArgType::KAT_Accessor2D);
    } else if (Dim == 3) {
      return KernelArgTypeSizeMap.at(
          clang::dpct::KernelArgType::KAT_Accessor3D);
    } else {
      return KernelArgTypeSizeMap.at(
          clang::dpct::KernelArgType::KAT_Accessor1D);
    }
  } else {
    if (Dim == 2) {
      return KernelArgTypeSizeMap.at(clang::dpct::KernelArgType::KAT_Array2D);
    } else if (Dim == 3) {
      return KernelArgTypeSizeMap.at(clang::dpct::KernelArgType::KAT_Array3D);
    } else {
      return KernelArgTypeSizeMap.at(clang::dpct::KernelArgType::KAT_Array1D);
    }
  }
}

const MapNames::MapTy MapNames::RemovedAPIWarningMessage{
#define ENTRY(APINAME, MSG) {#APINAME, MSG},
#include "APINames_removed.inc"
#undef ENTRY
};

// BLAS enums mapping
const MapNames::MapTy MapNames::BLASEnumsMap{
    {"CUBLAS_OP_N", "oneapi::mkl::transpose::nontrans"},
    {"CUBLAS_OP_T", "oneapi::mkl::transpose::trans"},
    {"CUBLAS_OP_C", "oneapi::mkl::transpose::conjtrans"},
    {"CUBLAS_SIDE_LEFT", "oneapi::mkl::side::left"},
    {"CUBLAS_SIDE_RIGHT", "oneapi::mkl::side::right"},
    {"CUBLAS_FILL_MODE_LOWER", "oneapi::mkl::uplo::lower"},
    {"CUBLAS_FILL_MODE_UPPER", "oneapi::mkl::uplo::upper"},
    {"CUBLAS_DIAG_NON_UNIT", "oneapi::mkl::diag::nonunit"},
    {"CUBLAS_DIAG_UNIT", "oneapi::mkl::diag::unit"},
};

// spBLAS enums mapping
const MapNames::MapTy MapNames::SPBLASEnumsMap{
    {"CUSPARSE_OPERATION_NON_TRANSPOSE", "oneapi::mkl::transpose::nontrans"},
    {"CUSPARSE_OPERATION_TRANSPOSE", "oneapi::mkl::transpose::trans"},
    {"CUSPARSE_OPERATION_CONJUGATE_TRANSPOSE",
     "oneapi::mkl::transpose::conjtrans"},
    {"CUSPARSE_FILL_MODE_LOWER", "oneapi::mkl::uplo::lower"},
    {"CUSPARSE_FILL_MODE_UPPER", "oneapi::mkl::uplo::upper"},
    {"CUSPARSE_DIAG_TYPE_NON_UNIT", "oneapi::mkl::diag::nonunit"},
    {"CUSPARSE_DIAG_TYPE_UNIT", "oneapi::mkl::diag::unit"},
    {"CUSPARSE_INDEX_BASE_ZERO", "oneapi::mkl::index_base::zero"},
    {"CUSPARSE_INDEX_BASE_ONE", "oneapi::mkl::index_base::one"},
    {"CUSPARSE_MATRIX_TYPE_GENERAL", "dpct::sparse::sparse_matrix_info::matrix_type::ge"},
    {"CUSPARSE_MATRIX_TYPE_SYMMETRIC", "dpct::sparse::sparse_matrix_info::matrix_type::sy"},
    {"CUSPARSE_MATRIX_TYPE_HERMITIAN", "dpct::sparse::sparse_matrix_info::matrix_type::he"},
    {"CUSPARSE_MATRIX_TYPE_TRIANGULAR", "dpct::sparse::sparse_matrix_info::matrix_type::tr"},
};

// SOLVER enums mapping
const MapNames::MapTy MapNames::SOLVEREnumsMap{
    {"CUSOLVER_EIG_TYPE_1", "1"},
    {"CUSOLVER_EIG_TYPE_2", "2"},
    {"CUSOLVER_EIG_TYPE_3", "3"},
    {"CUSOLVER_EIG_MODE_NOVECTOR", "oneapi::mkl::job::novec"},
    {"CUSOLVER_EIG_MODE_VECTOR", "oneapi::mkl::job::vec"},
};

const std::map<std::string, MapNames::BLASFuncComplexReplInfo>
    MapNames::BLASFuncComplexReplInfoMap{
        /*BLAS level 1*/
        {"cublasIcamax_v2",
         {std::vector<int>{2, 4}, std::vector<int>{},
          std::vector<std::string>{"std::complex<float>", "int"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::iamax"}},
        {"cublasIzamax_v2",
         {std::vector<int>{2, 4}, std::vector<int>{},
          std::vector<std::string>{"std::complex<double>", "int"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::iamax"}},
        {"cublasIcamin_v2",
         {std::vector<int>{2, 4}, std::vector<int>{},
          std::vector<std::string>{"std::complex<float>", "int"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::iamin"}},
        {"cublasIzamin_v2",
         {std::vector<int>{2, 4}, std::vector<int>{},
          std::vector<std::string>{"std::complex<double>", "int"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::iamin"}},
        {"cublasScasum_v2",
         {std::vector<int>{2, 4}, std::vector<int>{},
          std::vector<std::string>{"std::complex<float>", "float"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::asum"}},
        {"cublasDzasum_v2",
         {std::vector<int>{2, 4}, std::vector<int>{},
          std::vector<std::string>{"std::complex<double>", "double"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::asum"}},
        {"cublasCaxpy_v2",
         {std::vector<int>{3, 5}, std::vector<int>{2},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>"}, std::vector<int>{},
          -1, -1, -1, "oneapi::mkl::blas::column_major::axpy"}},
        {"cublasZaxpy_v2",
         {std::vector<int>{3, 5}, std::vector<int>{2},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>"}, std::vector<int>{},
          -1, -1, -1, "oneapi::mkl::blas::column_major::axpy"}},
        {"cublasCcopy_v2",
         {std::vector<int>{2, 4}, std::vector<int>{},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::copy"}},
        {"cublasZcopy_v2",
         {std::vector<int>{2, 4}, std::vector<int>{},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::copy"}},
        {"cublasCdotu_v2",
         {std::vector<int>{2, 4, 6}, std::vector<int>{},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::dotu"}},
        {"cublasCdotc_v2",
         {std::vector<int>{2, 4, 6}, std::vector<int>{},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::dotc"}},
        {"cublasZdotu_v2",
         {std::vector<int>{2, 4, 6}, std::vector<int>{},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::dotu"}},
        {"cublasZdotc_v2",
         {std::vector<int>{2, 4, 6}, std::vector<int>{},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::dotc"}},
        {"cublasScnrm2_v2",
         {std::vector<int>{2, 4}, std::vector<int>{},
          std::vector<std::string>{"std::complex<float>", "float"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::nrm2"}},
        {"cublasDznrm2_v2",
         {std::vector<int>{2, 4}, std::vector<int>{},
          std::vector<std::string>{"std::complex<double>", "double"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::nrm2"}},
        {"cublasCsrot_v2",
         {std::vector<int>{2, 4}, std::vector<int>{6, 7},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"float", "float"}, std::vector<int>{}, -1,
          -1, -1, "oneapi::mkl::blas::column_major::rot"}},
        {"cublasZdrot_v2",
         {std::vector<int>{2, 4}, std::vector<int>{6, 7},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"double", "double"}, std::vector<int>{}, -1,
          -1, -1, "oneapi::mkl::blas::column_major::rot"}},
        {"cublasCrotg_v2",
         {std::vector<int>{1, 2, 3, 4}, std::vector<int>{},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "float", "std::complex<float>"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::rotg"}},
        {"cublasZrotg_v2",
         {std::vector<int>{1, 2, 3, 4}, std::vector<int>{},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>", "double",
                                   "std::complex<double>"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::rotg"}},
        {"cublasCscal_v2",
         {std::vector<int>{3}, std::vector<int>{2},
          std::vector<std::string>{"std::complex<float>"},
          std::vector<std::string>{"std::complex<float>"}, std::vector<int>{},
          -1, -1, -1, "oneapi::mkl::blas::column_major::scal"}},
        {"cublasCsscal_v2",
         {std::vector<int>{3}, std::vector<int>{2},
          std::vector<std::string>{"std::complex<float>"},
          std::vector<std::string>{"float"}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::scal"}},
        {"cublasZscal_v2",
         {std::vector<int>{3}, std::vector<int>{2},
          std::vector<std::string>{"std::complex<double>"},
          std::vector<std::string>{"std::complex<double>"}, std::vector<int>{},
          -1, -1, -1, "oneapi::mkl::blas::column_major::scal"}},
        {"cublasZdscal_v2",
         {std::vector<int>{3}, std::vector<int>{2},
          std::vector<std::string>{"std::complex<double>"},
          std::vector<std::string>{"double"}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::scal"}},
        {"cublasCswap_v2",
         {std::vector<int>{2, 4}, std::vector<int>{},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::swap"}},
        {"cublasZswap_v2",
         {std::vector<int>{2, 4}, std::vector<int>{},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::swap"}},
        /*BLAS level 2*/
        {"cublasCgbmv_v2",
         {std::vector<int>{7, 9, 12}, std::vector<int>{6, 11},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<int>{1}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::gbmv"}},
        {"cublasZgbmv_v2",
         {std::vector<int>{7, 9, 12}, std::vector<int>{6, 11},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<int>{1}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::gbmv"}},
        {"cublasCgemv_v2",
         {std::vector<int>{5, 7, 10}, std::vector<int>{4, 9},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<int>{1}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::gemv"}},
        {"cublasZgemv_v2",
         {std::vector<int>{5, 7, 10}, std::vector<int>{4, 9},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<int>{1}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::gemv"}},
        {"cublasCgeru_v2",
         {std::vector<int>{4, 6, 8}, std::vector<int>{3},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>"}, std::vector<int>{},
          -1, -1, -1, "oneapi::mkl::blas::column_major::geru"}},
        {"cublasCgerc_v2",
         {std::vector<int>{4, 6, 8}, std::vector<int>{3},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>"}, std::vector<int>{},
          -1, -1, -1, "oneapi::mkl::blas::column_major::gerc"}},
        {"cublasZgeru_v2",
         {std::vector<int>{4, 6, 8}, std::vector<int>{3},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>"}, std::vector<int>{},
          -1, -1, -1, "oneapi::mkl::blas::column_major::geru"}},
        {"cublasZgerc_v2",
         {std::vector<int>{4, 6, 8}, std::vector<int>{3},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>"}, std::vector<int>{},
          -1, -1, -1, "oneapi::mkl::blas::column_major::gerc"}},
        {"cublasCsymv_v2",
          {std::vector<int>{4, 6, 9}, std::vector<int>{3, 8},
           std::vector<std::string>{"std::complex<float>", "std::complex<float>", "std::complex<float>"},
           std::vector<std::string>{"std::complex<float>", "std::complex<float>"}, std::vector<int>{},
           1, -1, -1, "oneapi::mkl::blas::column_major::symv"}},
        {"cublasZsymv_v2",
          {std::vector<int>{4, 6, 9}, std::vector<int>{3, 8},
           std::vector<std::string>{"std::complex<double>", "std::complex<double>", "std::complex<double>"},
           std::vector<std::string>{"std::complex<double>", "std::complex<double>"}, std::vector<int>{}, 1, -1, -1,
           "oneapi::mkl::blas::column_major::symv"}},
        {"cublasCsyr_v2",
          {std::vector<int>{4, 6}, std::vector<int>{3},
           std::vector<std::string>{"std::complex<float>", "std::complex<float>"},
           std::vector<std::string>{"std::complex<float>"}, std::vector<int>{}, 1, -1,
           -1, "oneapi::mkl::blas::column_major::syr"}},
        {"cublasZsyr_v2",
          {std::vector<int>{4, 6}, std::vector<int>{3},
           std::vector<std::string>{"std::complex<double>", "std::complex<double>"},
           std::vector<std::string>{"std::complex<double>"}, std::vector<int>{}, 1, -1,
           -1, "oneapi::mkl::blas::column_major::syr"}},
        {"cublasCsyr2_v2",
          {std::vector<int>{4, 6, 8}, std::vector<int>{3},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>", "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>"}, std::vector<int>{},
          1, -1, -1, "oneapi::mkl::blas::column_major::syr2"}},
        {"cublasZsyr2_v2",
          {std::vector<int>{4, 6, 8}, std::vector<int>{3},
          std::vector<std::string>{"std::complex<double>", "std::complex<double>", "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>"}, std::vector<int>{}, 1, -1, -1,
        "oneapi::mkl::blas::column_major::syr2"}},
        {"cublasCtbmv_v2",
         {std::vector<int>{6, 8}, std::vector<int>{},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{}, std::vector<int>{2}, 1, -1, 3,
          "oneapi::mkl::blas::column_major::tbmv"}},
        {"cublasZtbmv_v2",
         {std::vector<int>{6, 8}, std::vector<int>{},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{}, std::vector<int>{2}, 1, -1, 3,
          "oneapi::mkl::blas::column_major::tbmv"}},
        {"cublasCtbsv_v2",
         {std::vector<int>{6, 8}, std::vector<int>{},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{}, std::vector<int>{2}, 1, -1, 3,
          "oneapi::mkl::blas::column_major::tbsv"}},
        {"cublasZtbsv_v2",
         {std::vector<int>{6, 8}, std::vector<int>{},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{}, std::vector<int>{2}, 1, -1, 3,
          "oneapi::mkl::blas::column_major::tbsv"}},
        {"cublasCtpmv_v2",
         {std::vector<int>{5, 6}, std::vector<int>{},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{}, std::vector<int>{2}, 1, -1, 3,
          "oneapi::mkl::blas::column_major::tpmv"}},
        {"cublasZtpmv_v2",
         {std::vector<int>{5, 6}, std::vector<int>{},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{}, std::vector<int>{2}, 1, -1, 3,
          "oneapi::mkl::blas::column_major::tpmv"}},
        {"cublasCtpsv_v2",
         {std::vector<int>{5, 6}, std::vector<int>{},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{}, std::vector<int>{2}, 1, -1, 3,
          "oneapi::mkl::blas::column_major::tpsv"}},
        {"cublasZtpsv_v2",
         {std::vector<int>{5, 6}, std::vector<int>{},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{}, std::vector<int>{2}, 1, -1, 3,
          "oneapi::mkl::blas::column_major::tpsv"}},
        {"cublasCtrmv_v2",
         {std::vector<int>{5, 7}, std::vector<int>{},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{}, std::vector<int>{2}, 1, -1, 3,
          "oneapi::mkl::blas::column_major::trmv"}},
        {"cublasZtrmv_v2",
         {std::vector<int>{5, 7}, std::vector<int>{},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{}, std::vector<int>{2}, 1, -1, 3,
          "oneapi::mkl::blas::column_major::trmv"}},
        {"cublasCtrsv_v2",
         {std::vector<int>{5, 7}, std::vector<int>{},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{}, std::vector<int>{2}, 1, -1, 3,
          "oneapi::mkl::blas::column_major::trsv"}},
        {"cublasZtrsv_v2",
         {std::vector<int>{5, 7}, std::vector<int>{},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{}, std::vector<int>{2}, 1, -1, 3,
          "oneapi::mkl::blas::column_major::trsv"}},
        {"cublasChemv_v2",
         {std::vector<int>{4, 6, 9}, std::vector<int>{3, 8},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<int>{}, 1, -1, -1,
          "oneapi::mkl::blas::column_major::hemv"}},
        {"cublasZhemv_v2",
         {std::vector<int>{4, 6, 9}, std::vector<int>{3, 8},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<int>{}, 1, -1, -1,
          "oneapi::mkl::blas::column_major::hemv"}},
        {"cublasChbmv_v2",
         {std::vector<int>{5, 7, 10}, std::vector<int>{4, 9},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<int>{}, 1, -1, -1,
          "oneapi::mkl::blas::column_major::hbmv"}},
        {"cublasZhbmv_v2",
         {std::vector<int>{5, 7, 10}, std::vector<int>{4, 9},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<int>{}, 1, -1, -1,
          "oneapi::mkl::blas::column_major::hbmv"}},
        {"cublasChpmv_v2",
         {std::vector<int>{4, 5, 8}, std::vector<int>{3, 7},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<int>{}, 1, -1, -1,
          "oneapi::mkl::blas::column_major::hpmv"}},
        {"cublasZhpmv_v2",
         {std::vector<int>{4, 5, 8}, std::vector<int>{3, 7},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<int>{}, 1, -1, -1,
          "oneapi::mkl::blas::column_major::hpmv"}},
        {"cublasCher_v2",
         {std::vector<int>{4, 6}, std::vector<int>{3},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"float"}, std::vector<int>{}, 1, -1, -1,
          "oneapi::mkl::blas::column_major::her"}},
        {"cublasZher_v2",
         {std::vector<int>{4, 6}, std::vector<int>{3},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"double"}, std::vector<int>{}, 1, -1, -1,
          "oneapi::mkl::blas::column_major::her"}},
        {"cublasCher2_v2",
         {std::vector<int>{4, 6, 8}, std::vector<int>{3},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>"}, std::vector<int>{},
          1, -1, -1, "oneapi::mkl::blas::column_major::her2"}},
        {"cublasZher2_v2",
         {std::vector<int>{4, 6, 8}, std::vector<int>{3},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>"}, std::vector<int>{},
          1, -1, -1, "oneapi::mkl::blas::column_major::her2"}},
        {"cublasChpr_v2",
         {std::vector<int>{4, 6}, std::vector<int>{3},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"float"}, std::vector<int>{}, 1, -1, -1,
          "oneapi::mkl::blas::column_major::hpr"}},
        {"cublasZhpr_v2",
         {std::vector<int>{4, 6}, std::vector<int>{3},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"double"}, std::vector<int>{}, 1, -1, -1,
          "oneapi::mkl::blas::column_major::hpr"}},
        {"cublasChpr2_v2",
         {std::vector<int>{4, 6, 8}, std::vector<int>{3},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>"}, std::vector<int>{},
          1, -1, -1, "oneapi::mkl::blas::column_major::hpr2"}},
        {"cublasZhpr2_v2",
         {std::vector<int>{4, 6, 8}, std::vector<int>{3},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>"}, std::vector<int>{},
          1, -1, -1, "oneapi::mkl::blas::column_major::hpr2"}},
        /*BLAS level 3*/
        {"cublasCgemm_v2",
         {std::vector<int>{7, 9, 12}, std::vector<int>{6, 11},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<int>{1, 2}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::gemm"}},
        {"cublasZgemm_v2",
         {std::vector<int>{7, 9, 12}, std::vector<int>{6, 11},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<int>{1, 2}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::gemm"}},
        {"cublasCgemm3m",
         {std::vector<int>{7, 9, 12}, std::vector<int>{6, 11},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<int>{1, 2}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::gemm"}},
        {"cublasZgemm3m",
         {std::vector<int>{7, 9, 12}, std::vector<int>{6, 11},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<int>{1, 2}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::gemm"}},
        {"cublasCgemmStridedBatched",
         {std::vector<int>{7, 10, 14}, std::vector<int>{6, 13},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<int>{1, 2}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::gemm_batch"}},
        {"cublasZgemmStridedBatched",
         {std::vector<int>{7, 10, 14}, std::vector<int>{6, 13},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<int>{1, 2}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::gemm_batch"}},
        {"cublasCsymm_v2",
         {std::vector<int>{6, 8, 11}, std::vector<int>{5, 10},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<int>{}, 2, 1, -1,
          "oneapi::mkl::blas::column_major::symm"}},
        {"cublasZsymm_v2",
         {std::vector<int>{6, 8, 11}, std::vector<int>{5, 10},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<int>{}, 2, 1, -1,
          "oneapi::mkl::blas::column_major::symm"}},
        {"cublasCsyrk_v2",
         {std::vector<int>{6, 9}, std::vector<int>{5, 8},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<int>{2}, 1, -1, -1,
          "oneapi::mkl::blas::column_major::syrk"}},
        {"cublasZsyrk_v2",
         {std::vector<int>{6, 9}, std::vector<int>{5, 8},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<int>{2}, 1, -1, -1,
          "oneapi::mkl::blas::column_major::syrk"}},
        {"cublasCsyr2k_v2",
         {std::vector<int>{6, 8, 11}, std::vector<int>{5, 10},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<int>{2}, 1, -1, -1,
          "oneapi::mkl::blas::column_major::syr2k"}},
        {"cublasZsyr2k_v2",
         {std::vector<int>{6, 8, 11}, std::vector<int>{5, 10},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<int>{2}, 1, -1, -1,
          "oneapi::mkl::blas::column_major::syr2k"}},
        {"cublasCtrsm_v2",
         {std::vector<int>{8, 10}, std::vector<int>{7},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>"}, std::vector<int>{3},
          2, 1, 4, "oneapi::mkl::blas::column_major::trsm"}},
        {"cublasZtrsm_v2",
         {std::vector<int>{8, 10}, std::vector<int>{7},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>"}, std::vector<int>{3},
          2, 1, 4, "oneapi::mkl::blas::column_major::trsm"}},
        {"cublasChemm_v2",
         {std::vector<int>{6, 8, 11}, std::vector<int>{5, 10},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<int>{}, 2, 1, -1,
          "oneapi::mkl::blas::column_major::hemm"}},
        {"cublasZhemm_v2",
         {std::vector<int>{6, 8, 11}, std::vector<int>{5, 10},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<int>{}, 2, 1, -1,
          "oneapi::mkl::blas::column_major::hemm"}},
        {"cublasCherk_v2",
         {std::vector<int>{6, 9}, std::vector<int>{5, 8},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"float", "float"}, std::vector<int>{2}, 1,
          -1, -1, "oneapi::mkl::blas::column_major::herk"}},
        {"cublasZherk_v2",
         {std::vector<int>{6, 9}, std::vector<int>{5, 8},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"double", "double"}, std::vector<int>{2}, 1,
          -1, -1, "oneapi::mkl::blas::column_major::herk"}},
        {"cublasCher2k_v2",
         {std::vector<int>{6, 8, 11}, std::vector<int>{5, 10},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>", "float"},
          std::vector<int>{2}, 1, -1, -1,
          "oneapi::mkl::blas::column_major::her2k"}},
        {"cublasZher2k_v2",
         {std::vector<int>{6, 8, 11}, std::vector<int>{5, 10},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>", "double"},
          std::vector<int>{2}, 1, -1, -1,
          "oneapi::mkl::blas::column_major::her2k"}},
        {"cublasCgeam",
         {std::vector<int>{6, 9, 11}, std::vector<int>{5, 8},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>"},
          std::vector<int>{1, 2}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::omatadd"}},
        {"cublasZgeam",
         {std::vector<int>{6, 9, 11}, std::vector<int>{5, 8},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>", "std::complex<double>"},
          std::vector<int>{1, 2}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::omatadd"}}
    };

const std::map<std::string, MapNames::BLASFuncComplexReplInfo>
    MapNames::LegacyBLASFuncReplInfoMap{
        /*BLAS level 1 */
        {"cublasIsamax",
         {std::vector<int>{1}, std::vector<int>{},
          std::vector<std::string>{"float", "int64_t"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::iamax"}},
        {"cublasIdamax",
         {std::vector<int>{1}, std::vector<int>{},
          std::vector<std::string>{"double", "int64_t"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::iamax"}},
        {"cublasIsamin",
         {std::vector<int>{1}, std::vector<int>{},
          std::vector<std::string>{"float", "int64_t"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::iamin"}},
        {"cublasIdamin",
         {std::vector<int>{1}, std::vector<int>{},
          std::vector<std::string>{"double", "int64_t"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::iamin"}},
        {"cublasSasum",
         {std::vector<int>{1}, std::vector<int>{},
          std::vector<std::string>{"float", "float"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::asum"}},
        {"cublasDasum",
         {std::vector<int>{1}, std::vector<int>{},
          std::vector<std::string>{"double", "double"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::asum"}},
        {"cublasSaxpy",
         {std::vector<int>{2, 4}, std::vector<int>{},
          std::vector<std::string>{"float", "float"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::axpy"}},
        {"cublasDaxpy",
         {std::vector<int>{2, 4}, std::vector<int>{},
          std::vector<std::string>{"double", "double"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::axpy"}},
        {"cublasScopy",
         {std::vector<int>{1, 3}, std::vector<int>{},
          std::vector<std::string>{"float", "float"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::copy"}},
        {"cublasDcopy",
         {std::vector<int>{1, 3}, std::vector<int>{},
          std::vector<std::string>{"double", "double"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::copy"}},
        {"cublasSdot",
         {std::vector<int>{1, 3}, std::vector<int>{},
          std::vector<std::string>{"float", "float", "float"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::dot"}},
        {"cublasDdot",
         {std::vector<int>{1, 3}, std::vector<int>{},
          std::vector<std::string>{"double", "double", "double"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::dot"}},
        {"cublasSnrm2",
         {std::vector<int>{1}, std::vector<int>{},
          std::vector<std::string>{"float", "float"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::nrm2"}},
        {"cublasDnrm2",
         {std::vector<int>{1}, std::vector<int>{},
          std::vector<std::string>{"double", "double"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::nrm2"}},
        {"cublasSrot",
         {std::vector<int>{1, 3}, std::vector<int>{},
          std::vector<std::string>{"float", "float"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::rot"}},
        {"cublasDrot",
         {std::vector<int>{1, 3}, std::vector<int>{},
          std::vector<std::string>{"double", "double"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::rot"}},
        {"cublasCrot",
         {std::vector<int>{1, 3}, std::vector<int>{6},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>"},
          std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::rot"}},
        {"cublasZrot",
         {std::vector<int>{1, 3}, std::vector<int>{6},
          std::vector<std::string>{"std::complex<double>", "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>"},
          std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::rot"}},
        {"cublasSrotg",
         {std::vector<int>{0, 1, 2, 3}, std::vector<int>{},
          std::vector<std::string>{"float", "float", "float", "float"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::rotg"}},
        {"cublasDrotg",
         {std::vector<int>{0, 1, 2, 3}, std::vector<int>{},
          std::vector<std::string>{"double", "double", "double", "double"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::rotg"}},
        {"cublasSrotm",
         {std::vector<int>{1, 3, 5}, std::vector<int>{},
          std::vector<std::string>{"float", "float", "float"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::rotm"}},
        {"cublasDrotm",
         {std::vector<int>{1, 3, 5}, std::vector<int>{},
          std::vector<std::string>{"double", "double", "double"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::rotm"}},
        {"cublasSrotmg",
         {std::vector<int>{0, 1, 2, 4}, std::vector<int>{3},
          std::vector<std::string>{"float", "float", "float", "float"},
          std::vector<std::string>{"float"}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::rotmg"}},
        {"cublasDrotmg",
         {std::vector<int>{0, 1, 2, 4}, std::vector<int>{3},
          std::vector<std::string>{"double", "double", "double", "double"},
          std::vector<std::string>{"double"}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::rotmg"}},
        {"cublasSscal",
         {std::vector<int>{2}, std::vector<int>{},
          std::vector<std::string>{"float"}, std::vector<std::string>{},
          std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::scal"}},
        {"cublasDscal",
         {std::vector<int>{2}, std::vector<int>{},
          std::vector<std::string>{"double"}, std::vector<std::string>{},
          std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::scal"}},
        {"cublasSswap",
         {std::vector<int>{1, 3}, std::vector<int>{},
          std::vector<std::string>{"float", "float"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::swap"}},
        {"cublasDswap",
         {std::vector<int>{1, 3}, std::vector<int>{},
          std::vector<std::string>{"double", "double"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::swap"}},
        /*BLAS level 2 */
        {"cublasSgbmv",
         {std::vector<int>{6, 8, 11}, std::vector<int>{},
          std::vector<std::string>{"float", "float", "float"},
          std::vector<std::string>{}, std::vector<int>{0}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::gbmv"}},
        {"cublasDgbmv",
         {std::vector<int>{6, 8, 11}, std::vector<int>{},
          std::vector<std::string>{"double", "double", "double"},
          std::vector<std::string>{}, std::vector<int>{0}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::gbmv"}},
        {"cublasSgemv",
         {std::vector<int>{4, 6, 9}, std::vector<int>{},
          std::vector<std::string>{"float", "float", "float"},
          std::vector<std::string>{}, std::vector<int>{0}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::gemv"}},
        {"cublasDgemv",
         {std::vector<int>{4, 6, 9}, std::vector<int>{},
          std::vector<std::string>{"double", "double", "double"},
          std::vector<std::string>{}, std::vector<int>{0}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::gemv"}},
        {"cublasSger",
         {std::vector<int>{3, 5, 7}, std::vector<int>{},
          std::vector<std::string>{"float", "float", "float"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::ger"}},
        {"cublasDger",
         {std::vector<int>{3, 5, 7}, std::vector<int>{},
          std::vector<std::string>{"double", "double", "double"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::ger"}},
        {"cublasSsbmv",
         {std::vector<int>{4, 6, 9}, std::vector<int>{},
          std::vector<std::string>{"float", "float", "float"},
          std::vector<std::string>{}, std::vector<int>{}, 0, -1, -1,
          "oneapi::mkl::blas::column_major::sbmv"}},
        {"cublasDsbmv",
         {std::vector<int>{4, 6, 9}, std::vector<int>{},
          std::vector<std::string>{"double", "double", "double"},
          std::vector<std::string>{}, std::vector<int>{}, 0, -1, -1,
          "oneapi::mkl::blas::column_major::sbmv"}},
        {"cublasSspmv",
         {std::vector<int>{3, 4, 7}, std::vector<int>{},
          std::vector<std::string>{"float", "float", "float"},
          std::vector<std::string>{}, std::vector<int>{}, 0, -1, -1,
          "oneapi::mkl::blas::column_major::spmv"}},
        {"cublasDspmv",
         {std::vector<int>{3, 4, 7}, std::vector<int>{},
          std::vector<std::string>{"double", "double", "double"},
          std::vector<std::string>{}, std::vector<int>{}, 0, -1, -1,
          "oneapi::mkl::blas::column_major::spmv"}},
        {"cublasSspr",
         {std::vector<int>{3, 5}, std::vector<int>{},
          std::vector<std::string>{"float", "float"},
          std::vector<std::string>{}, std::vector<int>{}, 0, -1, -1,
          "oneapi::mkl::blas::column_major::spr"}},
        {"cublasDspr",
         {std::vector<int>{3, 5}, std::vector<int>{},
          std::vector<std::string>{"double", "double"},
          std::vector<std::string>{}, std::vector<int>{}, 0, -1, -1,
          "oneapi::mkl::blas::column_major::spr"}},
        {"cublasSspr2",
         {std::vector<int>{3, 5, 7}, std::vector<int>{},
          std::vector<std::string>{"float", "float", "float"},
          std::vector<std::string>{}, std::vector<int>{}, 0, -1, -1,
          "oneapi::mkl::blas::column_major::spr2"}},
        {"cublasDspr2",
         {std::vector<int>{3, 5, 7}, std::vector<int>{},
          std::vector<std::string>{"double", "double", "double"},
          std::vector<std::string>{}, std::vector<int>{}, 0, -1, -1,
          "oneapi::mkl::blas::column_major::spr2"}},
        {"cublasSsymv",
         {std::vector<int>{3, 5, 8}, std::vector<int>{},
          std::vector<std::string>{"float", "float", "float"},
          std::vector<std::string>{}, std::vector<int>{}, 0, -1, -1,
          "oneapi::mkl::blas::column_major::symv"}},
        {"cublasDsymv",
         {std::vector<int>{3, 5, 8}, std::vector<int>{},
          std::vector<std::string>{"double", "double", "double"},
          std::vector<std::string>{}, std::vector<int>{}, 0, -1, -1,
          "oneapi::mkl::blas::column_major::symv"}},
        {"cublasSsyr",
         {std::vector<int>{3, 5}, std::vector<int>{},
          std::vector<std::string>{"float", "float"},
          std::vector<std::string>{}, std::vector<int>{}, 0, -1, -1,
          "oneapi::mkl::blas::column_major::syr"}},
        {"cublasDsyr",
         {std::vector<int>{3, 5}, std::vector<int>{},
          std::vector<std::string>{"double", "double"},
          std::vector<std::string>{}, std::vector<int>{}, 0, -1, -1,
          "oneapi::mkl::blas::column_major::syr"}},
        {"cublasSsyr2",
         {std::vector<int>{3, 5, 7}, std::vector<int>{},
          std::vector<std::string>{"float", "float", "float"},
          std::vector<std::string>{}, std::vector<int>{}, 0, -1, -1,
          "oneapi::mkl::blas::column_major::syr2"}},
        {"cublasDsyr2",
         {std::vector<int>{3, 5, 7}, std::vector<int>{},
          std::vector<std::string>{"double", "double", "double"},
          std::vector<std::string>{}, std::vector<int>{}, 0, -1, -1,
          "oneapi::mkl::blas::column_major::syr2"}},
        {"cublasStbmv",
         {std::vector<int>{5, 7}, std::vector<int>{},
          std::vector<std::string>{"float", "float"},
          std::vector<std::string>{}, std::vector<int>{1}, 0, -1, 2,
          "oneapi::mkl::blas::column_major::tbmv"}},
        {"cublasDtbmv",
         {std::vector<int>{5, 7}, std::vector<int>{},
          std::vector<std::string>{"double", "double"},
          std::vector<std::string>{}, std::vector<int>{1}, 0, -1, 2,
          "oneapi::mkl::blas::column_major::tbmv"}},
        {"cublasStbsv",
         {std::vector<int>{5, 7}, std::vector<int>{},
          std::vector<std::string>{"float", "float"},
          std::vector<std::string>{}, std::vector<int>{1}, 0, -1, 2,
          "oneapi::mkl::blas::column_major::tbsv"}},
        {"cublasDtbsv",
         {std::vector<int>{5, 7}, std::vector<int>{},
          std::vector<std::string>{"double", "double"},
          std::vector<std::string>{}, std::vector<int>{1}, 0, -1, 2,
          "oneapi::mkl::blas::column_major::tbsv"}},
        {"cublasStpmv",
         {std::vector<int>{4, 5}, std::vector<int>{},
          std::vector<std::string>{"float", "float"},
          std::vector<std::string>{}, std::vector<int>{1}, 0, -1, 2,
          "oneapi::mkl::blas::column_major::tpmv"}},
        {"cublasDtpmv",
         {std::vector<int>{4, 5}, std::vector<int>{},
          std::vector<std::string>{"double", "double"},
          std::vector<std::string>{}, std::vector<int>{1}, 0, -1, 2,
          "oneapi::mkl::blas::column_major::tpmv"}},
        {"cublasStpsv",
         {std::vector<int>{4, 5}, std::vector<int>{},
          std::vector<std::string>{"float", "float"},
          std::vector<std::string>{}, std::vector<int>{1}, 0, -1, 2,
          "oneapi::mkl::blas::column_major::tpsv"}},
        {"cublasDtpsv",
         {std::vector<int>{4, 5}, std::vector<int>{},
          std::vector<std::string>{"double", "double"},
          std::vector<std::string>{}, std::vector<int>{1}, 0, -1, 2,
          "oneapi::mkl::blas::column_major::tpsv"}},
        {"cublasStrmv",
         {std::vector<int>{4, 6}, std::vector<int>{},
          std::vector<std::string>{"float", "float"},
          std::vector<std::string>{}, std::vector<int>{1}, 0, -1, 2,
          "oneapi::mkl::blas::column_major::trmv"}},
        {"cublasDtrmv",
         {std::vector<int>{4, 6}, std::vector<int>{},
          std::vector<std::string>{"double", "double"},
          std::vector<std::string>{}, std::vector<int>{1}, 0, -1, 2,
          "oneapi::mkl::blas::column_major::trmv"}},
        {"cublasStrsv",
         {std::vector<int>{4, 6}, std::vector<int>{},
          std::vector<std::string>{"float", "float"},
          std::vector<std::string>{}, std::vector<int>{1}, 0, -1, 2,
          "oneapi::mkl::blas::column_major::trsv"}},
        {"cublasDtrsv",
         {std::vector<int>{4, 6}, std::vector<int>{},
          std::vector<std::string>{"double", "double"},
          std::vector<std::string>{}, std::vector<int>{1}, 0, -1, 2,
          "oneapi::mkl::blas::column_major::trsv"}},
        /*BLAS level 3 */
        {"cublasSgemm",
         {std::vector<int>{6, 8, 11}, std::vector<int>{},
          std::vector<std::string>{"float", "float", "float"},
          std::vector<std::string>{}, std::vector<int>{0, 1}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::gemm"}},
        {"cublasDgemm",
         {std::vector<int>{6, 8, 11}, std::vector<int>{},
          std::vector<std::string>{"double", "double", "double"},
          std::vector<std::string>{}, std::vector<int>{0, 1}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::gemm"}},
        {"cublasSsymm",
         {std::vector<int>{5, 7, 10}, std::vector<int>{},
          std::vector<std::string>{"float", "float", "float"},
          std::vector<std::string>{}, std::vector<int>{}, 1, 0, -1,
          "oneapi::mkl::blas::column_major::symm"}},
        {"cublasDsymm",
         {std::vector<int>{5, 7, 10}, std::vector<int>{},
          std::vector<std::string>{"double", "double", "double"},
          std::vector<std::string>{}, std::vector<int>{}, 1, 0, -1,
          "oneapi::mkl::blas::column_major::symm"}},
        {"cublasSsyrk",
         {std::vector<int>{5, 8}, std::vector<int>{},
          std::vector<std::string>{"float", "float"},
          std::vector<std::string>{}, std::vector<int>{1}, 0, -1, -1,
          "oneapi::mkl::blas::column_major::syrk"}},
        {"cublasDsyrk",
         {std::vector<int>{5, 8}, std::vector<int>{},
          std::vector<std::string>{"double", "double"},
          std::vector<std::string>{}, std::vector<int>{1}, 0, -1, -1,
          "oneapi::mkl::blas::column_major::syrk"}},
        {"cublasSsyr2k",
         {std::vector<int>{5, 7, 10}, std::vector<int>{},
          std::vector<std::string>{"float", "float", "float"},
          std::vector<std::string>{}, std::vector<int>{1}, 0, -1, -1,
          "oneapi::mkl::blas::column_major::syr2k"}},
        {"cublasDsyr2k",
         {std::vector<int>{5, 7, 10}, std::vector<int>{},
          std::vector<std::string>{"double", "double", "double"},
          std::vector<std::string>{}, std::vector<int>{1}, 0, -1, -1,
          "oneapi::mkl::blas::column_major::syr2k"}},
        {"cublasStrsm",
         {std::vector<int>{7, 9}, std::vector<int>{},
          std::vector<std::string>{"float", "float"},
          std::vector<std::string>{}, std::vector<int>{2}, 1, 0, 3,
          "oneapi::mkl::blas::column_major::trsm"}},
        {"cublasDtrsm",
         {std::vector<int>{7, 9}, std::vector<int>{},
          std::vector<std::string>{"double", "double"},
          std::vector<std::string>{}, std::vector<int>{2}, 1, 0, 3,
          "oneapi::mkl::blas::column_major::trsm"}},
        {"cublasStrmm",
         {std::vector<int>{7, 9}, std::vector<int>{},
          std::vector<std::string>{"float", "float"},
          std::vector<std::string>{}, std::vector<int>{2}, 1, 0, 3,
          "oneapi::mkl::blas::column_major::trmm"}},
        {"cublasDtrmm",
         {std::vector<int>{7, 9}, std::vector<int>{},
          std::vector<std::string>{"double", "double"},
          std::vector<std::string>{}, std::vector<int>{2}, 1, 0, 3,
          "oneapi::mkl::blas::column_major::trmm"}},
        // level 1
        {"cublasIcamax",
         {std::vector<int>{1}, std::vector<int>{},
          std::vector<std::string>{"std::complex<float>", "int64_t"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::iamax"}},
        {"cublasIzamax",
         {std::vector<int>{1}, std::vector<int>{},
          std::vector<std::string>{"std::complex<double>", "int64_t"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::iamax"}},
        {"cublasIcamin",
         {std::vector<int>{1}, std::vector<int>{},
          std::vector<std::string>{"std::complex<float>", "int64_t"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::iamin"}},
        {"cublasIzamin",
         {std::vector<int>{1}, std::vector<int>{},
          std::vector<std::string>{"std::complex<double>", "int64_t"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::iamin"}},
        {"cublasScasum",
         {std::vector<int>{1}, std::vector<int>{},
          std::vector<std::string>{"std::complex<float>", "float"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::asum"}},
        {"cublasDzasum",
         {std::vector<int>{1}, std::vector<int>{},
          std::vector<std::string>{"std::complex<double>", "double"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::asum"}},
        {"cublasCaxpy",
         {std::vector<int>{2, 4}, std::vector<int>{1},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>"}, std::vector<int>{},
          -1, -1, -1, "oneapi::mkl::blas::column_major::axpy"}},
        {"cublasZaxpy",
         {std::vector<int>{2, 4}, std::vector<int>{1},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>"}, std::vector<int>{},
          -1, -1, -1, "oneapi::mkl::blas::column_major::axpy"}},
        {"cublasCcopy",
         {std::vector<int>{1, 3}, std::vector<int>{},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::copy"}},
        {"cublasZcopy",
         {std::vector<int>{1, 3}, std::vector<int>{},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::copy"}},
        {"cublasCdotu",
         {std::vector<int>{1, 3}, std::vector<int>{},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::dotu"}},
        {"cublasCdotc",
         {std::vector<int>{1, 3}, std::vector<int>{},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::dotc"}},
        {"cublasZdotu",
         {std::vector<int>{1, 3}, std::vector<int>{},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::dotu"}},
        {"cublasZdotc",
         {std::vector<int>{1, 3}, std::vector<int>{},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::dotc"}},
        {"cublasScnrm2",
         {std::vector<int>{1}, std::vector<int>{},
          std::vector<std::string>{"std::complex<float>", "float"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::nrm2"}},
        {"cublasDznrm2",
         {std::vector<int>{1}, std::vector<int>{},
          std::vector<std::string>{"std::complex<double>", "double"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::nrm2"}},
        {"cublasCsrot",
         {std::vector<int>{1, 3}, std::vector<int>{},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::rot"}},
        {"cublasZdrot",
         {std::vector<int>{1, 3}, std::vector<int>{},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::rot"}},
        {"cublasCscal",
         {std::vector<int>{2}, std::vector<int>{1},
          std::vector<std::string>{"std::complex<float>"},
          std::vector<std::string>{"std::complex<float>"}, std::vector<int>{},
          -1, -1, -1, "oneapi::mkl::blas::column_major::scal"}},
        {"cublasZscal",
         {std::vector<int>{2}, std::vector<int>{1},
          std::vector<std::string>{"std::complex<double>"},
          std::vector<std::string>{"std::complex<double>"}, std::vector<int>{},
          -1, -1, -1, "oneapi::mkl::blas::column_major::scal"}},
        {"cublasCsscal",
         {std::vector<int>{2}, std::vector<int>{},
          std::vector<std::string>{"std::complex<float>"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::scal"}},
        {"cublasZdscal",
         {std::vector<int>{2}, std::vector<int>{},
          std::vector<std::string>{"std::complex<double>"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::scal"}},
        {"cublasCswap",
         {std::vector<int>{1, 3}, std::vector<int>{},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::swap"}},
        {"cublasZswap",
         {std::vector<int>{1, 3}, std::vector<int>{},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{}, std::vector<int>{}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::swap"}},
        /*BLAS level 2 */
        {"cublasCgbmv",
         {std::vector<int>{6, 8, 11}, std::vector<int>{5, 10},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<int>{0}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::gbmv"}},
        {"cublasZgbmv",
         {std::vector<int>{6, 8, 11}, std::vector<int>{5, 10},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<int>{0}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::gbmv"}},
        {"cublasCgemv",
         {std::vector<int>{4, 6, 9}, std::vector<int>{3, 8},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<int>{0}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::gemv"}},
        {"cublasZgemv",
         {std::vector<int>{4, 6, 9}, std::vector<int>{3, 8},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<int>{0}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::gemv"}},
        {"cublasCgeru",
         {std::vector<int>{3, 5, 7}, std::vector<int>{2},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>"}, std::vector<int>{},
          -1, -1, -1, "oneapi::mkl::blas::column_major::geru"}},
        {"cublasCgerc",
         {std::vector<int>{3, 5, 7}, std::vector<int>{2},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>"}, std::vector<int>{},
          -1, -1, -1, "oneapi::mkl::blas::column_major::gerc"}},
        {"cublasZgeru",
         {std::vector<int>{3, 5, 7}, std::vector<int>{2},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>"}, std::vector<int>{},
          -1, -1, -1, "oneapi::mkl::blas::column_major::geru"}},
        {"cublasZgerc",
         {std::vector<int>{3, 5, 7}, std::vector<int>{2},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>"}, std::vector<int>{},
          -1, -1, -1, "oneapi::mkl::blas::column_major::gerc"}},
        {"cublasCtbmv",
         {std::vector<int>{5, 7}, std::vector<int>{},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{}, std::vector<int>{1}, 0, -1, 2,
          "oneapi::mkl::blas::column_major::tbmv"}},
        {"cublasZtbmv",
         {std::vector<int>{5, 7}, std::vector<int>{},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{}, std::vector<int>{1}, 0, -1, 2,
          "oneapi::mkl::blas::column_major::tbmv"}},
        {"cublasCtbsv",
         {std::vector<int>{5, 7}, std::vector<int>{},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{}, std::vector<int>{1}, 0, -1, 2,
          "oneapi::mkl::blas::column_major::tbsv"}},
        {"cublasZtbsv",
         {std::vector<int>{5, 7}, std::vector<int>{},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{}, std::vector<int>{1}, 0, -1, 2,
          "oneapi::mkl::blas::column_major::tbsv"}},
        {"cublasCtpmv",
         {std::vector<int>{4, 5}, std::vector<int>{},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{}, std::vector<int>{1}, 0, -1, 2,
          "oneapi::mkl::blas::column_major::tpmv"}},
        {"cublasZtpmv",
         {std::vector<int>{4, 5}, std::vector<int>{},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{}, std::vector<int>{1}, 0, -1, 2,
          "oneapi::mkl::blas::column_major::tpmv"}},
        {"cublasCtpsv",
         {std::vector<int>{4, 5}, std::vector<int>{},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{}, std::vector<int>{1}, 0, -1, 2,
          "oneapi::mkl::blas::column_major::tpsv"}},
        {"cublasZtpsv",
         {std::vector<int>{4, 5}, std::vector<int>{},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{}, std::vector<int>{1}, 0, -1, 2,
          "oneapi::mkl::blas::column_major::tpsv"}},
        {"cublasCtrmv",
         {std::vector<int>{4, 6}, std::vector<int>{},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{}, std::vector<int>{1}, 0, -1, 2,
          "oneapi::mkl::blas::column_major::trmv"}},
        {"cublasZtrmv",
         {std::vector<int>{4, 6}, std::vector<int>{},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{}, std::vector<int>{1}, 0, -1, 2,
          "oneapi::mkl::blas::column_major::trmv"}},
        {"cublasCtrsv",
         {std::vector<int>{4, 6}, std::vector<int>{},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{}, std::vector<int>{1}, 0, -1, 2,
          "oneapi::mkl::blas::column_major::trsv"}},
        {"cublasZtrsv",
         {std::vector<int>{4, 6}, std::vector<int>{},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{}, std::vector<int>{1}, 0, -1, 2,
          "oneapi::mkl::blas::column_major::trsv"}},
        {"cublasChemv",
         {std::vector<int>{3, 5, 8}, std::vector<int>{2, 7},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<int>{}, 0, -1, -1,
          "oneapi::mkl::blas::column_major::hemv"}},
        {"cublasZhemv",
         {std::vector<int>{3, 5, 8}, std::vector<int>{2, 7},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<int>{}, 0, -1, -1,
          "oneapi::mkl::blas::column_major::hemv"}},
        {"cublasChbmv",
         {std::vector<int>{4, 6, 9}, std::vector<int>{3, 8},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<int>{}, 0, -1, -1,
          "oneapi::mkl::blas::column_major::hbmv"}},
        {"cublasZhbmv",
         {std::vector<int>{4, 6, 9}, std::vector<int>{3, 8},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<int>{}, 0, -1, -1,
          "oneapi::mkl::blas::column_major::hbmv"}},
        {"cublasChpmv",
         {std::vector<int>{3, 4, 7}, std::vector<int>{2, 6},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<int>{}, 0, -1, -1,
          "oneapi::mkl::blas::column_major::hpmv"}},
        {"cublasZhpmv",
         {std::vector<int>{3, 4, 7}, std::vector<int>{2, 6},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<int>{}, 0, -1, -1,
          "oneapi::mkl::blas::column_major::hpmv"}},
        {"cublasCher",
         {std::vector<int>{3, 5}, std::vector<int>{},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{}, std::vector<int>{}, 0, -1, -1,
          "oneapi::mkl::blas::column_major::her"}},
        {"cublasZher",
         {std::vector<int>{3, 5}, std::vector<int>{},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{}, std::vector<int>{}, 0, -1, -1,
          "oneapi::mkl::blas::column_major::her"}},
        {"cublasCher2",
         {std::vector<int>{3, 5, 7}, std::vector<int>{2},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>"}, std::vector<int>{},
          0, -1, -1, "oneapi::mkl::blas::column_major::her2"}},
        {"cublasZher2",
         {std::vector<int>{3, 5, 7}, std::vector<int>{2},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>"}, std::vector<int>{},
          0, -1, -1, "oneapi::mkl::blas::column_major::her2"}},
        {"cublasChpr",
         {std::vector<int>{3, 5}, std::vector<int>{},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{}, std::vector<int>{}, 0, -1, -1,
          "oneapi::mkl::blas::column_major::hpr"}},
        {"cublasZhpr",
         {std::vector<int>{3, 5}, std::vector<int>{},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{}, std::vector<int>{}, 0, -1, -1,
          "oneapi::mkl::blas::column_major::hpr"}},
        {"cublasChpr2",
         {std::vector<int>{3, 5, 7}, std::vector<int>{2},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>"}, std::vector<int>{},
          0, -1, -1, "oneapi::mkl::blas::column_major::hpr2"}},
        {"cublasZhpr2",
         {std::vector<int>{3, 5, 7}, std::vector<int>{2},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>"}, std::vector<int>{},
          0, -1, -1, "oneapi::mkl::blas::column_major::hpr2"}},
        /*BLAS level 3 */
        {"cublasCgemm",
         {std::vector<int>{6, 8, 11}, std::vector<int>{5, 10},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<int>{0, 1}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::gemm"}},
        {"cublasZgemm",
         {std::vector<int>{6, 8, 11}, std::vector<int>{5, 10},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<int>{0, 1}, -1, -1, -1,
          "oneapi::mkl::blas::column_major::gemm"}},
        {"cublasCsyrk",
         {std::vector<int>{5, 8}, std::vector<int>{4, 7},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<int>{1}, 0, -1, -1,
          "oneapi::mkl::blas::column_major::syrk"}},
        {"cublasZsyrk",
         {std::vector<int>{5, 8}, std::vector<int>{4, 7},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<int>{1}, 0, -1, -1,
          "oneapi::mkl::blas::column_major::syrk"}},
        {"cublasCherk",
         {std::vector<int>{5, 8}, std::vector<int>{},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{}, std::vector<int>{1}, 0, -1, -1,
          "oneapi::mkl::blas::column_major::herk"}},
        {"cublasZherk",
         {std::vector<int>{5, 8}, std::vector<int>{},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{}, std::vector<int>{1}, 0, -1, -1,
          "oneapi::mkl::blas::column_major::herk"}},
        {"cublasCsyr2k",
         {std::vector<int>{5, 7, 10}, std::vector<int>{4, 9},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<int>{1}, 0, -1, -1,
          "oneapi::mkl::blas::column_major::syr2k"}},
        {"cublasZsyr2k",
         {std::vector<int>{5, 7, 10}, std::vector<int>{4, 9},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<int>{1}, 0, -1, -1,
          "oneapi::mkl::blas::column_major::syr2k"}},
        {"cublasCher2k",
         {std::vector<int>{5, 7, 10}, std::vector<int>{4},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>"}, std::vector<int>{1},
          0, -1, -1, "oneapi::mkl::blas::column_major::her2k"}},
        {"cublasZher2k",
         {std::vector<int>{5, 7, 10}, std::vector<int>{4},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>"}, std::vector<int>{1},
          0, -1, -1, "oneapi::mkl::blas::column_major::her2k"}},
        {"cublasCsymm",
         {std::vector<int>{5, 7, 10}, std::vector<int>{4, 9},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<int>{}, 1, 0, -1,
          "oneapi::mkl::blas::column_major::symm"}},
        {"cublasZsymm",
         {std::vector<int>{5, 7, 10}, std::vector<int>{4, 9},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<int>{}, 1, 0, -1,
          "oneapi::mkl::blas::column_major::symm"}},
        {"cublasChemm",
         {std::vector<int>{5, 7, 10}, std::vector<int>{4, 9},
          std::vector<std::string>{"std::complex<float>", "std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<int>{}, 1, 0, -1,
          "oneapi::mkl::blas::column_major::hemm"}},
        {"cublasZhemm",
         {std::vector<int>{5, 7, 10}, std::vector<int>{4, 9},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<int>{}, 1, 0, -1,
          "oneapi::mkl::blas::column_major::hemm"}},
        {"cublasCtrsm",
         {std::vector<int>{7, 9}, std::vector<int>{6},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>"}, std::vector<int>{2},
          1, 0, 3, "oneapi::mkl::blas::column_major::trsm"}},
        {"cublasZtrsm",
         {std::vector<int>{7, 9}, std::vector<int>{6},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>"}, std::vector<int>{2},
          1, 0, 3, "oneapi::mkl::blas::column_major::trsm"}},
        {"cublasCtrmm",
         {std::vector<int>{7, 9}, std::vector<int>{6},
          std::vector<std::string>{"std::complex<float>",
                                   "std::complex<float>"},
          std::vector<std::string>{"std::complex<float>"}, std::vector<int>{2},
          1, 0, 3, "oneapi::mkl::blas::column_major::trmm"}},
        {"cublasZtrmm",
         {std::vector<int>{7, 9}, std::vector<int>{6},
          std::vector<std::string>{"std::complex<double>",
                                   "std::complex<double>"},
          std::vector<std::string>{"std::complex<double>"}, std::vector<int>{2},
          1, 0, 3, "oneapi::mkl::blas::column_major::trmm"}},
    };

const std::set<std::string> MapNames::MustSyncBLASFunc{
    "cublasIsamax_v2", "cublasIdamax_v2", "cublasIcamax_v2", "cublasIzamax_v2",
    "cublasIsamin_v2", "cublasIdamin_v2", "cublasIcamin_v2", "cublasIzamin_v2"};

const std::map<std::string, std::pair<std::string, int>>
    MapNames::MaySyncBLASFunc{{"cublasSasum_v2", {"float", 4}},
                              {"cublasDasum_v2", {"double", 4}},
                              {"cublasScasum_v2", {"float", 4}},
                              {"cublasDzasum_v2", {"double", 4}},
                              {"cublasSdot_v2", {"float", 6}},
                              {"cublasDdot_v2", {"double", 6}},
                              {"cublasCdotu_v2", {"std::complex<float>", 6}},
                              {"cublasCdotc_v2", {"std::complex<float>", 6}},
                              {"cublasZdotu_v2", {"std::complex<double>", 6}},
                              {"cublasZdotc_v2", {"std::complex<double>", 6}},
                              {"cublasSnrm2_v2", {"float", 4}},
                              {"cublasDnrm2_v2", {"double", 4}},
                              {"cublasScnrm2_v2", {"float", 4}},
                              {"cublasDznrm2_v2", {"double", 4}}};

// This map is only used for non-usm.
const std::map<std::string, std::map<int, std::string>>
    MapNames::MaySyncBLASFuncWithMultiArgs{
        {"cublasSrotg_v2",
         {{1, "float"}, {2, "float"}, {3, "float"}, {4, "float"}}},
        {"cublasDrotg_v2",
         {{1, "double"}, {2, "double"}, {3, "double"}, {4, "double"}}},
        {"cublasCrotg_v2",
         {{1, "std::complex<float>"},
          {2, "std::complex<float>"},
          {3, "float"},
          {4, "std::complex<float>"}}},
        {"cublasZrotg_v2",
         {{1, "std::complex<double>"},
          {2, "std::complex<double>"},
          {3, "double"},
          {4, "std::complex<double>"}}},
        {"cublasSrotmg_v2",
         {{1, "float"}, {2, "float"}, {3, "float"}, {5, "float"}}},
        {"cublasDrotmg_v2",
         {{1, "double"}, {2, "double"}, {3, "double"}, {5, "double"}}}};

// SOLVER functions names and parameters replacements information mapping
const std::map<std::string, MapNames::SOLVERFuncReplInfo>
    MapNames::SOLVERFuncReplInfoMap{
        {"cusolverDnSpotrf_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{3, 5},
             "oneapi::mkl::lapack::potrf_scratchpad_size<float>")},
        {"cusolverDnDpotrf_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{3, 5},
             "oneapi::mkl::lapack::potrf_scratchpad_size<double>")},
        {"cusolverDnCpotrf_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{3, 5},
             "oneapi::mkl::lapack::potrf_scratchpad_size<std::complex<float>"
             ">")},
        {"cusolverDnZpotrf_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{3, 5},
             "oneapi::mkl::lapack::potrf_scratchpad_size<std::complex<double>"
             ">")},
        {"cusolverDnSgetrf_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{3, 5},
             "oneapi::mkl::lapack::getrf_scratchpad_size<float>")},
        {"cusolverDnDgetrf_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{3, 5},
             "oneapi::mkl::lapack::getrf_scratchpad_size<double>")},
        {"cusolverDnCgetrf_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{3, 5},
             "oneapi::mkl::lapack::getrf_scratchpad_size<std::complex<float>"
             ">")},
        {"cusolverDnZgetrf_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{3, 5},
             "oneapi::mkl::lapack::getrf_scratchpad_size<std::complex<double>"
             ">")},
        {"cusolverDnSgeqrf_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{3, 5},
             "oneapi::mkl::lapack::geqrf_scratchpad_size<float>")},
        {"cusolverDnDgeqrf_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{3, 5},
             "oneapi::mkl::lapack::geqrf_scratchpad_size<double>")},
        {"cusolverDnCgeqrf_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{3, 5},
             "oneapi::mkl::lapack::geqrf_scratchpad_size<std::complex<float>"
             ">")},
        {"cusolverDnZgeqrf_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{3, 5},
             "oneapi::mkl::lapack::geqrf_scratchpad_size<std::complex<double>"
             ">")},
        {"cusolverDnSormqr_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{6, 8, 9, 11},
             "oneapi::mkl::lapack::ormqr_scratchpad_size<float>")},
        {"cusolverDnDormqr_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{6, 8, 9, 11},
             "oneapi::mkl::lapack::ormqr_scratchpad_size<double>")},
        {"cusolverDnCunmqr_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{6, 8, 9, 11},
             "oneapi::mkl::lapack::unmqr_scratchpad_size<std::complex<float>"
             ">")},
        {"cusolverDnZunmqr_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{6, 8, 9, 11},
             "oneapi::mkl::lapack::unmqr_scratchpad_size<std::complex<double>"
             ">")},
        {"cusolverDnSorgqr_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{4, 6, 7},
             "oneapi::mkl::lapack::orgqr_scratchpad_size<float>")},
        {"cusolverDnDorgqr_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{4, 6, 7},
             "oneapi::mkl::lapack::orgqr_scratchpad_size<double>")},
        {"cusolverDnCungqr_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{4, 6, 7},
             "oneapi::mkl::lapack::ungqr_scratchpad_size<std::complex<float>"
             ">")},
        {"cusolverDnZungqr_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{4, 6, 7},
             "oneapi::mkl::lapack::ungqr_scratchpad_size<std::complex<double>"
             ">")},
        {"cusolverDnSsytrd_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{3, 5, 6, 7, 8},
             "oneapi::mkl::lapack::sytrd_scratchpad_size<float>")},
        {"cusolverDnDsytrd_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{3, 5, 6, 7, 8},
             "oneapi::mkl::lapack::sytrd_scratchpad_size<double>")},
        {"cusolverDnChetrd_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{3, 5, 6, 7, 8},
             "oneapi::mkl::lapack::hetrd_scratchpad_size<std::complex<float>"
             ">")},
        {"cusolverDnZhetrd_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{3, 5, 6, 7, 8},
             "oneapi::mkl::lapack::hetrd_scratchpad_size<std::complex<double>"
             ">")},
        {"cusolverDnSsytrf_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnRedundantAndMissed(
             true, std::vector<int>{2, 4}, std::vector<int>{1},
             std::vector<int>{1}, std::vector<bool>{false},
             std::vector<std::string>{"oneapi::mkl::uplo"},
             std::vector<std::string>{"uplo_ct_mkl_upper_lower"},
             "oneapi::mkl::lapack::sytrf_scratchpad_size<float>")},
        {"cusolverDnDsytrf_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnRedundantAndMissed(
             true, std::vector<int>{2, 4}, std::vector<int>{1},
             std::vector<int>{1}, std::vector<bool>{false},
             std::vector<std::string>{"oneapi::mkl::uplo"},
             std::vector<std::string>{"uplo_ct_mkl_upper_lower"},
             "oneapi::mkl::lapack::sytrf_scratchpad_size<double>")},
        {"cusolverDnCsytrf_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnRedundantAndMissed(
             true, std::vector<int>{2, 4}, std::vector<int>{1},
             std::vector<int>{1}, std::vector<bool>{false},
             std::vector<std::string>{"oneapi::mkl::uplo"},
             std::vector<std::string>{"uplo_ct_mkl_upper_lower"},
             "oneapi::mkl::lapack::sytrf_scratchpad_size<std::complex<float>"
             ">")},
        {"cusolverDnZsytrf_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnRedundantAndMissed(
             true, std::vector<int>{2, 4}, std::vector<int>{1},
             std::vector<int>{1}, std::vector<bool>{false},
             std::vector<std::string>{"oneapi::mkl::uplo"},
             std::vector<std::string>{"uplo_ct_mkl_upper_lower"},
             "oneapi::mkl::lapack::sytrf_scratchpad_size<std::complex<double>"
             ">")},
        {"cusolverDnSgebrd_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnRedundantAndMissed(
             true, std::vector<int>{3}, std::vector<int>{3},
             std::vector<int>{3}, std::vector<bool>{false},
             std::vector<std::string>{"std::int64_t"},
             std::vector<std::string>{"lda_ct"},
             "oneapi::mkl::lapack::gebrd_scratchpad_size<float>")},
        {"cusolverDnDgebrd_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnRedundantAndMissed(
             true, std::vector<int>{3}, std::vector<int>{3},
             std::vector<int>{3}, std::vector<bool>{false},
             std::vector<std::string>{"std::int64_t"},
             std::vector<std::string>{"lda_ct"},
             "oneapi::mkl::lapack::gebrd_scratchpad_size<double>")},
        {"cusolverDnCgebrd_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnRedundantAndMissed(
             true, std::vector<int>{3}, std::vector<int>{3},
             std::vector<int>{3}, std::vector<bool>{false},
             std::vector<std::string>{"std::int64_t"},
             std::vector<std::string>{"lda_ct"},
             "oneapi::mkl::lapack::gebrd_scratchpad_size<std::complex<float>"
             ">")},
        {"cusolverDnZgebrd_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnRedundantAndMissed(
             true, std::vector<int>{3}, std::vector<int>{3},
             std::vector<int>{3}, std::vector<bool>{false},
             std::vector<std::string>{"std::int64_t"},
             std::vector<std::string>{"lda_ct"},
             "oneapi::mkl::lapack::gebrd_scratchpad_size<std::complex<double>"
             ">")},
        {"cusolverDnSorgbr_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnRedundantAndCast(
             true, std::vector<int>{5, 7, 8}, std::vector<int>{1},
             std::vector<std::string>{"oneapi::mkl::generate"},
             "oneapi::mkl::lapack::orgbr_scratchpad_size<float>")},
        {"cusolverDnDorgbr_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnRedundantAndCast(
             true, std::vector<int>{5, 7, 8}, std::vector<int>{1},
             std::vector<std::string>{"oneapi::mkl::generate"},
             "oneapi::mkl::lapack::orgbr_scratchpad_size<double>")},
        {"cusolverDnCungbr_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnRedundantAndCast(
             true, std::vector<int>{5, 7, 8}, std::vector<int>{1},
             std::vector<std::string>{"oneapi::mkl::generate"},
             "oneapi::mkl::lapack::ungbr_scratchpad_size<std::complex<float>"
             ">")},
        {"cusolverDnZungbr_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnRedundantAndCast(
             true, std::vector<int>{5, 7, 8}, std::vector<int>{1},
             std::vector<std::string>{"oneapi::mkl::generate"},
             "oneapi::mkl::lapack::ungbr_scratchpad_size<std::complex<double>"
             ">")},
        {"cusolverDnSormtr_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{6, 8, 9, 11},
             "oneapi::mkl::lapack::ormtr_scratchpad_size<float>")},
        {"cusolverDnDormtr_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{6, 8, 9, 11},
             "oneapi::mkl::lapack::ormtr_scratchpad_size<double>")},
        {"cusolverDnCunmtr_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{6, 8, 9, 11},
             "oneapi::mkl::lapack::unmtr_scratchpad_size<std::complex<float>"
             ">")},
        {"cusolverDnZunmtr_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{6, 8, 9, 11},
             "oneapi::mkl::lapack::unmtr_scratchpad_size<std::complex<double>"
             ">")},
        {"cusolverDnSorgtr_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{3, 5, 6},
             "oneapi::mkl::lapack::orgtr_scratchpad_size<float>")},
        {"cusolverDnDorgtr_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{3, 5, 6},
             "oneapi::mkl::lapack::orgtr_scratchpad_size<double>")},
        {"cusolverDnCungtr_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{3, 5, 6},
             "oneapi::mkl::lapack::ungtr_scratchpad_size<std::complex<float>"
             ">")},
        {"cusolverDnZungtr_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{3, 5, 6},
             "oneapi::mkl::lapack::ungtr_scratchpad_size<std::complex<double>"
             ">")},
        {"cusolverDnSgesvd_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnCopyRedundantAndMissed(
             true, std::vector<int>{3}, std::vector<int>{1, 1, 2},
             std::vector<int>{3, 3, 3}, std::vector<int>{1, 2},
             std::vector<int>{1, 1}, std::vector<bool>{false, false},
             std::vector<std::string>{"oneapi::mkl::jobsvd",
                                      "oneapi::mkl::jobsvd"},
             std::vector<std::string>{"job_ct_mkl_jobu", "job_ct_mkl_jobvt"},
             "oneapi::mkl::lapack::gesvd_scratchpad_size<float>")},
        {"cusolverDnDgesvd_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnCopyRedundantAndMissed(
             true, std::vector<int>{3}, std::vector<int>{1, 1, 2},
             std::vector<int>{3, 3, 3}, std::vector<int>{1, 2},
             std::vector<int>{1, 1}, std::vector<bool>{false, false},
             std::vector<std::string>{"oneapi::mkl::jobsvd",
                                      "oneapi::mkl::jobsvd"},
             std::vector<std::string>{"job_ct_mkl_jobu", "job_ct_mkl_jobvt"},
             "oneapi::mkl::lapack::gesvd_scratchpad_size<double>")},
        {"cusolverDnCgesvd_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnCopyRedundantAndMissed(
             true, std::vector<int>{3}, std::vector<int>{1, 1, 2},
             std::vector<int>{3, 3, 3}, std::vector<int>{1, 2},
             std::vector<int>{1, 1}, std::vector<bool>{false, false},
             std::vector<std::string>{"oneapi::mkl::jobsvd",
                                      "oneapi::mkl::jobsvd"},
             std::vector<std::string>{"job_ct_mkl_jobu", "job_ct_mkl_jobvt"},
             "oneapi::mkl::lapack::gesvd_scratchpad_size<std::complex<float>"
             ">")},
        {"cusolverDnZgesvd_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnCopyRedundantAndMissed(
             true, std::vector<int>{3}, std::vector<int>{1, 1, 2},
             std::vector<int>{3, 3, 3}, std::vector<int>{1, 2},
             std::vector<int>{1, 1}, std::vector<bool>{false, false},
             std::vector<std::string>{"oneapi::mkl::jobsvd",
                                      "oneapi::mkl::jobsvd"},
             std::vector<std::string>{"job_ct_mkl_jobu", "job_ct_mkl_jobvt"},
             "oneapi::mkl::lapack::gesvd_scratchpad_size<std::complex<double>"
             ">")},
        {"cusolverDnSpotri_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{3, 5},
             "oneapi::mkl::lapack::potri_scratchpad_size<float>")},
        {"cusolverDnDpotri_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{3, 5},
             "oneapi::mkl::lapack::potri_scratchpad_size<double>")},
        {"cusolverDnCpotri_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{3, 5},
             "oneapi::mkl::lapack::potri_scratchpad_size<std::complex<float>"
             ">")},
        {"cusolverDnZpotri_bufferSize",
         MapNames::SOLVERFuncReplInfo::migrateReturnAndRedundant(
             true, std::vector<int>{3, 5},
             "oneapi::mkl::lapack::potri_scratchpad_size<std::complex<double>"
             ">")},
        {"cusolverDnSpotrf",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{3, 5}, std::vector<std::string>{"float", "float"},
             std::vector<int>{7}, "oneapi::mkl::lapack::potrf")},
        {"cusolverDnDpotrf",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{3, 5},
             std::vector<std::string>{"double", "double"}, std::vector<int>{7},
             "oneapi::mkl::lapack::potrf")},
        {"cusolverDnCpotrf",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{3, 5},
             std::vector<std::string>{"std::complex<float>",
                                      "std::complex<float>"},
             std::vector<int>{7}, "oneapi::mkl::lapack::potrf")},
        {"cusolverDnZpotrf",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{3, 5},
             std::vector<std::string>{"std::complex<double>",
                                      "std::complex<double>"},
             std::vector<int>{7}, "oneapi::mkl::lapack::potrf")},
        {"cusolverDnSpotrs",
         MapNames::SOLVERFuncReplInfo::migrateBufferRedundantAndWS(
             std::vector<int>{4, 6}, std::vector<std::string>{"float", "float"},
             std::vector<int>{8}, std::vector<int>{7},
             std::vector<int>{0, 1, 2, 3, 5, 7},
             "oneapi::mkl::lapack::potrs_scratchpad_size<float>",
             "oneapi::mkl::lapack::potrs")},
        {"cusolverDnDpotrs",
         MapNames::SOLVERFuncReplInfo::migrateBufferRedundantAndWS(
             std::vector<int>{4, 6},
             std::vector<std::string>{"double", "double"}, std::vector<int>{8},
             std::vector<int>{7}, std::vector<int>{0, 1, 2, 3, 5, 7},
             "oneapi::mkl::lapack::potrs_scratchpad_size<double>",
             "oneapi::mkl::lapack::potrs")},
        {"cusolverDnCpotrs",
         MapNames::SOLVERFuncReplInfo::migrateBufferRedundantAndWS(
             std::vector<int>{4, 6},
             std::vector<std::string>{"std::complex<float>",
                                      "std::complex<float>"},
             std::vector<int>{8}, std::vector<int>{7},
             std::vector<int>{0, 1, 2, 3, 5, 7},
             "oneapi::mkl::lapack::potrs_scratchpad_size<std::complex<float>>",
             "oneapi::mkl::lapack::potrs")},
        {"cusolverDnZpotrs",
         MapNames::SOLVERFuncReplInfo::migrateBufferRedundantAndWS(
             std::vector<int>{4, 6},
             std::vector<std::string>{"std::complex<double>",
                                      "std::complex<double>"},
             std::vector<int>{8}, std::vector<int>{7},
             std::vector<int>{0, 1, 2, 3, 5, 7},
             "oneapi::mkl::lapack::potrs_scratchpad_size<std::complex<double>>",
             "oneapi::mkl::lapack::potrs")},
        {"cusolverDnSpotri",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{3, 5}, std::vector<std::string>{"float", "float"},
             std::vector<int>{7}, "oneapi::mkl::lapack::potri")},
        {"cusolverDnDpotri",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{3, 5},
             std::vector<std::string>{"double", "double"}, std::vector<int>{7},
             "oneapi::mkl::lapack::potri")},
        {"cusolverDnCpotri",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{3, 5},
             std::vector<std::string>{"std::complex<float>",
                                      "std::complex<float>"},
             std::vector<int>{7}, "oneapi::mkl::lapack::potri")},
        {"cusolverDnZpotri",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{3, 5},
             std::vector<std::string>{"std::complex<double>",
                                      "std::complex<double>"},
             std::vector<int>{7}, "oneapi::mkl::lapack::potri")},
        {"cusolverDnSgetrf",
         MapNames::SOLVERFuncReplInfo::migrateBufferMoveRedundantAndWSS(
             std::vector<int>{3, 5, 6},
             std::vector<std::string>{"float", "float", "int"},
             std::vector<int>{7}, std::vector<int>{6}, std::vector<int>{5},
             std::vector<int>{5}, std::vector<int>{0, 1, 2, 4},
             "oneapi::mkl::lapack::getrf_scratchpad_size<float>",
             "oneapi::mkl::lapack::getrf")},
        {"cusolverDnDgetrf",
         MapNames::SOLVERFuncReplInfo::migrateBufferMoveRedundantAndWSS(
             std::vector<int>{3, 5, 6},
             std::vector<std::string>{"double", "double", "int"},
             std::vector<int>{7}, std::vector<int>{6}, std::vector<int>{5},
             std::vector<int>{5}, std::vector<int>{0, 1, 2, 4},
             "oneapi::mkl::lapack::getrf_scratchpad_size<double>",
             "oneapi::mkl::lapack::getrf")},
        {"cusolverDnCgetrf",
         MapNames::SOLVERFuncReplInfo::migrateBufferMoveRedundantAndWSS(
             std::vector<int>{3, 5, 6},
             std::vector<std::string>{"std::complex<float>",
                                      "std::complex<float>", "int"},
             std::vector<int>{7}, std::vector<int>{6}, std::vector<int>{5},
             std::vector<int>{5}, std::vector<int>{0, 1, 2, 4},
             "oneapi::mkl::lapack::getrf_scratchpad_size<std::complex<float>>",
             "oneapi::mkl::lapack::getrf")},
        {"cusolverDnZgetrf",
         MapNames::SOLVERFuncReplInfo::migrateBufferMoveRedundantAndWSS(
             std::vector<int>{3, 5, 6},
             std::vector<std::string>{"std::complex<double>",
                                      "std::complex<double>", "int"},
             std::vector<int>{7}, std::vector<int>{6}, std::vector<int>{5},
             std::vector<int>{5}, std::vector<int>{0, 1, 2, 4},
             "oneapi::mkl::lapack::getrf_scratchpad_size<std::complex<double>>",
             "oneapi::mkl::lapack::getrf")},
        {"cusolverDnSgetrs",
         MapNames::SOLVERFuncReplInfo::migrateBufferRedundantAndWS(
             std::vector<int>{4, 6, 7},
             std::vector<std::string>{"float", "int", "float"},
             std::vector<int>{9}, std::vector<int>{8},
             std::vector<int>{0, 1, 2, 3, 5, 8},
             "oneapi::mkl::lapack::getrs_scratchpad_size<float>",
             "oneapi::mkl::lapack::getrs")},
        {"cusolverDnDgetrs",
         MapNames::SOLVERFuncReplInfo::migrateBufferRedundantAndWS(
             std::vector<int>{4, 6, 7},
             std::vector<std::string>{"double", "int", "double"},
             std::vector<int>{9}, std::vector<int>{8},
             std::vector<int>{0, 1, 2, 3, 5, 8},
             "oneapi::mkl::lapack::getrs_scratchpad_size<double>",
             "oneapi::mkl::lapack::getrs")},
        {"cusolverDnCgetrs",
         MapNames::SOLVERFuncReplInfo::migrateBufferRedundantAndWS(
             std::vector<int>{4, 6, 7},
             std::vector<std::string>{"std::complex<float>", "int",
                                      "std::complex<float>"},
             std::vector<int>{9}, std::vector<int>{8},
             std::vector<int>{0, 1, 2, 3, 5, 8},
             "oneapi::mkl::lapack::getrs_scratchpad_size<std::complex<float>>",
             "oneapi::mkl::lapack::getrs")},
        {"cusolverDnZgetrs",
         MapNames::SOLVERFuncReplInfo::migrateBufferRedundantAndWS(
             std::vector<int>{4, 6, 7},
             std::vector<std::string>{"std::complex<double>", "int",
                                      "std::complex<double>"},
             std::vector<int>{9}, std::vector<int>{8},
             std::vector<int>{0, 1, 2, 3, 5, 8},
             "oneapi::mkl::lapack::getrs_scratchpad_size<std::complex<double>>",
             "oneapi::mkl::lapack::getrs")},
        {"cusolverDnSgeqrf",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{3, 5, 6},
             std::vector<std::string>{"float", "float", "float", "int"},
             std::vector<int>{8}, "oneapi::mkl::lapack::geqrf")},
        {"cusolverDnDgeqrf",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{3, 5, 6},
             std::vector<std::string>{"double", "double", "double", "int"},
             std::vector<int>{8}, "oneapi::mkl::lapack::geqrf")},
        {"cusolverDnCgeqrf",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{3, 5, 6},
             std::vector<std::string>{"std::complex<float>",
                                      "std::complex<float>",
                                      "std::complex<float>", "int"},
             std::vector<int>{8}, "oneapi::mkl::lapack::geqrf")},
        {"cusolverDnZgeqrf",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{3, 5, 6},
             std::vector<std::string>{"std::complex<double>",
                                      "std::complex<double>",
                                      "std::complex<double>", "int"},
             std::vector<int>{8}, "oneapi::mkl::lapack::geqrf")},
        {"cusolverDnSormqr",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{6, 8, 9, 11},
             std::vector<std::string>{"float", "float", "float", "float"},
             std::vector<int>{13}, "oneapi::mkl::lapack::ormqr")},
        {"cusolverDnDormqr",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{6, 8, 9, 11},
             std::vector<std::string>{
                 "double",
                 "double",
                 "double",
                 "double",
             },
             std::vector<int>{13}, "oneapi::mkl::lapack::ormqr")},
        {"cusolverDnCunmqr",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{6, 8, 9, 11},
             std::vector<std::string>{
                 "std::complex<float>", "std::complex<float>",
                 "std::complex<float>", "std::complex<float>"},
             std::vector<int>{13}, "oneapi::mkl::lapack::unmqr")},
        {"cusolverDnZunmqr",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{6, 8, 9, 11},
             std::vector<std::string>{
                 "std::complex<double>", "std::complex<double>",
                 "std::complex<double>", "std::complex<double>"},
             std::vector<int>{13}, "oneapi::mkl::lapack::unmqr")},
        {"cusolverDnSorgqr",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{4, 6, 7},
             std::vector<std::string>{"float", "float", "float"},
             std::vector<int>{9}, "oneapi::mkl::lapack::orgqr")},
        {"cusolverDnDorgqr",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{4, 6, 7},
             std::vector<std::string>{"double", "double", "double"},
             std::vector<int>{9}, "oneapi::mkl::lapack::orgqr")},
        {"cusolverDnCungqr",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{4, 6, 7},
             std::vector<std::string>{"std::complex<float>",
                                      "std::complex<float>",
                                      "std::complex<float>"},
             std::vector<int>{9}, "oneapi::mkl::lapack::ungqr")},
        {"cusolverDnZungqr",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{4, 6, 7},
             std::vector<std::string>{"std::complex<double>",
                                      "std::complex<double>",
                                      "std::complex<double>"},
             std::vector<int>{9}, "oneapi::mkl::lapack::ungqr")},
        {"cusolverDnSsytrf",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{3, 5, 6},
             std::vector<std::string>{"float", "int", "float"},
             std::vector<int>{8}, "oneapi::mkl::lapack::sytrf")},
        {"cusolverDnDsytrf",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{3, 5, 6},
             std::vector<std::string>{"double", "int", "double"},
             std::vector<int>{8}, "oneapi::mkl::lapack::sytrf")},
        {"cusolverDnCsytrf",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{3, 5, 6},
             std::vector<std::string>{"std::complex<float>", "int",
                                      "std::complex<float>"},
             std::vector<int>{8}, "oneapi::mkl::lapack::sytrf")},
        {"cusolverDnZsytrf",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{3, 5, 6},
             std::vector<std::string>{"std::complex<double>", "int",
                                      "std::complex<double>"},
             std::vector<int>{8}, "oneapi::mkl::lapack::sytrf")},
        {"cusolverDnSgebrd",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{3, 5, 6, 7, 8, 9},
             std::vector<std::string>{"float", "float", "float", "float",
                                      "float", "float"},
             std::vector<int>{11}, "oneapi::mkl::lapack::gebrd")},
        {"cusolverDnDgebrd",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{3, 5, 6, 7, 8, 9},
             std::vector<std::string>{"double", "double", "double", "double",
                                      "double", "double"},
             std::vector<int>{11}, "oneapi::mkl::lapack::gebrd")},
        {"cusolverDnCgebrd",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{3, 5, 6, 7, 8, 9},
             std::vector<std::string>{
                 "std::complex<float>", "float", "float", "std::complex<float>",
                 "std::complex<float>", "std::complex<float>"},
             std::vector<int>{11}, "oneapi::mkl::lapack::gebrd")},
        {"cusolverDnZgebrd",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{3, 5, 6, 7, 8, 9},
             std::vector<std::string>{"std::complex<double>", "double",
                                      "double", "std::complex<double>",
                                      "std::complex<double>",
                                      "std::complex<double>"},
             std::vector<int>{11}, "oneapi::mkl::lapack::gebrd")},
        {"cusolverDnSorgbr",
         MapNames::SOLVERFuncReplInfo::migrateBufferRedundantAndCast(
             std::vector<int>{5, 7, 8},
             std::vector<std::string>{"float", "float", "float"},
             std::vector<int>{10}, std::vector<int>{1},
             std::vector<std::string>{"oneapi::mkl::generate"},
             "oneapi::mkl::lapack::orgbr")},
        {"cusolverDnDorgbr",
         MapNames::SOLVERFuncReplInfo::migrateBufferRedundantAndCast(
             std::vector<int>{5, 7, 8},
             std::vector<std::string>{"double", "double", "double"},
             std::vector<int>{10}, std::vector<int>{1},
             std::vector<std::string>{"oneapi::mkl::generate"},
             "oneapi::mkl::lapack::orgbr")},
        {"cusolverDnCungbr",
         MapNames::SOLVERFuncReplInfo::migrateBufferRedundantAndCast(
             std::vector<int>{5, 7, 8},
             std::vector<std::string>{"std::complex<float>",
                                      "std::complex<float>",
                                      "std::complex<float>"},
             std::vector<int>{10}, std::vector<int>{1},
             std::vector<std::string>{"oneapi::mkl::generate"},
             "oneapi::mkl::lapack::ungbr")},
        {"cusolverDnZungbr",
         MapNames::SOLVERFuncReplInfo::migrateBufferRedundantAndCast(
             std::vector<int>{5, 7, 8},
             std::vector<std::string>{"std::complex<double>",
                                      "std::complex<double>",
                                      "std::complex<double>"},
             std::vector<int>{10}, std::vector<int>{1},
             std::vector<std::string>{"oneapi::mkl::generate"},
             "oneapi::mkl::lapack::ungbr")},
        {"cusolverDnSsytrd",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{3, 5, 6, 7, 8},
             std::vector<std::string>{"float", "float", "float", "float",
                                      "float"},
             std::vector<int>{10}, "oneapi::mkl::lapack::sytrd")},
        {"cusolverDnDsytrd",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{3, 5, 6, 7, 8},
             std::vector<std::string>{"double", "double", "double", "double",
                                      "double"},
             std::vector<int>{10}, "oneapi::mkl::lapack::sytrd")},
        {"cusolverDnChetrd",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{3, 5, 6, 7, 8},
             std::vector<std::string>{"std::complex<float>", "float", "float",
                                      "std::complex<float>",
                                      "std::complex<float>"},
             std::vector<int>{10}, "oneapi::mkl::lapack::hetrd")},
        {"cusolverDnZhetrd",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{3, 5, 6, 7, 8},
             std::vector<std::string>{"std::complex<double>", "double",
                                      "double", "std::complex<double>",
                                      "std::complex<double>"},
             std::vector<int>{10}, "oneapi::mkl::lapack::hetrd")},
        {"cusolverDnSormtr",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{6, 8, 9, 11},
             std::vector<std::string>{"float", "float", "float", "float"},
             std::vector<int>{13}, "oneapi::mkl::lapack::ormtr")},
        {"cusolverDnDormtr",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{6, 8, 9, 11},
             std::vector<std::string>{"double", "double", "double", "double"},
             std::vector<int>{13}, "oneapi::mkl::lapack::ormtr")},
        {"cusolverDnCunmtr",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{6, 8, 9, 11},
             std::vector<std::string>{
                 "std::complex<float>", "std::complex<float>",
                 "std::complex<float>", "std::complex<float>"},
             std::vector<int>{13}, "oneapi::mkl::lapack::unmtr")},
        {"cusolverDnZunmtr",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{6, 8, 9, 11},
             std::vector<std::string>{
                 "std::complex<double>", "std::complex<double>",
                 "std::complex<double>", "std::complex<double>"},
             std::vector<int>{13}, "oneapi::mkl::lapack::unmtr")},
        {"cusolverDnSorgtr",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{3, 5, 6},
             std::vector<std::string>{"float", "float", "float"},
             std::vector<int>{8}, "oneapi::mkl::lapack::orgtr")},
        {"cusolverDnDorgtr",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{3, 5, 6},
             std::vector<std::string>{"double", "double", "double"},
             std::vector<int>{8}, "oneapi::mkl::lapack::orgtr")},
        {"cusolverDnCungtr",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{3, 5, 6},
             std::vector<std::string>{"std::complex<float>",
                                      "std::complex<float>",
                                      "std::complex<float>"},
             std::vector<int>{8}, "oneapi::mkl::lapack::ungtr")},
        {"cusolverDnZungtr",
         MapNames::SOLVERFuncReplInfo::migrateBufferAndRedundant(
             std::vector<int>{3, 5, 6},
             std::vector<std::string>{"std::complex<double>",
                                      "std::complex<double>",
                                      "std::complex<double>"},
             std::vector<int>{8}, "oneapi::mkl::lapack::ungtr")},
        {"cusolverDnSgesvd",
         MapNames::SOLVERFuncReplInfo::migrateBufferRedundantAndCast(
             std::vector<int>{5, 7, 8, 10, 12},
             std::vector<std::string>{"float", "float", "float", "float",
                                      "float"},
             std::vector<int>{14, 15}, std::vector<int>{1, 2},
             std::vector<std::string>{"oneapi::mkl::jobsvd",
                                      "oneapi::mkl::jobsvd"},
             "oneapi::mkl::lapack::gesvd")},
        {"cusolverDnDgesvd",
         MapNames::SOLVERFuncReplInfo::migrateBufferRedundantAndCast(
             std::vector<int>{5, 7, 8, 10, 12},
             std::vector<std::string>{"double", "double", "double", "double",
                                      "double"},
             std::vector<int>{14, 15}, std::vector<int>{1, 2},
             std::vector<std::string>{"oneapi::mkl::jobsvd",
                                      "oneapi::mkl::jobsvd"},
             "oneapi::mkl::lapack::gesvd")},
        {"cusolverDnCgesvd",
         MapNames::SOLVERFuncReplInfo::migrateBufferRedundantAndCast(
             std::vector<int>{5, 7, 8, 10, 12},
             std::vector<std::string>{
                 "std::complex<float>", "float", "std::complex<float>",
                 "std::complex<float>", "std::complex<float>"},
             std::vector<int>{14, 15}, std::vector<int>{1, 2},
             std::vector<std::string>{"oneapi::mkl::jobsvd",
                                      "oneapi::mkl::jobsvd"},
             "oneapi::mkl::lapack::gesvd")},
        {"cusolverDnZgesvd",
         MapNames::SOLVERFuncReplInfo::migrateBufferRedundantAndCast(
             std::vector<int>{5, 7, 8, 10, 12},
             std::vector<std::string>{
                 "std::complex<double>", "double", "std::complex<double>",
                 "std::complex<double>", "std::complex<double>"},
             std::vector<int>{14, 15}, std::vector<int>{1, 2},
             std::vector<std::string>{"oneapi::mkl::jobsvd",
                                      "oneapi::mkl::jobsvd"},
             "oneapi::mkl::lapack::gesvd")},
    };

// Random Engine Type mapping
const MapNames::MapTy MapNames::RandomEngineTypeMap{
    {"CURAND_RNG_PSEUDO_DEFAULT", "oneapi::mkl::rng::philox4x32x10"},
    {"CURAND_RNG_PSEUDO_XORWOW", "oneapi::mkl::rng::philox4x32x10"},
    {"CURAND_RNG_PSEUDO_MRG32K3A", "oneapi::mkl::rng::mrg32k3a"},
    {"CURAND_RNG_PSEUDO_MTGP32", "oneapi::mkl::rng::mt2203"},
    {"CURAND_RNG_PSEUDO_MT19937", "oneapi::mkl::rng::mt19937"},
    {"CURAND_RNG_PSEUDO_PHILOX4_32_10", "oneapi::mkl::rng::philox4x32x10"},
    {"CURAND_RNG_QUASI_DEFAULT", "oneapi::mkl::rng::sobol"},
    {"CURAND_RNG_QUASI_SOBOL32", "oneapi::mkl::rng::sobol"},
    {"CURAND_RNG_QUASI_SCRAMBLED_SOBOL32", "oneapi::mkl::rng::sobol"},
    {"CURAND_RNG_QUASI_SOBOL64", "oneapi::mkl::rng::sobol"},
    {"CURAND_RNG_QUASI_SCRAMBLED_SOBOL64", "oneapi::mkl::rng::sobol"},
};

// Device Random Generator Type mapping
const MapNames::MapTy MapNames::DeviceRandomGeneratorTypeMap{
    {"curandStateXORWOW_t", "dpct::rng::device::rng_generator<oneapi::"
                            "mkl::rng::device::philox4x32x10<1>>"},
    {"curandStateXORWOW", "dpct::rng::device::rng_generator<oneapi::"
                          "mkl::rng::device::philox4x32x10<1>>"},
    {"curandState_t", "dpct::rng::device::rng_generator<oneapi::mkl::"
                      "rng::device::philox4x32x10<1>>"},
    {"curandState", "dpct::rng::device::rng_generator<oneapi::mkl::"
                    "rng::device::philox4x32x10<1>>"},
    {"curandStatePhilox4_32_10_t",
     "dpct::rng::device::rng_generator<oneapi::mkl::rng::device::"
     "philox4x32x10<1>>"},
    {"curandStatePhilox4_32_10", "dpct::rng::device::rng_generator<"
                                 "oneapi::mkl::rng::device::philox4x32x10<1>>"},
    {"curandStateMRG32k3a_t", "dpct::rng::device::rng_generator<"
                              "oneapi::mkl::rng::device::mrg32k3a<1>>"},
    {"curandStateMRG32k3a", "dpct::rng::device::rng_generator<oneapi::"
                            "mkl::rng::device::mrg32k3a<1>>"},
};

const std::map<std::string, MapNames::RandomGenerateFuncReplInfo>
    MapNames::RandomGenerateFuncReplInfoMap{
        {"curandGenerate",
         {"uint32_t", "oneapi::mkl::rng::uniform_bits", "uint32_t"}},
        {"curandGenerateLongLong",
         {"uint64_t", "oneapi::mkl::rng::uniform_bits", "uint64_t"}},
        {"curandGenerateLogNormal",
         {"float", "oneapi::mkl::rng::lognormal", "float"}},
        {"curandGenerateLogNormalDouble",
         {"double", "oneapi::mkl::rng::lognormal", "double"}},
        {"curandGenerateNormal",
         {"float", "oneapi::mkl::rng::gaussian", "float"}},
        {"curandGenerateNormalDouble",
         {"double", "oneapi::mkl::rng::gaussian", "double"}},
        {"curandGeneratePoisson",
         {"int32_t", "oneapi::mkl::rng::poisson", "int32_t"}},
        {"curandGenerateUniform",
         {"float", "oneapi::mkl::rng::uniform", "float"}},
        {"curandGenerateUniformDouble",
         {"double", "oneapi::mkl::rng::uniform", "double"}},
    };

const std::map<std::string, std::vector<unsigned int>>
    MapNames::FFTPlanAPINeedParenIdxMap{
        {"cufftPlan1d", {1}},
        {"cufftPlan2d", {1, 2}},
        {"cufftPlan3d", {1, 2, 3}},
        {"cufftPlanMany", {2, 3, 4, 6, 7}},
        {"cufftMakePlan1d", {1}},
        {"cufftMakePlan2d", {1, 2}},
        {"cufftMakePlan3d", {1, 2, 3}},
        {"cufftMakePlanMany", {2, 3, 4, 6, 7}},
        {"cufftMakePlanMany64", {2, 3, 4, 6, 7}}};

const MapNames::MapTy MapNames::Dim3MemberNamesMap{
    {"x", "[2]"}, {"y", "[1]"}, {"z", "[0]"},
    // ...
};

const MapNames::MapTy MapNames::MacrosMap{
    {"__CUDA_ARCH__", "DPCT_COMPATIBILITY_TEMP"}, /**/
    {"__NVCC__", "DPCT_COMPATIBILITY_TEMP"},      /**/
    {"__CUDACC__", "SYCL_LANGUAGE_VERSION"},
    {"__DRIVER_TYPES_H__", "__DPCT_HPP__"},
    {"__CUDA_RUNTIME_H__", "__DPCT_HPP__"},
    {"CUDART_VERSION", "SYCL_LANGUAGE_VERSION"},
    {"CUBLAS_V2_H_", "MKL_SYCL_HPP"},
    {"__CUDA__", "SYCL_LANGUAGE_VERSION"},
    //...
};

std::unordered_map<std::string, MacroMigrationRule> MapNames::MacroRuleMap{
    {"__forceinline__",
     MacroMigrationRule("dpct_build_in_macro_rule", RulePriority::Fallback,
                        "__forceinline__", "__dpct_inline__",
                        HelperFeatureEnum::Dpct_dpct_align_and_inline)},
    {"__align__",
     MacroMigrationRule("dpct_build_in_macro_rule", RulePriority::Fallback,
                        "__align__", "__dpct_align__",
                        HelperFeatureEnum::Dpct_dpct_align_and_inline)},
    {"__noinline__",
     MacroMigrationRule("dpct_build_in_macro_rule", RulePriority::Fallback,
                        "__noinline__", "__dpct_noinline__",
                        HelperFeatureEnum::Dpct_dpct_noinline)},
    //...
};

std::unordered_map<std::string, MetaRuleObject &> MapNames::HeaderRuleMap{};

// Files to not preprocess, i.e. ignore #include <file>
const MapNames::SetTy MapNames::ThrustFileExcludeSet{
    "thrust/detail/adjacent_difference.inl",
    "thrust/detail/binary_search.inl",
    "thrust/detail/complex/complex.inl",
    "thrust/detail/copy_if.h",
    "thrust/detail/count.inl",
    "thrust/detail/equal.inl",
    "thrust/detail/pair.inl",
    "thrust/detail/pointer.inl",
    "thrust/detail/sequence.inl",
    "thrust/detail/sort.inl",
    "thrust/detail/temporary_buffer.h",
    "thrust/detail/vector_base.inl"};

// Texture names mapping.
const MapNames::MapTy TextureRule::TextureMemberNames{
    {"addressMode", "addressing_mode"},
    {"filterMode", "filtering_mode"},
    {"normalized", "coordinate_normalization_mode"},
    {"normalizedCoords", "coordinate_normalization_mode"},
    {"channelDesc", "channel"},
    {"Format", "channel_type"},
    {"NumChannels", "channel_num"},
    {"Width", "x"},
    {"Height", "y"},
    {"flags", "coordinate_normalization_mode"},
};

// DeviceProp names mapping.
const MapNames::MapTy DeviceInfoVarRule::PropNamesMap{
    {"clockRate", "max_clock_frequency"},
    {"major", "major_version"},
    {"minor", "minor_version"},
    {"integrated", "integrated"},
    {"warpSize", "max_sub_group_size"},
    {"multiProcessorCount", "max_compute_units"},
    {"maxThreadsPerBlock", "max_work_group_size"},
    {"maxThreadsPerMultiProcessor", "max_work_items_per_compute_unit"},
    {"name", "name"},
    {"totalGlobalMem", "global_mem_size"},
    {"sharedMemPerBlock", "local_mem_size"},
    {"sharedMemPerMultiprocessor", "local_mem_size"},
    {"maxGridSize", "max_nd_range_size"},
    {"maxThreadsDim", "max_work_item_sizes"},
    {"memoryClockRate", "memory_clock_rate"},
    {"memoryBusWidth", "memory_bus_width"},
    // ...
};

const MapNames::MapTy MapNames::FunctionAttrMap{
    {"CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK", "max_work_group_size"},
    // ...
};

// DeviceProp names mapping.
const MapNames::MapTy MapNames::MemberNamesMap{
    {"x", "x()"}, {"y", "y()"}, {"z", "z()"}, {"w", "w()"},
    // ...
};

const MapNames::SetTy MapNames::HostAllocSet{
    "cudaHostAllocDefault",         "cudaHostAllocMapped",
    "cudaHostAllocPortable",        "cudaHostAllocWriteCombined",
    "CU_MEMHOSTALLOC_PORTABLE",     "CU_MEMHOSTALLOC_DEVICEMAP",
    "CU_MEMHOSTALLOC_WRITECOMBINED"};

// Function Attributes names migration
const MapNames::MapTy KernelFunctionInfoRule::AttributesNamesMap{
    {"maxThreadsPerBlock", "max_work_group_size"},
};

std::map<std::string, bool> MigrationStatistics::MigrationTable{
#define ENTRY(INTERFACENAME, APINAME, VALUE, FLAG, TARGET, COMMENT)            \
  {#APINAME, VALUE},
#define ENTRY_MEMBER_FUNCTION(OBJNAME, INTERFACENAME, APINAME, VALUE, FLAG,    \
                              TARGET, COMMENT)                                 \
  {#OBJNAME "." #APINAME, VALUE},
#include "APINames.inc"
#include "APINames_CUB.inc"
#include "APINames_NCCL.inc"
#include "APINames_NVML.inc"
#include "APINames_cuBLAS.inc"
#include "APINames_cuFFT.inc"
#include "APINames_cuGRAPH.inc"
#include "APINames_cuRAND.inc"
#include "APINames_cuSOLVER.inc"
#include "APINames_cuSPARSE.inc"
#include "APINames_nvJPEG.inc"
#include "APINames_thrust.inc"
#include "APINames_cuDNN.inc"
#undef ENTRY_MEMBER_FUNCTION
#undef ENTRY
};

std::map<std::string, bool> MigrationStatistics::TypeMigrationTable{
#define ENTRY_TYPE(TYPENAME, VALUE, FLAG, TARGET, COMMENT) {#TYPENAME, VALUE},
#include "TypeNames.inc"
#undef ENTRY_TYPE
};

bool MigrationStatistics::IsMigrated(const std::string &APIName) {
  auto Search = MigrationTable.find(APIName);
  if (Search != MigrationTable.end()) {
    return Search->second;
  } else {
#ifdef DPCT_DEBUG_BUILD
    llvm::errs() << "[NOTE] Find new API\"" << APIName
                 << "\" , please update migrated API database.\n";
    ShowStatus(MigrationError);
    dpctExit(MigrationError);
#endif
    return false;
  }
}

std::vector<std::string> MigrationStatistics::GetAllAPINames(void) {
  std::vector<std::string> AllAPINames;
  for (const auto &APIName : MigrationTable) {
    AllAPINames.push_back(APIName.first);
  }

  return AllAPINames;
}
std::map<std::string, bool> &MigrationStatistics::GetTypeTable(void) {
  return TypeMigrationTable;
}

MapNames::MapTy TextureRule::ResourceTypeNames{{"devPtr", "data_ptr"},
                                               {"desc", "channel"},
                                               {"array", "data_ptr"},
                                               {"width", "x"},
                                               {"height", "y"},
                                               {"pitchInBytes", "pitch"},
                                               {"sizeInBytes", "x"},
                                               {"hArray", "data_ptr"},
                                               {"format", "channel_type"},
                                               {"numChannels", "channel_num"}};

const MapNames::MapTy MemoryDataTypeRule::PitchMemberNames{
    {"pitch", "pitch"}, {"ptr", "data_ptr"}, {"xsize", "x"}, {"ysize", "y"}};
const MapNames::MapTy MemoryDataTypeRule::ExtentMemberNames{
    {"width", "[0]"}, {"height", "[1]"}, {"depth", "[2]"}};

const MapNames::MapTy MemoryDataTypeRule::MemberNames{
    {"srcArray", "from_data"},
    {"srcPtr", "from_data"},
    {"srcPos", "from_pos"},
    {"dstArray", "to_data"},
    {"dstPtr", "to_data"},
    {"dstPos", "to_pos"},
    {"extent", "size"},
    {"kind", "direction"},
    {"Width", "x"},
    {"Height", "y"},
    {"Format", "channel_type"},
    {"NumChannels", "channel_num"},
    {"dstPitch", "to_data"},
    {"srcPitch", "from_data"},
    {"dstDevice", "to_data"},
    {"dstHost", "to_data"},
    {"srcDevice", "from_data"},
    {"srcHost", "from_data"},
    {"dstHeight", "to_data"},
    {"srcHeight", "from_data"}};

const MapNames::MapTy MemoryDataTypeRule::PitchMemberToSetter{
    {"dstPitch", "set_pitch"},   {"dstHeight", "set_y"},
    {"dstHost", "set_data_ptr"}, {"dstDevice", "set_data_ptr"},
    {"srcPitch", "set_pitch"},   {"srcHeight", "set_y"},
    {"srcHost", "set_data_ptr"}, {"srcDevice", "set_data_ptr"}};

const std::map<std::string, HelperFeatureEnum>
    MemoryDataTypeRule::PitchMemberToFeature{
        {"dstPitch", {HelperFeatureEnum::Memory_pitched_data_set_pitch}},
        {"dstHeight", {HelperFeatureEnum::Memory_pitched_data_set_y}},
        {"dstHost", {HelperFeatureEnum::Memory_pitched_data_set_data_ptr}},
        {"dstDevice", {HelperFeatureEnum::Memory_pitched_data_set_data_ptr}},
        {"srcPitch", {HelperFeatureEnum::Memory_pitched_data_set_pitch}},
        {"srcHeight", {HelperFeatureEnum::Memory_pitched_data_set_y}},
        {"srcHost", {HelperFeatureEnum::Memory_pitched_data_set_data_ptr}},
        {"srcDevice", {HelperFeatureEnum::Memory_pitched_data_set_data_ptr}}};

const MapNames::MapTy MemoryDataTypeRule::SizeOrPosToMember{
    {"srcXInBytes", "[0]"},  {"srcY", "[1]"},   {"srcZ", "[2]"},
    {"dstXInBytes", "[0]"},  {"dstY", "[1]"},   {"dstZ", "[2]"},
    {"WidthInBytes", "[0]"}, {"Height", "[1]"}, {"Depth", "[2]"}};

const std::vector<std::string> MemoryDataTypeRule::RemoveMember{
    "dstLOD", "srcLOD", "dstMemoryType", "srcMemoryType"};

const MapNames::SetTy MapNames::PredefinedStreamName{
    "cudaStreamDefault", "cudaStreamNonBlocking", "cudaStreamLegacy",
    "cudaStreamPerThread"};

const std::unordered_set<std::string> MapNames::CooperativeGroupsAPISet{
    "this_thread_block", "sync", "tiled_partition",
    "thread_rank",       "size", "shfl_down"};
