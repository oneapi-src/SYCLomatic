//===----------------------- AsmTokenKinds.def ------------------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

// clang-format off
#ifndef TOK
#define TOK(X)
#endif

#ifndef PUNCTUATOR
#define PUNCTUATOR(X,Y) TOK(X)
#endif

#ifndef KEYWORD
#define KEYWORD(X, Y) TOK(kw_ ## X)
#endif

#ifndef INSTRUCTION
#define INSTRUCTION(X) TOK(op_ ## X)
#endif

#ifndef BUILTIN_TYPE
#define BUILTIN_TYPE(X, Y) KEYWORD(X, Y)
#endif

#ifndef STATE_SPACE
#define STATE_SPACE(X, Y) KEYWORD(X, Y)
#endif

#ifndef MODIFIER
#define MODIFIER(X, Y) KEYWORD(X, Y)
#endif

#ifndef SPECIAL_REG
#define SPECIAL_REG(X, Y, Z) TOK(bi_ ## X)
#endif

#ifndef TARGET
#define TARGET(X)
#endif

#ifndef LINKAGE
#define LINKAGE(X, Y) KEYWORD(X, Y)
#endif

TOK(unknown)             // Not a token.
TOK(eof)                 // End of file.

TOK(comment)             // Comment (only in -E -C[C] mode)
TOK(identifier)          // abcde123
TOK(raw_identifier)      // Used only in raw lexing mode.

TOK(numeric_constant)    // 0x123

PUNCTUATOR(l_square,            "[")
PUNCTUATOR(r_square,            "]")
PUNCTUATOR(l_paren,             "(")
PUNCTUATOR(r_paren,             ")")
PUNCTUATOR(l_brace,             "{")
PUNCTUATOR(r_brace,             "}")
PUNCTUATOR(period,              ".")
PUNCTUATOR(amp,                 "&")
PUNCTUATOR(ampamp,              "&&")
PUNCTUATOR(star,                "*")
PUNCTUATOR(plus,                "+")
PUNCTUATOR(plusplus,            "++")
PUNCTUATOR(minus,               "-")
PUNCTUATOR(arrow,               "->")
PUNCTUATOR(minusminus,          "--")
PUNCTUATOR(tilde,               "~")
PUNCTUATOR(exclaim,             "!")
PUNCTUATOR(exclaimequal,        "!=")
PUNCTUATOR(slash,               "/")
PUNCTUATOR(slashequal,          "/=")
PUNCTUATOR(percent,             "%")
PUNCTUATOR(percentequal,        "%=")
PUNCTUATOR(less,                "<")
PUNCTUATOR(lessless,            "<<")
PUNCTUATOR(lessequal,           "<=")
PUNCTUATOR(greater,             ">")
PUNCTUATOR(greatergreater,      ">>")
PUNCTUATOR(greaterequal,        ">=")
PUNCTUATOR(caret,               "^")
PUNCTUATOR(caretequal,          "^=")
PUNCTUATOR(pipe,                "|")
PUNCTUATOR(pipepipe,            "||")
PUNCTUATOR(pipeequal,           "|=")
PUNCTUATOR(question,            "?")
PUNCTUATOR(colon,               ":")
PUNCTUATOR(semi,                ";")
PUNCTUATOR(equal,               "=")
PUNCTUATOR(equalequal,          "==")
PUNCTUATOR(comma,               ",")
PUNCTUATOR(hash,                "#")
PUNCTUATOR(at,                  "@")
PUNCTUATOR(coloncolon,          "::")
PUNCTUATOR(underscore,          "_")

// Instruction opcodes
INSTRUCTION(abs)
INSTRUCTION(activemask)
INSTRUCTION(add)
INSTRUCTION(addc)
INSTRUCTION(alloca)
INSTRUCTION(and)
INSTRUCTION(applypriority)
INSTRUCTION(atom)
INSTRUCTION(bar)
INSTRUCTION(barrier)
INSTRUCTION(bfe)
INSTRUCTION(bfi)
INSTRUCTION(bfind)
INSTRUCTION(bmsk)
INSTRUCTION(bra)
INSTRUCTION(brev)
INSTRUCTION(brkpt)
INSTRUCTION(brx)
INSTRUCTION(call)
INSTRUCTION(clz)
INSTRUCTION(cnot)
INSTRUCTION(copysign)
INSTRUCTION(cos)
INSTRUCTION(cp)
INSTRUCTION(createpolicy)
INSTRUCTION(cvt)
INSTRUCTION(cvta)
INSTRUCTION(discard)
INSTRUCTION(div)
INSTRUCTION(dp2a)
INSTRUCTION(dp4a)
INSTRUCTION(elect)
INSTRUCTION(ex2)
INSTRUCTION(exit)
INSTRUCTION(fence)
INSTRUCTION(fma)
INSTRUCTION(fns)
INSTRUCTION(getctarank)
INSTRUCTION(griddepcontrol)
INSTRUCTION(isspacep)
INSTRUCTION(istypep)
INSTRUCTION(ld)
INSTRUCTION(ldmatrix)
INSTRUCTION(ldu)
INSTRUCTION(lg2)
INSTRUCTION(lop3)
INSTRUCTION(mad)
INSTRUCTION(mad24)
INSTRUCTION(madc)
INSTRUCTION(mapa)
INSTRUCTION(match)
INSTRUCTION(max)
INSTRUCTION(mbarrier)
INSTRUCTION(membar)
INSTRUCTION(min)
INSTRUCTION(mma)
INSTRUCTION(mov)
INSTRUCTION(movmatrix)
INSTRUCTION(mul)
INSTRUCTION(mul24)
INSTRUCTION(multimem)
INSTRUCTION(nanosleep)
INSTRUCTION(neg)
INSTRUCTION(not)
INSTRUCTION(or)
INSTRUCTION(pmevent)
INSTRUCTION(popc)
INSTRUCTION(prefetch)
INSTRUCTION(prefetchu)
INSTRUCTION(prmt)
INSTRUCTION(rcp)
INSTRUCTION(red)
INSTRUCTION(redux)
INSTRUCTION(rem)
INSTRUCTION(ret)
INSTRUCTION(rsqrt)
INSTRUCTION(sad)
INSTRUCTION(selp)
INSTRUCTION(set)
INSTRUCTION(setmaxnreg)
INSTRUCTION(setp)
INSTRUCTION(shf)
INSTRUCTION(shfl)
INSTRUCTION(shl)
INSTRUCTION(shr)
INSTRUCTION(sin)
INSTRUCTION(slct)
INSTRUCTION(sqrt)
INSTRUCTION(st)
INSTRUCTION(stackrestore)
INSTRUCTION(stacksave)
INSTRUCTION(stmatrix)
INSTRUCTION(sub)
INSTRUCTION(subc)
INSTRUCTION(suld)
INSTRUCTION(suq)
INSTRUCTION(sured)
INSTRUCTION(sust)
INSTRUCTION(szext)
INSTRUCTION(tanh)
INSTRUCTION(testp)
INSTRUCTION(tex)
INSTRUCTION(tld4)
INSTRUCTION(trap)
INSTRUCTION(txq)
INSTRUCTION(vabsdiff)
INSTRUCTION(vabsdiff2)
INSTRUCTION(vabsdiff4)
INSTRUCTION(vadd)
INSTRUCTION(vadd2)
INSTRUCTION(vadd4)
INSTRUCTION(vavrg2)
INSTRUCTION(vavrg4)
INSTRUCTION(vmad)
INSTRUCTION(vmax)
INSTRUCTION(vmax2)
INSTRUCTION(vmax4)
INSTRUCTION(vmin)
INSTRUCTION(vmin2)
INSTRUCTION(vmin4)
INSTRUCTION(vote)
INSTRUCTION(vset)
INSTRUCTION(vset2)
INSTRUCTION(vset4)
INSTRUCTION(vshl)
INSTRUCTION(vshr)
INSTRUCTION(vsub)
INSTRUCTION(vsub2)
INSTRUCTION(vsub4)
INSTRUCTION(wgmma)
INSTRUCTION(wmma)
INSTRUCTION(xor)

// Built-in special registers
SPECIAL_REG(laneid, "%laneid", s64)
SPECIAL_REG(warpid, "%warpid", s64)
SPECIAL_REG(WARP_SZ, "WARP_SZ", s64)

// Built-in type names
BUILTIN_TYPE(b8,          ".b8")
BUILTIN_TYPE(b16,         ".b16")
BUILTIN_TYPE(b32,         ".b32")
BUILTIN_TYPE(b64,         ".b64")
BUILTIN_TYPE(u8,          ".u8")
BUILTIN_TYPE(u16,         ".u16")
BUILTIN_TYPE(u32,         ".u32")
BUILTIN_TYPE(u64,         ".u64")
BUILTIN_TYPE(s8,          ".s8")
BUILTIN_TYPE(s16,         ".s16")
BUILTIN_TYPE(s32,         ".s32")
BUILTIN_TYPE(s64,         ".s64")
BUILTIN_TYPE(f16,         ".f16")
BUILTIN_TYPE(f32,         ".f32")
BUILTIN_TYPE(f64,         ".f64")
BUILTIN_TYPE(byte,        ".byte")
BUILTIN_TYPE(four_byte,   ".4byte")
BUILTIN_TYPE(pred,        ".pred")
BUILTIN_TYPE(bf16,        ".bf16")
BUILTIN_TYPE(e4m3,        ".e4m3")
BUILTIN_TYPE(e5m2,        ".e5m2")
BUILTIN_TYPE(tf32,        ".tf32")
BUILTIN_TYPE(f16x2,       ".f16x2")
BUILTIN_TYPE(bf16x2,      ".bf16x2")
BUILTIN_TYPE(e4m3x2,      ".e4m3x2")
BUILTIN_TYPE(e5m2x2,      ".e5m2x2")
BUILTIN_TYPE(s16x2,       ".s16x2")
BUILTIN_TYPE(u16x2,       ".u16x2")

// Vector modifiers
MODIFIER(v2, ".v2")
MODIFIER(v4, ".v4")
MODIFIER(v8, ".v8")

STATE_SPACE(reg,    ".reg")
STATE_SPACE(sreg,   ".sreg")
STATE_SPACE(const,  ".const")
STATE_SPACE(global, ".global")
STATE_SPACE(local,  ".local")
STATE_SPACE(param,  ".param")
STATE_SPACE(shared, ".shared")
STATE_SPACE(tex,    ".tex")

KEYWORD(align, ".align")
KEYWORD(managed, ".managed")
KEYWORD(unified, ".unified")
KEYWORD(attribute, ".attribute")
KEYWORD(func, ".func")
KEYWORD(entry, ".entry")
KEYWORD(version, ".version")
KEYWORD(address_size, ".address_size")
KEYWORD(target, ".target")
KEYWORD(FORCE_INLINE, ".FORCE_INLINE")

LINKAGE(extern, ".extern")
LINKAGE(visible, ".visible")
LINKAGE(weak, ".weak")
LINKAGE(common, ".common")

// sm_9x target architectures
TARGET(sm_90a)
TARGET(sm_90)
// sm_8x target architectures
TARGET(sm_80)
TARGET(sm_86)
TARGET(sm_87)
TARGET(sm_89)
// sm_7x target architectures
TARGET(sm_70)
TARGET(sm_72)
TARGET(sm_75)
// sm_6x target architectures
TARGET(sm_60)
TARGET(sm_61)
TARGET(sm_62)
// sm_5x target architectures
TARGET(sm_50)
TARGET(sm_52)
TARGET(sm_53)
// sm_3x target architectures
TARGET(sm_30)
TARGET(sm_32)
TARGET(sm_35)
TARGET(sm_37)
// sm_2x target architectures
TARGET(sm_20)
// sm_1x target architectures
TARGET(sm_10)
TARGET(sm_11)
TARGET(sm_12)
TARGET(sm_13)
// texturing mode
TARGET(texmode_unified)
TARGET(texmode_independent)
// platform option
TARGET(debug)
TARGET(map_f64_to_f32)

MODIFIER(eq, ".eq")
MODIFIER(ne, ".ne")
MODIFIER(lt, ".lt")
MODIFIER(le, ".le")
MODIFIER(gt, ".gt")
MODIFIER(ge, ".ge")
MODIFIER(lo, ".lo")
MODIFIER(ls, ".ls")
MODIFIER(hi, ".hi")
MODIFIER(hs, ".hs")
MODIFIER(equ, ".equ")
MODIFIER(neu, ".neu")
MODIFIER(ltu, ".ltu")
MODIFIER(leu, ".leu")
MODIFIER(gtu, ".gtu")
MODIFIER(geu, ".geu")
MODIFIER(num, ".num")
MODIFIER(nan, ".nan")
MODIFIER(finite, ".finite")
MODIFIER(infinite, ".infinite")
MODIFIER(number, ".number")
MODIFIER(notanumber, ".notanumber")
MODIFIER(normal, ".normal")
MODIFIER(subnormal , ".subnormal")
MODIFIER(add, ".add")
MODIFIER(min, ".min")
MODIFIER(max, ".max")
MODIFIER(op_or, ".or")
MODIFIER(op_xor, ".xor")
MODIFIER(cas, ".cas")
MODIFIER(exch, ".exch")
MODIFIER(inc, ".inc")
MODIFIER(dec, ".dec")
MODIFIER(relaxed, ".relaxed")
MODIFIER(acquire, ".acquire")
MODIFIER(release, ".release")
MODIFIER(acq_rel, ".acq_rel")
MODIFIER(cta, ".cta")
MODIFIER(cluster, ".cluster")
MODIFIER(gpu, ".gpu")
MODIFIER(sys, ".sys")
MODIFIER(rn, ".rn")
MODIFIER(rna, ".rna")
MODIFIER(rz, ".rz")
MODIFIER(rm, ".rm")
MODIFIER(rp, ".rp")
MODIFIER(rni, ".rni")
MODIFIER(rzi, ".rzi")
MODIFIER(rmi, ".rmi")
MODIFIER(rpi, ".rpi")
MODIFIER(ftz, ".ftz")
MODIFIER(approx, ".approx")
MODIFIER(sat, ".sat")
MODIFIER(satfinite, ".satfinite")
MODIFIER(relu, ".relu")
MODIFIER(clamp, ".clamp")
MODIFIER(wrap, ".wrap")
MODIFIER(wide, ".wide")
MODIFIER(sync, ".sync")
MODIFIER(warp, ".warp")

#undef LINKAGE
#undef TARGET
#undef SPECIAL_REG
#undef MODIFIER
#undef STATE_SPACE
#undef BUILTIN_TYPE
#undef INSTRUCTION
#undef KEYWORD
#undef PUNCTUATOR
#undef TOK
// clang-format on
