//===--------------- APINamesThrust.inc -----------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

// thrust::replace_copy_if
thrustFactory("thrust::replace_copy_if",
              {{7,PolicyState::HasPolicy,4,MapNames::getDpctNamespace()+"replace_copy_if", HelperFeatureEnum::DplExtrasAlgorithm_replace_copy_if},
               {6,PolicyState::HasPolicy,3,"oneapi::dpl::replace_copy_if",                 HelperFeatureEnum::no_feature_helper                 },
               {6,PolicyState::NoPolicy ,4,MapNames::getDpctNamespace()+"replace_copy_if", HelperFeatureEnum::DplExtrasAlgorithm_replace_copy_if},
               {5,PolicyState::NoPolicy ,3,"oneapi::dpl::replace_copy_if",                 HelperFeatureEnum::no_feature_helper                 }}),

// thrust::replace_if
thrustFactory("thrust::replace_if",
              {{6,PolicyState::HasPolicy,3,MapNames::getDpctNamespace()+"replace_if", HelperFeatureEnum::DplExtrasAlgorithm_replace_if},
               {5,PolicyState::HasPolicy,2,"oneapi::dpl::replace_if",                 HelperFeatureEnum::no_feature_helper            },
               {5,PolicyState::NoPolicy ,3,MapNames::getDpctNamespace()+"replace_if", HelperFeatureEnum::DplExtrasAlgorithm_replace_if},
               {4,PolicyState::NoPolicy ,2,"oneapi::dpl::replace_if",                 HelperFeatureEnum::no_feature_helper            }}),

// thrust::remove_copy_if
thrustFactory("thrust::remove_copy_if",
              {{6,PolicyState::HasPolicy,4,MapNames::getDpctNamespace()+"remove_copy_if", HelperFeatureEnum::DplExtrasAlgorithm_remove_copy_if},
               {5,PolicyState::HasPolicy,3,"oneapi::dpl::remove_copy_if",                 HelperFeatureEnum::no_feature_helper                 },
               {5,PolicyState::NoPolicy ,4,MapNames::getDpctNamespace()+"remove_copy_if", HelperFeatureEnum::DplExtrasAlgorithm_remove_copy_if},
               {4,PolicyState::NoPolicy ,3,"oneapi::dpl::remove_copy_if",                 HelperFeatureEnum::no_feature_helper                 }}),

// thrust::remove_if
thrustFactory("thrust::remove_if",
              {{5,PolicyState::HasPolicy,3,MapNames::getDpctNamespace()+"remove_if", HelperFeatureEnum::DplExtrasAlgorithm_remove_if},
               {4,PolicyState::HasPolicy,2,"oneapi::dpl::remove_if",                 HelperFeatureEnum::no_feature_helper            },
               {4,PolicyState::NoPolicy ,3,MapNames::getDpctNamespace()+"remove_if", HelperFeatureEnum::DplExtrasAlgorithm_remove_if},
               {3,PolicyState::NoPolicy ,2,"oneapi::dpl::remove_if",                 HelperFeatureEnum::no_feature_helper            }}),

// thrust::not1
CALL_FACTORY_ENTRY("thrust::not1", CALL("oneapi::dpl::not1", ARG(0)))

// thrust::not2
CALL_FACTORY_ENTRY("thrust::not2", CALL("std::not2", ARG(0)))

// thrust::any_of
thrustFactory("thrust::any_of",
              {{4,PolicyState::HasPolicy,2,"oneapi::dpl::any_of", HelperFeatureEnum::no_feature_helper },
               {3,PolicyState::NoPolicy ,2,"oneapi::dpl::any_of", HelperFeatureEnum::no_feature_helper }}),

// thrust::reverse
thrustFactory("thrust::reverse",
              {{3,PolicyState::HasPolicy,2,"oneapi::dpl::reverse", HelperFeatureEnum::no_feature_helper },
               {2,PolicyState::NoPolicy ,2,"oneapi::dpl::reverse", HelperFeatureEnum::no_feature_helper }}),

// thrust::find_if
thrustFactory("thrust::find_if",
              {{4,PolicyState::HasPolicy,2,"oneapi::dpl::find_if", HelperFeatureEnum::no_feature_helper },
               {3,PolicyState::NoPolicy ,2,"oneapi::dpl::find_if", HelperFeatureEnum::no_feature_helper }}),

// thrust::find_if_not
thrustFactory("thrust::find_if_not",
              {{4,PolicyState::HasPolicy,2,"oneapi::dpl::find_if_not", HelperFeatureEnum::no_feature_helper },
               {3,PolicyState::NoPolicy ,2,"oneapi::dpl::find_if_not", HelperFeatureEnum::no_feature_helper }}),

// thrust::replace
thrustFactory("thrust::replace",
              {{5,PolicyState::HasPolicy,2,"oneapi::dpl::replace", HelperFeatureEnum::no_feature_helper },
               {4,PolicyState::NoPolicy ,2,"oneapi::dpl::replace", HelperFeatureEnum::no_feature_helper }}),

// thrust::replace_copy
thrustFactory("thrust::replace_copy",
              {{6,PolicyState::HasPolicy,3,"oneapi::dpl::replace_copy", HelperFeatureEnum::no_feature_helper },
               {5,PolicyState::NoPolicy ,3,"oneapi::dpl::replace_copy", HelperFeatureEnum::no_feature_helper }}),

// thrust::adjacent_difference
thrustFactory("thrust::adjacent_difference",
              {{5,PolicyState::HasPolicy,3,"oneapi::dpl::adjacent_difference", HelperFeatureEnum::no_feature_helper },
               {4,PolicyState::HasPolicy,3,"oneapi::dpl::adjacent_difference", HelperFeatureEnum::no_feature_helper },
               {4,PolicyState::NoPolicy ,3,"oneapi::dpl::adjacent_difference", HelperFeatureEnum::no_feature_helper },
               {3,PolicyState::NoPolicy ,3,"oneapi::dpl::adjacent_difference", HelperFeatureEnum::no_feature_helper }}),

// thrust::mismatch
thrustFactory("thrust::mismatch",
              {{5,PolicyState::HasPolicy,3,"oneapi::dpl::mismatch", HelperFeatureEnum::no_feature_helper },
               {4,PolicyState::HasPolicy,3,"oneapi::dpl::mismatch", HelperFeatureEnum::no_feature_helper },
               {4,PolicyState::NoPolicy ,3,"oneapi::dpl::mismatch", HelperFeatureEnum::no_feature_helper },
               {3,PolicyState::NoPolicy ,3,"oneapi::dpl::mismatch", HelperFeatureEnum::no_feature_helper }}),

// thrust::gather_if
thrustFactory("thrust::gather_if",
              {{7,PolicyState::HasPolicy,5,MapNames::getDpctNamespace()+"gather_if", HelperFeatureEnum::DplExtrasAlgorithm_gather_if},
               {6,PolicyState::NoPolicy ,5,MapNames::getDpctNamespace()+"gather_if", HelperFeatureEnum::DplExtrasAlgorithm_gather_if}}),

// thrust::merge_by_key
thrustFactory("thrust::merge_by_key",
              {{10,PolicyState::HasPolicy,8,MapNames::getDpctNamespace()+"merge", HelperFeatureEnum::DplExtrasAlgorithm_merge},
               { 9,PolicyState::HasPolicy,8,MapNames::getDpctNamespace()+"merge", HelperFeatureEnum::DplExtrasAlgorithm_merge},
               { 9,PolicyState::NoPolicy ,8,MapNames::getDpctNamespace()+"merge", HelperFeatureEnum::DplExtrasAlgorithm_merge},
               { 8,PolicyState::NoPolicy ,8,MapNames::getDpctNamespace()+"merge", HelperFeatureEnum::DplExtrasAlgorithm_merge}}),

// thrust::inclusive_scan
thrustFactory("thrust::inclusive_scan",
              {{5,PolicyState::HasPolicy,3,"oneapi::dpl::inclusive_scan", HelperFeatureEnum::no_feature_helper },
               {4,PolicyState::HasPolicy,3,"oneapi::dpl::inclusive_scan", HelperFeatureEnum::no_feature_helper },
               {4,PolicyState::NoPolicy ,3,"oneapi::dpl::inclusive_scan", HelperFeatureEnum::no_feature_helper },
               {3,PolicyState::NoPolicy ,3,"oneapi::dpl::inclusive_scan", HelperFeatureEnum::no_feature_helper }}),

// thrust::gather
thrustFactory("thrust::gather",
              {{5,PolicyState::HasPolicy,4,MapNames::getDpctNamespace()+"gather", HelperFeatureEnum::DplExtrasAlgorithm_gather },
               {4,PolicyState::NoPolicy ,4,MapNames::getDpctNamespace()+"gather", HelperFeatureEnum::DplExtrasAlgorithm_gather }}),

// thrust::scatter
thrustFactory("thrust::scatter",
              {{5,PolicyState::HasPolicy,4,MapNames::getDpctNamespace()+"scatter", HelperFeatureEnum::DplExtrasAlgorithm_scatter },
               {4,PolicyState::NoPolicy ,4,MapNames::getDpctNamespace()+"scatter", HelperFeatureEnum::DplExtrasAlgorithm_scatter }}),

// thrust::transform_if
thrustFactory("thrust::transform_if",
              {{6,PolicyState::HasPolicy,3,MapNames::getDpctNamespace()+"transform_if", HelperFeatureEnum::DplExtrasAlgorithm_transform_if},
               {5,PolicyState::NoPolicy,3,MapNames::getDpctNamespace()+"transform_if", HelperFeatureEnum::DplExtrasAlgorithm_transform_if},
               {7,PolicyState::HasPolicy,4,MapNames::getDpctNamespace()+"transform_if", HelperFeatureEnum::DplExtrasAlgorithm_transform_if},
               {6,PolicyState::NoPolicy,4,MapNames::getDpctNamespace()+"transform_if", HelperFeatureEnum::DplExtrasAlgorithm_transform_if},
               {8,PolicyState::HasPolicy,4,MapNames::getDpctNamespace()+"transform_if", HelperFeatureEnum::DplExtrasAlgorithm_transform_if},
               {7,PolicyState::NoPolicy,4,MapNames::getDpctNamespace()+"transform_if", HelperFeatureEnum::DplExtrasAlgorithm_transform_if}}),


// thrust::// thrust::unique_by_key_copy
thrustFactory("thrust::unique_by_key_copy",
              {{6,PolicyState::HasPolicy,5,MapNames::getDpctNamespace()+"unique_copy", HelperFeatureEnum::DplExtrasAlgorithm_unique_copy},
               {5,PolicyState::NoPolicy, 5,MapNames::getDpctNamespace()+"unique_copy", HelperFeatureEnum::DplExtrasAlgorithm_unique_copy},
               {7,PolicyState::HasPolicy,5,MapNames::getDpctNamespace()+"unique_copy", HelperFeatureEnum::DplExtrasAlgorithm_unique_copy},
               {6,PolicyState::NoPolicy, 5,MapNames::getDpctNamespace()+"unique_copy", HelperFeatureEnum::DplExtrasAlgorithm_unique_copy}}),


// As the order of the last three parameters are changed in the mapping api, so just keep it.
// thrust::transform_reduce
CONDITIONAL_FACTORY_ENTRY(
    CheckArgCount(5),
    CONDITIONAL_FACTORY_ENTRY(
        CheckThrustArgType(0, "thrust::device_ptr"),
        CALL_FACTORY_ENTRY(
            "thrust::transform_reduce",
            CALL("std::transform_reduce",
                 CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                 ARG(0), ARG(1), ARG(3), ARG(4), ARG(2))),
        CALL_FACTORY_ENTRY("thrust::transform_reduce",
                           CALL("std::transform_reduce",
                                ARG("oneapi::dpl::execution::seq"), ARG(0),
                                ARG(1), ARG(3), ARG(4), ARG(2)))),
    CONDITIONAL_FACTORY_ENTRY(
        CheckThrustArgType(0, "thrust::device"),
        CALL_FACTORY_ENTRY(
            "thrust::transform_reduce",
            CALL("std::transform_reduce",
                 CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                 ARG(1), ARG(2), ARG(4), ARG(5), ARG(3))),
        CALL_FACTORY_ENTRY("thrust::transform_reduce",
                           CALL("std::transform_reduce",
                                ARG("oneapi::dpl::execution::seq"), ARG(1),
                                ARG(2), ARG(4), ARG(5), ARG(3)))))


// thrust::swap
CALL_FACTORY_ENTRY("thrust::swap",  CALL("std::swap",  ARG(0), ARG(1)))

// thrust::make_pair
CALL_FACTORY_ENTRY("thrust::make_pair",  CALL("std::make_pair",  ARG(0), ARG(1)))

// thrust::stable_sort_by_key
thrustFactory("thrust::stable_sort_by_key",
              {{5,PolicyState::HasPolicy,3,MapNames::getDpctNamespace() + "stable_sort", HelperFeatureEnum::DplExtrasAlgorithm_stable_sort},
               {4,PolicyState::HasPolicy,3,MapNames::getDpctNamespace() + "stable_sort", HelperFeatureEnum::DplExtrasAlgorithm_stable_sort},
               {4,PolicyState::NoPolicy ,3,MapNames::getDpctNamespace() + "stable_sort", HelperFeatureEnum::DplExtrasAlgorithm_stable_sort},
               {3,PolicyState::NoPolicy ,3,MapNames::getDpctNamespace() + "stable_sort", HelperFeatureEnum::DplExtrasAlgorithm_stable_sort}}),


// thrust::find
thrustFactory("thrust::find",
              {{4,PolicyState::HasPolicy,4,"oneapi::dpl::find", HelperFeatureEnum::no_feature_helper},
               {3,PolicyState::NoPolicy ,4,"oneapi::dpl::find", HelperFeatureEnum::no_feature_helper}}),

// thrust::sort_by_key
thrustFactory("thrust::sort_by_key",
              {{5,PolicyState::HasPolicy,3,MapNames::getDpctNamespace() + "sort", HelperFeatureEnum::DplExtrasAlgorithm_sort},
               {4,PolicyState::HasPolicy,3,MapNames::getDpctNamespace() + "sort", HelperFeatureEnum::DplExtrasAlgorithm_sort},
               {4,PolicyState::NoPolicy ,3,MapNames::getDpctNamespace() + "sort", HelperFeatureEnum::DplExtrasAlgorithm_sort},
               {3,PolicyState::NoPolicy ,3,MapNames::getDpctNamespace() + "sort", HelperFeatureEnum::DplExtrasAlgorithm_sort}}),

// thrust::inner_product
thrustFactory("thrust::inner_product",
              {{5,PolicyState::HasPolicy,3,MapNames::getDpctNamespace()+"inner_product", HelperFeatureEnum::DplExtrasNumeric_inner_product},
               {4,PolicyState::NoPolicy, 3,MapNames::getDpctNamespace()+"inner_product", HelperFeatureEnum::DplExtrasNumeric_inner_product},
               {7,PolicyState::HasPolicy,3,MapNames::getDpctNamespace()+"inner_product", HelperFeatureEnum::DplExtrasNumeric_inner_product},
               {6,PolicyState::NoPolicy, 3,MapNames::getDpctNamespace()+"inner_product", HelperFeatureEnum::DplExtrasNumeric_inner_product}}),


// thrust::reduce_by_key
thrustFactory("thrust::reduce_by_key",
              {{6,PolicyState::HasPolicy,5,"oneapi::dpl::reduce_by_segment", HelperFeatureEnum::no_feature_helper},
               {5,PolicyState::NoPolicy, 5, "oneapi::dpl::reduce_by_segment", HelperFeatureEnum::no_feature_helper},
               {7,PolicyState::HasPolicy,5,"oneapi::dpl::reduce_by_segment", HelperFeatureEnum::no_feature_helper},
               {6,PolicyState::NoPolicy, 5, "oneapi::dpl::reduce_by_segment", HelperFeatureEnum::no_feature_helper},
               {8,PolicyState::HasPolicy,5,"oneapi::dpl::reduce_by_segment", HelperFeatureEnum::no_feature_helper},
               {7,PolicyState::NoPolicy, 5, "oneapi::dpl::reduce_by_segment", HelperFeatureEnum::no_feature_helper}}),

// thrust::for_each
CONDITIONAL_FACTORY_ENTRY(
    CheckArgCount(4),
    // Handling case: thrust::for_each(policy, device.begin(), device.end(), f);
    CONDITIONAL_FACTORY_ENTRY(
        makeCheckAnd(
            makeCheckAnd(CheckThrustArgType(0, "thrust::cuda_cub::par_nosync"),
                         checkEnableExtDPLAPI()),
            CheckThrustArgType(1, "thrust::device_ptr")),
        HEADER_INSERT_FACTORY(
            HeaderType::HT_DPL_Async,
            CALL_FACTORY_ENTRY(
                "thrust::for_each",
                CALL("oneapi::dpl::experimental::for_each_async",
                     CALL("oneapi::dpl::execution::make_device_policy",
                          QUEUESTR),
                     ARG(1), ARG(2), THRUST_FUNCTOR(3)))),
        CALL_FACTORY_ENTRY("thrust::for_each",
                           CALL("std::for_each", makeMappedThrustPolicyEnum(0),
                                ARG(1), ARG(2), THRUST_FUNCTOR(3)))),
    // Handling case: thrust::for_each(host.begin(), host.end(), f);
    CONDITIONAL_FACTORY_ENTRY(
        CheckThrustArgType(0, "thrust::device_ptr"),
        CALL_FACTORY_ENTRY(
            "thrust::for_each",
            CALL("std::for_each",
                 CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                 ARG(0), ARG(1), THRUST_FUNCTOR(2))),
        CALL_FACTORY_ENTRY("thrust::for_each",
                           CALL("std::for_each",
                                ARG("oneapi::dpl::execution::seq"), ARG(0),
                                ARG(1), THRUST_FUNCTOR(2)))))

// thrust::transform
CONDITIONAL_FACTORY_ENTRY(
  CheckArgCount(6),
  //Handling case: thrust::transform(policy, device.begin(), device.end(), device.end(), device.end(), f);
  CALL_FACTORY_ENTRY("thrust::transform",
                      CALL("std::transform",
                            makeMappedThrustPolicyEnum(0),
                            ARG(1), ARG(2), ARG(3), ARG(4), THRUST_FUNCTOR(5))),
  CONDITIONAL_FACTORY_ENTRY(
    CheckArgCount(4),
    //Handling case: thrust::transform(host.begin(), host.end(), host.end(), f);
    CONDITIONAL_FACTORY_ENTRY(
      CheckThrustArgType(0, "thrust::device_ptr"),
      CALL_FACTORY_ENTRY("thrust::transform",
                         CALL("std::transform",
                              CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                              ARG(0), ARG(1), ARG(2), THRUST_FUNCTOR(3))),
      CALL_FACTORY_ENTRY("thrust::transform",
                         CALL("std::transform",
                              ARG("oneapi::dpl::execution::seq"),
                              ARG(0), ARG(1), ARG(2), THRUST_FUNCTOR(3)))),
      CONDITIONAL_FACTORY_ENTRY(
        IsPolicyArgType(0),
        //Handling case: thrust::transform(policy, device.begin(), device.end(), device.begin(), f);
        CALL_FACTORY_ENTRY("thrust::transform",
                        CALL("std::transform",
                              makeMappedThrustPolicyEnum(0),
                              ARG(1), ARG(2), ARG(3), THRUST_FUNCTOR(4))),
        //Handling case: thrust::transform(device.begin(), device.end(), device.begin(), device.end(), f);
        CONDITIONAL_FACTORY_ENTRY(
          CheckThrustArgType(1, "thrust::device_ptr"),
          CALL_FACTORY_ENTRY("thrust::transform",
                         CALL("std::transform",
                              CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                              ARG(0), ARG(1), ARG(2), ARG(3), THRUST_FUNCTOR(4))),
          CALL_FACTORY_ENTRY("thrust::transform",
                         CALL("std::transform",
                              ARG("oneapi::dpl::execution::seq"),
                              ARG(0), ARG(1), ARG(2), ARG(3), THRUST_FUNCTOR(4))))
      ))
)

// thrust::copy_if
CONDITIONAL_FACTORY_ENTRY(
  CheckArgCount(6),
  //Handling case: thrust::copy_if(policy, device.begin(), device.end(), device.end(), device.end(), f);
  FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasAlgorithm_copy_if,
  CALL_FACTORY_ENTRY("thrust::copy_if",
                      CALL(MapNames::getDpctNamespace() + "copy_if",
                            makeMappedThrustPolicyEnum(0),
                            ARG(1), ARG(2), ARG(3), ARG(4), THRUST_FUNCTOR(5)))),
  CONDITIONAL_FACTORY_ENTRY(
    CheckArgCount(4),
    //Handling case: thrust::copy_if(host.begin(), host.end(), host.end(), f);
    CONDITIONAL_FACTORY_ENTRY(
      CheckThrustArgType(0, "thrust::device_ptr"),
      CALL_FACTORY_ENTRY("thrust::copy_if",
                         CALL("std::copy_if",
                              CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                              ARG(0), ARG(1), ARG(2), THRUST_FUNCTOR(3))),
      CALL_FACTORY_ENTRY("thrust::copy_if",
                         CALL("std::copy_if",
                              ARG("oneapi::dpl::execution::seq"),
                              ARG(0), ARG(1), ARG(2), THRUST_FUNCTOR(3)))),
      CONDITIONAL_FACTORY_ENTRY(
        IsPolicyArgType(0),
        //Handling case: thrust::copy_if(policy, device.begin(), device.end(), device.begin(), f);
        CALL_FACTORY_ENTRY("thrust::copy_if",
                        CALL("std::copy_if",
                              makeMappedThrustPolicyEnum(0),
                              ARG(1), ARG(2), ARG(3), THRUST_FUNCTOR(4))),
        //Handling case: thrust::copy_if(device.begin(), device.end(), device.begin(), device.end(), f);
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasAlgorithm_copy_if,
        CONDITIONAL_FACTORY_ENTRY(
          CheckThrustArgType(1, "thrust::device_ptr"),
          CALL_FACTORY_ENTRY("thrust::copy_if",
                         CALL(MapNames::getDpctNamespace() + "copy_if",
                              CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                              ARG(0), ARG(1), ARG(2), ARG(3), THRUST_FUNCTOR(4))),
          CALL_FACTORY_ENTRY("thrust::copy_if",
                         CALL(MapNames::getDpctNamespace() + "copy_if",
                              ARG("oneapi::dpl::execution::seq"),
                              ARG(0), ARG(1), ARG(2), ARG(3), THRUST_FUNCTOR(4)))))
      ))
)

// thrust::make_zip_iterator
CALL_FACTORY_ENTRY("thrust::make_zip_iterator",  CALL("oneapi::dpl::make_zip_iterator",  ARG(0)))


// thrust::inclusive_scan_by_key
thrustFactory("thrust::inclusive_scan_by_key",
              {{5,PolicyState::HasPolicy,4,"oneapi::dpl::inclusive_scan_by_segment", HelperFeatureEnum::no_feature_helper},
               {4,PolicyState::NoPolicy, 4,"oneapi::dpl::inclusive_scan_by_segment", HelperFeatureEnum::no_feature_helper},
               {6,PolicyState::HasPolicy,4,"oneapi::dpl::inclusive_scan_by_segment", HelperFeatureEnum::no_feature_helper},
               {5,PolicyState::NoPolicy, 4,"oneapi::dpl::inclusive_scan_by_segment", HelperFeatureEnum::no_feature_helper},
               {7,PolicyState::HasPolicy,4,"oneapi::dpl::inclusive_scan_by_segment", HelperFeatureEnum::no_feature_helper},
               {6,PolicyState::NoPolicy, 4,"oneapi::dpl::inclusive_scan_by_segment", HelperFeatureEnum::no_feature_helper}}),


// thrust::exclusive_scan_by_key
thrustFactory("thrust::exclusive_scan_by_key",
              {{5,PolicyState::HasPolicy,4,"oneapi::dpl::exclusive_scan_by_segment", HelperFeatureEnum::no_feature_helper},
               {4,PolicyState::NoPolicy, 4,"oneapi::dpl::exclusive_scan_by_segment", HelperFeatureEnum::no_feature_helper},
               {6,PolicyState::HasPolicy,4,"oneapi::dpl::exclusive_scan_by_segment", HelperFeatureEnum::no_feature_helper},
               {5,PolicyState::NoPolicy, 4,"oneapi::dpl::exclusive_scan_by_segment", HelperFeatureEnum::no_feature_helper},
               {7,PolicyState::HasPolicy,4,"oneapi::dpl::exclusive_scan_by_segment", HelperFeatureEnum::no_feature_helper},
               {6,PolicyState::NoPolicy, 4,"oneapi::dpl::exclusive_scan_by_segment", HelperFeatureEnum::no_feature_helper},
               {8,PolicyState::HasPolicy,4,"oneapi::dpl::exclusive_scan_by_segment", HelperFeatureEnum::no_feature_helper},
               {7,PolicyState::NoPolicy, 4,"oneapi::dpl::exclusive_scan_by_segment", HelperFeatureEnum::no_feature_helper}}),


// thrust::make_reverse_iterator
CALL_FACTORY_ENTRY("thrust::make_reverse_iterator",  CALL("oneapi::dpl::make_reverse_iterator",  ARG(0)))

// thrust::exclusive_scan
CONDITIONAL_FACTORY_ENTRY(
  CheckArgCount(3),
  // thrust::exclusive_scan(data, data + 6, data)
  CONDITIONAL_FACTORY_ENTRY(
    CheckThrustArgType(1, "thrust::device_ptr"),
    CALL_FACTORY_ENTRY("thrust::exclusive_scan",
      CALL("std::exclusive_scan",
        CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
        ARG(0), ARG(1), ARG(2), ARG("0"))),
    CALL_FACTORY_ENTRY("thrust::exclusive_scan",
      CALL("std::exclusive_scan",
        ARG("oneapi::dpl::execution::seq"), ARG(0), ARG(1), ARG(2), ARG("0")))
  ),
  CONDITIONAL_FACTORY_ENTRY(
    CheckArgCount(4),
    CONDITIONAL_FACTORY_ENTRY(
      IsPolicyArgType(0),
      // thrust::exclusive_scan(thrust::host, data, data + 6, data);
      CALL_FACTORY_ENTRY("thrust::exclusive_scan",
        CALL("std::exclusive_scan",
          makeMappedThrustPolicyEnum(0), ARG(1), ARG(2), ARG(3), ARG("0"))),
      // thrust::exclusive_scan(data, data + 6, data, 4);
      CONDITIONAL_FACTORY_ENTRY(
        CheckThrustArgType(1, "thrust::device_ptr"),
        CALL_FACTORY_ENTRY("thrust::exclusive_scan",
          CALL("std::exclusive_scan",
            CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
            ARG(0), ARG(1), ARG(2), ARG(3))),
        CALL_FACTORY_ENTRY("thrust::exclusive_scan",
          CALL("std::exclusive_scan",
            ARG("oneapi::dpl::execution::seq"), ARG(0), ARG(1), ARG(2), ARG(3)))
      )
    ),
    CONDITIONAL_FACTORY_ENTRY(
      CheckArgCount(5),
      CONDITIONAL_FACTORY_ENTRY(
        IsPolicyArgType(0),
        // thrust::exclusive_scan(thrust::host, data, data + 6, data, 4);
        CALL_FACTORY_ENTRY("thrust::exclusive_scan",
          CALL("std::exclusive_scan",
            makeMappedThrustPolicyEnum(0), ARG(1), ARG(2), ARG(3), ARG(4))),
        // thrust::exclusive_scan(data, data + 10, data, 1, binary_op);
        CONDITIONAL_FACTORY_ENTRY(
          CheckThrustArgType(1, "thrust::device_ptr"),
          CALL_FACTORY_ENTRY("thrust::exclusive_scan",
            CALL("std::exclusive_scan",
              CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
              ARG(0), ARG(1), ARG(2), ARG(3), ARG(4))),
          CALL_FACTORY_ENTRY("thrust::exclusive_scan",
            CALL("std::exclusive_scan",
              ARG("oneapi::dpl::execution::seq"), ARG(0), ARG(1), ARG(2), ARG(3), ARG(4)))
        )
      ),
      // thrust::exclusive_scan(thrust::host, data, data + 10, data, 1, binary_op);
      CALL_FACTORY_ENTRY("thrust::exclusive_scan",
        CALL("std::exclusive_scan",
          makeMappedThrustPolicyEnum(0), ARG(1), ARG(2), ARG(3), ARG(4), ARG(5)))
    )
  )
)

// thrust::get
CALL_FACTORY_ENTRY(
    "thrust::get",
    CALL(TEMPLATED_CALLEE("std::get", std::vector<size_t>(1, 0)), ARG(0)))

// thrust::unique_by_key
thrustFactory("thrust::unique_by_key",
              {{4,PolicyState::HasPolicy,3,MapNames::getDpctNamespace()+"unique", HelperFeatureEnum::DplExtrasAlgorithm_unique_copy},
               {3,PolicyState::NoPolicy, 3,MapNames::getDpctNamespace()+"unique", HelperFeatureEnum::DplExtrasAlgorithm_unique_copy},
               {5,PolicyState::HasPolicy,3,MapNames::getDpctNamespace()+"unique", HelperFeatureEnum::DplExtrasAlgorithm_unique_copy},
               {4,PolicyState::NoPolicy, 3,MapNames::getDpctNamespace()+"unique", HelperFeatureEnum::DplExtrasAlgorithm_unique_copy}}),

// thrust::log10
CALL_FACTORY_ENTRY("thrust::log10", CALL("std::log10", ARG(0)))

// thrust::sqrt
CALL_FACTORY_ENTRY("thrust::sqrt", CALL("std::sqrt", ARG(0)))

// thrust::pow
CALL_FACTORY_ENTRY("thrust::pow", CALL("std::pow", ARG(0), ARG(1)))

// thrust::sin
CALL_FACTORY_ENTRY("thrust::sin", CALL("std::sin", ARG(0)))

// thrust::cos
CALL_FACTORY_ENTRY("thrust::cos", CALL("std::cos", ARG(0)))

// thrust::tan
CALL_FACTORY_ENTRY("thrust::tan", CALL("std::tan", ARG(0)))

// thrust::asin
CALL_FACTORY_ENTRY("thrust::asin", CALL("std::asin", ARG(0)))

// thrust::acos
CALL_FACTORY_ENTRY("thrust::acos", CALL("std::acos", ARG(0)))

// thrust::atan
CALL_FACTORY_ENTRY("thrust::atan", CALL("std::atan", ARG(0)))

// thrust::sinh
CALL_FACTORY_ENTRY("thrust::sinh", CALL("std::sinh", ARG(0)))

// thrust::cosh
CALL_FACTORY_ENTRY("thrust::cosh", CALL("std::cosh", ARG(0)))

// thrust::tanh
CALL_FACTORY_ENTRY("thrust::tanh", CALL("std::tanh", ARG(0)))

// thrust::asinh
CALL_FACTORY_ENTRY("thrust::asinh", CALL("std::asinh", ARG(0)))

// thrust::acosh
CALL_FACTORY_ENTRY("thrust::acosh", CALL("std::acosh", ARG(0)))

// thrust::atanh
CALL_FACTORY_ENTRY("thrust::atanh", CALL("std::atanh", ARG(0)))

// thrust::abs
CALL_FACTORY_ENTRY("thrust::abs", CALL("std::abs", ARG(0)))

// thrust::polar
CALL_FACTORY_ENTRY("thrust::polar", CALL("std::polar", ARG(0), ARG(1)))

// thrust::exp
CALL_FACTORY_ENTRY("thrust::exp", CALL("std::exp", ARG(0)))

// thrust::log
CALL_FACTORY_ENTRY("thrust::log", CALL("std::log", ARG(0)))

// thrust::distance
CALL_FACTORY_ENTRY("thrust::distance",
                   CALL("oneapi::dpl::distance", ARG(0), ARG(1)))

// thrust::make_permutation_iterator
CALL_FACTORY_ENTRY("thrust::make_permutation_iterator",
                   CALL("oneapi::dpl::make_permutation_iterator", ARG(0),
                        ARG(1)))

// thrust::make_transform_iterator
CALL_FACTORY_ENTRY("thrust::make_transform_iterator",
                   CALL("oneapi::dpl::make_transform_iterator", ARG(0),
                        ARG(1)))

// thrust::norm
CALL_FACTORY_ENTRY("thrust::norm", CALL("std::norm", ARG(0)))

// thrust::conj
CALL_FACTORY_ENTRY("thrust::conj", CALL("std::conj", ARG(0)))

// thrust::proj
CALL_FACTORY_ENTRY("thrust::proj", CALL("std::proj", ARG(0)))

// thrust::raw_reference_cast
CALL_FACTORY_ENTRY("thrust::raw_reference_cast", CALL(MapNames::getDpctNamespace() + "get_raw_reference", ARG(0)))

// thrust::minmax_element
thrustFactory("thrust::minmax_element",
              {{3,PolicyState::HasPolicy,2,"oneapi::dpl::minmax_element", HelperFeatureEnum::no_feature_helper},
               {2,PolicyState::NoPolicy, 2,"oneapi::dpl::minmax_element", HelperFeatureEnum::no_feature_helper},
               {4,PolicyState::HasPolicy,2,"oneapi::dpl::minmax_element", HelperFeatureEnum::no_feature_helper},
               {3,PolicyState::NoPolicy, 2,"oneapi::dpl::minmax_element", HelperFeatureEnum::no_feature_helper}}),

// thrust::is_sorted
thrustFactory("thrust::is_sorted",
              {{3,PolicyState::HasPolicy,2,"oneapi::dpl::is_sorted", HelperFeatureEnum::no_feature_helper},
               {2,PolicyState::NoPolicy, 2,"oneapi::dpl::is_sorted", HelperFeatureEnum::no_feature_helper},
               {4,PolicyState::HasPolicy,2,"oneapi::dpl::is_sorted", HelperFeatureEnum::no_feature_helper},
               {3,PolicyState::NoPolicy, 2,"oneapi::dpl::is_sorted", HelperFeatureEnum::no_feature_helper}}),

// thrust::partition
thrustFactory("thrust::partition",
              {{4,PolicyState::HasPolicy,2,"oneapi::dpl::partition", HelperFeatureEnum::no_feature_helper},
               {3,PolicyState::NoPolicy, 2,"oneapi::dpl::partition", HelperFeatureEnum::no_feature_helper},
               {5,PolicyState::HasPolicy,3,MapNames::getDpctNamespace() + "partition", HelperFeatureEnum::DplExtrasAlgorithm_partition},
               {4,PolicyState::NoPolicy, 3,MapNames::getDpctNamespace() + "partition", HelperFeatureEnum::DplExtrasAlgorithm_partition}}),


// thrust::unique_copy
CONDITIONAL_FACTORY_ENTRY(
  CheckArgCount(5),
  CONDITIONAL_FACTORY_ENTRY(
    makeCheckAnd(CheckIsPtr(1), makeCheckNot(checkIsUSM())),
    //Handling case: thrust::unique_copy(policy, ptr, ptr, ptr, pred);
    IFELSE_FACTORY_ENTRY(
      "thrust::unique_copy",
      FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
        CALL_FACTORY_ENTRY("thrust::unique_copy", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
      FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
        CALL_FACTORY_ENTRY("thrust::unique_copy",
                          CALL("oneapi::dpl::unique_copy",
                                CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(3)), ARG(3)),
                                ARG(4)))),
      CALL_FACTORY_ENTRY("thrust::unique_copy",
                        CALL("oneapi::dpl::unique_copy",
                              ARG("oneapi::dpl::execution::seq"),
                              ARG(1), ARG(2), ARG(3), ARG(4)))),
    // Handling case: thrust::unique_by_key(thrust::device, iterator, iterator, iterator, pred);
    CALL_FACTORY_ENTRY("thrust::unique_copy",
                      CALL("oneapi::dpl::unique_copy",
                            makeMappedThrustPolicyEnum(0),
                            ARG(1), ARG(2), ARG(3),ARG(4)))
  ),
  CONDITIONAL_FACTORY_ENTRY(
    CheckArgCount(3),
    CONDITIONAL_FACTORY_ENTRY(
      makeCheckAnd(CheckIsPtr(1), makeCheckNot(checkIsUSM())),
      //Handling case: thrust::unique_copy(ptr, ptr, pred);
      IFELSE_FACTORY_ENTRY(
        "thrust::unique_copy",
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
          CALL_FACTORY_ENTRY("thrust::unique_copy", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
          CALL_FACTORY_ENTRY("thrust::unique_copy",
                            CALL("oneapi::dpl::unique_copy",
                                  CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(0)), ARG(0)),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(0)), ARG(1)),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(2))))),
        CALL_FACTORY_ENTRY("thrust::unique_copy",
                          CALL("oneapi::dpl::unique_copy",
                                ARG("oneapi::dpl::execution::seq"),
                                ARG(0), ARG(1), ARG(2)))),
      CONDITIONAL_FACTORY_ENTRY(
        CheckThrustArgType(1, "thrust::device_ptr"),
        // Handling case: thrust::unique_copy(iterator, iterator, pred);
        CALL_FACTORY_ENTRY("thrust::unique_copy",
                            CALL("oneapi::dpl::unique_copy",
                                CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                ARG(0), ARG(1), ARG(2))),
        CALL_FACTORY_ENTRY("thrust::unique_copy",
                            CALL("oneapi::dpl::unique_copy",
                              ARG("oneapi::dpl::execution::seq"),
                              ARG(0), ARG(1), ARG(2))))
    ),
    CONDITIONAL_FACTORY_ENTRY(
      makeCheckAnd(CheckIsPtr(1), makeCheckNot(checkIsUSM())),
      CONDITIONAL_FACTORY_ENTRY(
        IsPolicyArgType(0),
        //Handling case: thrust::unique_copy(policy, ptr, ptr, pred);
        IFELSE_FACTORY_ENTRY(
          "thrust::unique_copy",
          FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
            CALL_FACTORY_ENTRY("thrust::unique_copy", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
          FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
            CALL_FACTORY_ENTRY("thrust::unique_copy",
                              CALL("oneapi::dpl::unique_copy",
                                    CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                    CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                    CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2)),
                                    CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(3)), ARG(3))
                                    ))),
          CALL_FACTORY_ENTRY("thrust::unique_copy",
                            CALL("oneapi::dpl::unique_copy",
                                  ARG("oneapi::dpl::execution::seq"),
                                  ARG(1), ARG(2), ARG(3)))),
        //Handling case: thrust::unique_copy(ptr, ptr, ptr,  pred);
        IFELSE_FACTORY_ENTRY(
          "thrust::unique_copy",
          FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
            CALL_FACTORY_ENTRY("thrust::unique_copy", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
          FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
            CALL_FACTORY_ENTRY("thrust::unique_copy",
                              CALL("oneapi::dpl::unique_copy",
                                    CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                    CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(0)), ARG(0)),
                                    CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                    CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2)),
                                    ARG(3)))),
          CALL_FACTORY_ENTRY("thrust::unique_copy",
                            CALL("oneapi::dpl::unique_copy",
                                  ARG("oneapi::dpl::execution::seq"),
                                  ARG(0), ARG(1), ARG(2), ARG(3))))),
      CONDITIONAL_FACTORY_ENTRY(
        IsPolicyArgType(0),
        // Handling case: thrust::unique_copy(thrust::device, iterator, iterator, pred);
        CALL_FACTORY_ENTRY("thrust::unique_copy",
                            CALL("oneapi::dpl::unique_copy",
                                makeMappedThrustPolicyEnum(0),
                                ARG(1), ARG(2), ARG(3))),
        CONDITIONAL_FACTORY_ENTRY(
          CheckThrustArgType(1, "thrust::device_ptr"),
          // Handling case: thrust::unique_copy(iterator, iterator, iterator, pred);
          CALL_FACTORY_ENTRY("thrust::unique_copy",
                              CALL("oneapi::dpl::unique_copy",
                                  CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                  ARG(0), ARG(1), ARG(2), ARG(3))),
          CALL_FACTORY_ENTRY("thrust::unique_copy",
                              CALL("oneapi::dpl::unique_copy",
                                  ARG("oneapi::dpl::execution::seq"),
                                  ARG(0), ARG(1), ARG(2), ARG(3)))))
    )
  )
)

// thrust::stable_sort
CONDITIONAL_FACTORY_ENTRY(
  CheckArgCount(4),
  CONDITIONAL_FACTORY_ENTRY(
    makeCheckAnd(CheckIsPtr(1), makeCheckNot(checkIsUSM())),
    //Handling case: thrust::stable_sort(policy, ptr, ptr, comp);
    IFELSE_FACTORY_ENTRY(
      "thrust::stable_sort",
      FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
        CALL_FACTORY_ENTRY("thrust::stable_sort", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
      FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
        CALL_FACTORY_ENTRY("thrust::stable_sort",
                          CALL("oneapi::dpl::stable_sort",
                                CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2)),
                                ARG(3)))),
      CALL_FACTORY_ENTRY("thrust::stable_sort",
                        CALL("oneapi::dpl::stable_sort",
                              ARG("oneapi::dpl::execution::seq"),
                              ARG(1), ARG(2), ARG(3)))),
    // Handling case: thrust::unique_by_key(thrust::device, d_values.begin(), d_output_keys.end(), d_output_values.begin(), comp);
    CALL_FACTORY_ENTRY("thrust::stable_sort",
                      CALL("oneapi::dpl::stable_sort",
                            makeMappedThrustPolicyEnum(0),
                            ARG(1), ARG(2), ARG(3)))
  ),
  CONDITIONAL_FACTORY_ENTRY(
    CheckArgCount(2),
    CONDITIONAL_FACTORY_ENTRY(
      makeCheckAnd(CheckIsPtr(1), makeCheckNot(checkIsUSM())),
      //Handling case: thrust::stable_sort(ptr, ptr);
      IFELSE_FACTORY_ENTRY(
        "thrust::stable_sort",
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
          CALL_FACTORY_ENTRY("thrust::stable_sort", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
          CALL_FACTORY_ENTRY("thrust::stable_sort",
                            CALL("oneapi::dpl::stable_sort",
                                  CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(0)), ARG(0)),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1))))),
        CALL_FACTORY_ENTRY("thrust::stable_sort",
                          CALL("oneapi::dpl::stable_sort",
                                ARG("oneapi::dpl::execution::seq"),
                                ARG(0), ARG(1)))),
      CONDITIONAL_FACTORY_ENTRY(
        CheckThrustArgType(1, "thrust::device_ptr"),
        // Handling case: thrust::stable_sort(h_keys.begin(), h_keys.end());
        CALL_FACTORY_ENTRY("thrust::stable_sort",
                            CALL("oneapi::dpl::stable_sort",
                                CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                ARG(0), ARG(1))),
        CALL_FACTORY_ENTRY("thrust::stable_sort",
                            CALL("oneapi::dpl::stable_sort",
                              ARG("oneapi::dpl::execution::seq"),
                              ARG(0), ARG(1))))
    ),
    CONDITIONAL_FACTORY_ENTRY(
      makeCheckAnd(CheckIsPtr(1), makeCheckNot(checkIsUSM())),
      CONDITIONAL_FACTORY_ENTRY(
        IsPolicyArgType(0),
        //Handling case: thrust::stable_sort(policy, ptr, ptr);
        IFELSE_FACTORY_ENTRY(
          "thrust::stable_sort",
          FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
            CALL_FACTORY_ENTRY("thrust::stable_sort", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
          FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
            CALL_FACTORY_ENTRY("thrust::stable_sort",
                              CALL("oneapi::dpl::stable_sort",
                                CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2))))),
          CALL_FACTORY_ENTRY("thrust::stable_sort",
                            CALL("oneapi::dpl::stable_sort",
                                  ARG("oneapi::dpl::execution::seq"),
                                  ARG(1), ARG(2)))),
        //Handling case: thrust::stable_sort(ptr, ptr, pred);
        IFELSE_FACTORY_ENTRY(
          "thrust::stable_sort",
          FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
            CALL_FACTORY_ENTRY("thrust::stable_sort", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
          FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
            CALL_FACTORY_ENTRY("thrust::stable_sort",
                              CALL("oneapi::dpl::stable_sort",
                                    CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                    CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(0)), ARG(0)),
                                    CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                    ARG(2)))),
          CALL_FACTORY_ENTRY("thrust::stable_sort",
                            CALL("oneapi::dpl::stable_sort",
                                  ARG("oneapi::dpl::execution::seq"),
                                  ARG(0), ARG(1), ARG(2))))),
      CONDITIONAL_FACTORY_ENTRY(
        IsPolicyArgType(0),
        // Handling case: thrust::stable_sort(thrust::device, d_values.begin(), d_values.end());
        CALL_FACTORY_ENTRY("thrust::stable_sort",
                            CALL("oneapi::dpl::stable_sort",
                                makeMappedThrustPolicyEnum(0),
                                ARG(1), ARG(2))),
        CONDITIONAL_FACTORY_ENTRY(
          CheckThrustArgType(1, "thrust::device_ptr"),
          // Handling case: thrust::stable_sort(d_values.begin(), d_values.end(), comp);
          CALL_FACTORY_ENTRY("thrust::stable_sort",
                              CALL("oneapi::dpl::stable_sort",
                                  CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                  ARG(0), ARG(1), ARG(2))),
          CALL_FACTORY_ENTRY("thrust::stable_sort",
                              CALL("oneapi::dpl::stable_sort",
                                  ARG("oneapi::dpl::execution::seq"),
                                  ARG(0), ARG(1), ARG(2)))))
    )
  )
)


// thrust::set_difference_by_key
CONDITIONAL_FACTORY_ENTRY(
  CheckArgCount(10),
  CONDITIONAL_FACTORY_ENTRY(
    makeCheckAnd(CheckIsPtr(1), makeCheckNot(checkIsUSM())),
    //Handling case: thrust::set_difference_by_key(policy, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, comp);
    IFELSE_FACTORY_ENTRY(
      "thrust::set_difference_by_key",
      FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
        CALL_FACTORY_ENTRY("thrust::set_difference_by_key", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
      FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
        CALL_FACTORY_ENTRY("thrust::set_difference_by_key",
                          CALL(MapNames::getDpctNamespace() + "set_difference",
                            CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                            CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                            CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2)),
                            CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(3)), ARG(3)),
                            CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(4)), ARG(4)),
                            CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(5)), ARG(5)),
                            CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(6)), ARG(6)),
                            CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(7)), ARG(7)),
                            CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(8)), ARG(8)),
                            ARG(9)))),
      CALL_FACTORY_ENTRY("thrust::set_difference_by_key",
                        CALL(MapNames::getDpctNamespace() + "set_difference",
                              ARG("oneapi::dpl::execution::seq"),
                              ARG(1), ARG(2), ARG(3), ARG(4), ARG(5), ARG(6), ARG(7), ARG(8), ARG(9)))),
    // Handling case: thrust::unique_by_key(thrust::device, iterator, iterator, iterator, , iterator, iterator, iterator, iterator, iterator, comp);
    CALL_FACTORY_ENTRY("thrust::set_difference_by_key",
                      CALL(MapNames::getDpctNamespace() + "set_difference",
                            makeMappedThrustPolicyEnum(0),
                            ARG(1), ARG(2), ARG(3), ARG(4), ARG(5), ARG(6), ARG(7), ARG(8), ARG(9)))
  ),
  CONDITIONAL_FACTORY_ENTRY(
    CheckArgCount(8),
    CONDITIONAL_FACTORY_ENTRY(
      makeCheckAnd(CheckIsPtr(1), makeCheckNot(checkIsUSM())),
      //Handling case: thrust::set_difference_by_key(ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr);
      IFELSE_FACTORY_ENTRY(
        "thrust::set_difference_by_key",
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
          CALL_FACTORY_ENTRY("thrust::set_difference_by_key", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
          CALL_FACTORY_ENTRY("thrust::set_difference_by_key",
                            CALL(MapNames::getDpctNamespace() + "set_difference",
                              CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                              CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(0)), ARG(0)),
                              CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                              CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2)),
                              CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(3)), ARG(3)),
                              CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(4)), ARG(4)),
                              CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(5)), ARG(5)),
                              CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(6)), ARG(6)),
                              CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(7)), ARG(7))))),
        CALL_FACTORY_ENTRY("thrust::set_difference_by_key",
                          CALL(MapNames::getDpctNamespace() + "set_difference",
                                ARG("oneapi::dpl::execution::seq"),
                                ARG(0), ARG(1), ARG(2), ARG(3), ARG(4), ARG(5), ARG(6), ARG(7)))),
      CONDITIONAL_FACTORY_ENTRY(
        CheckThrustArgType(1, "thrust::device_ptr"),
        // Handling case: thrust::set_difference_by_key(iterator, iterator, iterator, iterator, iterator, iterator, iterator, iterator);
        CALL_FACTORY_ENTRY("thrust::set_difference_by_key",
                            CALL(MapNames::getDpctNamespace() + "set_difference",
                                CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                ARG(0), ARG(1), ARG(2), ARG(3), ARG(4), ARG(5), ARG(6), ARG(7))),
        CALL_FACTORY_ENTRY("thrust::set_difference_by_key",
                            CALL(MapNames::getDpctNamespace() + "set_difference",
                              ARG("oneapi::dpl::execution::seq"),
                              ARG(0), ARG(1), ARG(2), ARG(3), ARG(4), ARG(5), ARG(6), ARG(7))))
    ),
    CONDITIONAL_FACTORY_ENTRY(
      makeCheckAnd(CheckIsPtr(1), makeCheckNot(checkIsUSM())),
      CONDITIONAL_FACTORY_ENTRY(
        IsPolicyArgType(0),
        //Handling case: thrust::set_difference_by_key(policy, ptr, ptr, ptr, ptr, ptr, ptr ptr, ptr);
        IFELSE_FACTORY_ENTRY(
          "thrust::set_difference_by_key",
          FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
            CALL_FACTORY_ENTRY("thrust::set_difference_by_key", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
          FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
            CALL_FACTORY_ENTRY("thrust::set_difference_by_key",
                              CALL(MapNames::getDpctNamespace() + "set_difference",
                                CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(3)), ARG(3)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(4)), ARG(4)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(5)), ARG(5)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(6)), ARG(6)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(7)), ARG(7)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(8)), ARG(8))))),
          CALL_FACTORY_ENTRY("thrust::set_difference_by_key",
                            CALL(MapNames::getDpctNamespace() + "set_difference",
                                  ARG("oneapi::dpl::execution::seq"),
                                  ARG(1), ARG(2), ARG(3), ARG(4), ARG(5), ARG(6), ARG(7), ARG(8)))),
        //Handling case: thrust::set_difference_by_key(ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, pred);
        IFELSE_FACTORY_ENTRY(
          "thrust::set_difference_by_key",
          FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
            CALL_FACTORY_ENTRY("thrust::set_difference_by_key", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
          FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
            CALL_FACTORY_ENTRY("thrust::set_difference_by_key",
                              CALL(MapNames::getDpctNamespace() + "set_difference",
                                CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(0)), ARG(0)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(3)), ARG(3)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(4)), ARG(4)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(5)), ARG(5)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(6)), ARG(6)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(7)), ARG(7)),
                                ARG(8)))),
          CALL_FACTORY_ENTRY("thrust::set_difference_by_key",
                            CALL(MapNames::getDpctNamespace() + "set_difference",
                                  ARG("oneapi::dpl::execution::seq"),
                                  ARG(0), ARG(1), ARG(2), ARG(3), ARG(4), ARG(5), ARG(6), ARG(7), ARG(8))))),
      CONDITIONAL_FACTORY_ENTRY(
        IsPolicyArgType(0),
        // Handling case: thrust::stabsset_difference_by_keyet_difference_by_keyle_sort(thrust::device, iterator, iterator, iterator, iterator, iterator, iterator, iterator, iterator);
        CALL_FACTORY_ENTRY("thrust::set_difference_by_key",
                            CALL(MapNames::getDpctNamespace() + "set_difference",
                                makeMappedThrustPolicyEnum(0),
                                ARG(1), ARG(2), ARG(3), ARG(4), ARG(5), ARG(6), ARG(7), ARG(8))),
        CONDITIONAL_FACTORY_ENTRY(
          CheckThrustArgType(1, "thrust::device_ptr"),
          // Handling case: thrust::set_difference_by_key(iterator, iterator, iterator, iterator, iterator, iterator, iterator, iterator, comp);
          CALL_FACTORY_ENTRY("thrust::set_difference_by_key",
                              CALL(MapNames::getDpctNamespace() + "set_difference",
                                  CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                  ARG(0), ARG(1), ARG(2), ARG(3), ARG(4), ARG(5), ARG(6), ARG(7), ARG(8))),
          CALL_FACTORY_ENTRY("thrust::set_difference_by_key",
                              CALL(MapNames::getDpctNamespace() + "set_difference",
                                  ARG("oneapi::dpl::execution::seq"),
                                  ARG(0), ARG(1), ARG(2), ARG(3), ARG(4), ARG(5), ARG(6), ARG(7), ARG(8)))))
    )
  )
)

// thrust::set_difference
CONDITIONAL_FACTORY_ENTRY(
  CheckArgCount(7),
  CONDITIONAL_FACTORY_ENTRY(
    makeCheckAnd(CheckIsPtr(1), makeCheckNot(checkIsUSM())),
    //Handling case: thrust::set_difference(policy, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, comp);
    IFELSE_FACTORY_ENTRY(
      "thrust::set_difference",
      FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
        CALL_FACTORY_ENTRY("thrust::set_difference", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
      FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
        CALL_FACTORY_ENTRY("thrust::set_difference",
                          CALL("oneapi::dpl::set_difference",
                                CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(3)), ARG(3)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(4)), ARG(4)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(5)), ARG(5)),
                                ARG(6)))),
      CALL_FACTORY_ENTRY("thrust::set_difference",
                        CALL("oneapi::dpl::set_difference",
                              ARG("oneapi::dpl::execution::seq"),
                              ARG(1), ARG(2), ARG(3), ARG(4), ARG(5), ARG(6)))),
    // Handling case: thrust::unique_by_key(thrust::device, iterator, iterator, iterator, , iterator, iterator, iterator, iterator, iterator, comp);
    CALL_FACTORY_ENTRY("thrust::set_difference",
                      CALL("oneapi::dpl::set_difference",
                            makeMappedThrustPolicyEnum(0),
                            ARG(1), ARG(2), ARG(3), ARG(4), ARG(5), ARG(6)))
  ),
  CONDITIONAL_FACTORY_ENTRY(
    CheckArgCount(5),
    CONDITIONAL_FACTORY_ENTRY(
      makeCheckAnd(CheckIsPtr(1), makeCheckNot(checkIsUSM())),
      //Handling case: thrust::set_difference(ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr);
      IFELSE_FACTORY_ENTRY(
        "thrust::set_difference",
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
          CALL_FACTORY_ENTRY("thrust::set_difference", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
          CALL_FACTORY_ENTRY("thrust::set_difference",
                            CALL("oneapi::dpl::set_difference",
                                  CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(0)), ARG(0)),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2)),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(3)), ARG(3)),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(4)), ARG(4))))),
        CALL_FACTORY_ENTRY("thrust::set_difference",
                          CALL("oneapi::dpl::set_difference",
                                ARG("oneapi::dpl::execution::seq"),
                                ARG(0), ARG(1), ARG(2), ARG(3), ARG(4)))),
      CONDITIONAL_FACTORY_ENTRY(
        CheckThrustArgType(1, "thrust::device_ptr"),
        // Handling case: thrust::set_difference(iterator, iterator, iterator, iterator, iterator, iterator, iterator, iterator,);
        CALL_FACTORY_ENTRY("thrust::set_difference",
                            CALL("oneapi::dpl::set_difference",
                                CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                ARG(0), ARG(1), ARG(2), ARG(3), ARG(4))),
        CALL_FACTORY_ENTRY("thrust::set_difference",
                            CALL("oneapi::dpl::set_difference",
                              ARG("oneapi::dpl::execution::seq"),
                              ARG(0), ARG(1), ARG(2), ARG(3), ARG(4))))
    ),
    CONDITIONAL_FACTORY_ENTRY(
      makeCheckAnd(CheckIsPtr(1), makeCheckNot(checkIsUSM())),
      CONDITIONAL_FACTORY_ENTRY(
        IsPolicyArgType(0),
        //Handling case: thrust::set_difference(policy, ptr, ptr, ptr, ptr, ptr, ptr,ptr, ptr);
        IFELSE_FACTORY_ENTRY(
          "thrust::set_difference",
          FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
            CALL_FACTORY_ENTRY("thrust::set_difference", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
          FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
            CALL_FACTORY_ENTRY("thrust::set_difference",
                              CALL("oneapi::dpl::set_difference",
                                    CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                    CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                    CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2)),
                                    CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(3)), ARG(3)),
                                    CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(4)), ARG(4)),
                                    ARG(5)))),
            CALL_FACTORY_ENTRY("thrust::set_difference",
                              CALL("oneapi::dpl::set_difference",
                                    ARG("oneapi::dpl::execution::seq"),
                                    ARG(1), ARG(2), ARG(3), ARG(4), ARG(5)))),
        //Handling case: thrust::set_difference(ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, pred);
        IFELSE_FACTORY_ENTRY(
          "thrust::set_difference",
          FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
            CALL_FACTORY_ENTRY("thrust::set_difference", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
          FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
            CALL_FACTORY_ENTRY("thrust::set_difference",
                              CALL("oneapi::dpl::set_difference",
                                    CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                    CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(0)), ARG(0)),
                                    CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                    CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2)),
                                    CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(3)), ARG(3)),
                                    CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(4)), ARG(4)),
                                    ARG(5)))),
          CALL_FACTORY_ENTRY("thrust::set_difference",
                            CALL("oneapi::dpl::set_difference",
                                  ARG("oneapi::dpl::execution::seq"),
                                  ARG(0), ARG(1), ARG(2), ARG(3), ARG(4), ARG(5))))),
      CONDITIONAL_FACTORY_ENTRY(
        IsPolicyArgType(0),
        // Handling case: thrust::stabsset_difference_by_keyet_difference_by_keyle_sort(thrust::device, iterator, iterator, iterator, iterator, iterator, iterator, iterator, iterator);
        CALL_FACTORY_ENTRY("thrust::set_difference",
                            CALL("oneapi::dpl::set_difference",
                                makeMappedThrustPolicyEnum(0),
                                ARG(1), ARG(2), ARG(3), ARG(4), ARG(5))),
        CONDITIONAL_FACTORY_ENTRY(
          CheckThrustArgType(1, "thrust::device_ptr"),
          // Handling case: thrust::set_difference(iterator, iterator, iterator, iterator, iterator, iterator, iterator, iterator, comp);
          CALL_FACTORY_ENTRY("thrust::set_difference",
                              CALL("oneapi::dpl::set_difference",
                                  CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                  ARG(0), ARG(1), ARG(2), ARG(3), ARG(4), ARG(5))),
          CALL_FACTORY_ENTRY("thrust::set_difference",
                              CALL("oneapi::dpl::set_difference",
                                  ARG("oneapi::dpl::execution::seq"),
                                  ARG(0), ARG(1), ARG(2), ARG(3), ARG(4), ARG(5)))))
    )
  )
)

// thrust::remove_copy
CONDITIONAL_FACTORY_ENTRY(
  CheckArgCount(5),
  CONDITIONAL_FACTORY_ENTRY(
    makeCheckAnd(CheckIsPtr(1), makeCheckNot(checkIsUSM())),
    //Handling case: thrust::remove_copy(policy, ptr, ptr, ptr, val);
    IFELSE_FACTORY_ENTRY(
      "thrust::remove_copy",
      FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
        CALL_FACTORY_ENTRY("thrust::remove_copy", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
      FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
        CALL_FACTORY_ENTRY("thrust::remove_copy",
                          CALL("oneapi::dpl::remove_copy",
                                CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(3)), ARG(3)),
                                ARG(4)))),
      CALL_FACTORY_ENTRY("thrust::remove_copy",
                        CALL("oneapi::dpl::remove_copy",
                              ARG("oneapi::dpl::execution::seq"),
                              ARG(1), ARG(2), ARG(3), ARG(4)))),
    // Handling case: thrust::unique_by_key(thrust::device, iterator, iterator, iterator, val);
    CALL_FACTORY_ENTRY("thrust::remove_copy",
                      CALL("oneapi::dpl::remove_copy",
                            makeMappedThrustPolicyEnum(0),
                            ARG(1), ARG(2), ARG(3), ARG(4)))
  ),

    CONDITIONAL_FACTORY_ENTRY(
      makeCheckAnd(CheckIsPtr(1), makeCheckNot(checkIsUSM())),
      //Handling case: thrust::remove_copy(ptr, ptr, ptr, val);
      IFELSE_FACTORY_ENTRY(
        "thrust::remove_copy",
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
          CALL_FACTORY_ENTRY("thrust::remove_copy", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
          CALL_FACTORY_ENTRY("thrust::remove_copy",
                            CALL("oneapi::dpl::remove_copy",
                                  CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(0)), ARG(0)),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2)),
                                  ARG(3)))),
        CALL_FACTORY_ENTRY("thrust::remove_copy",
                          CALL("oneapi::dpl::remove_copy",
                                ARG("oneapi::dpl::execution::seq"),
                                ARG(0), ARG(1), ARG(2), ARG(3)))),
      CONDITIONAL_FACTORY_ENTRY(
        CheckThrustArgType(1, "thrust::device_ptr"),
        // Handling case: thrust::remove_copy(iterator, iterator, iterator, val);
        CALL_FACTORY_ENTRY("thrust::remove_copy",
                            CALL("oneapi::dpl::remove_copy",
                                CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                ARG(0), ARG(1), ARG(2), ARG(3))),
        CALL_FACTORY_ENTRY("thrust::remove_copy",
                            CALL("oneapi::dpl::remove_copy",
                              ARG("oneapi::dpl::execution::seq"),
                              ARG(0), ARG(1), ARG(2), ARG(3))))
    )
)



// thrust::transform_exclusive_scan
CONDITIONAL_FACTORY_ENTRY(
  CheckArgCount(7),
  CONDITIONAL_FACTORY_ENTRY(
    makeCheckAnd(CheckIsPtr(1), makeCheckNot(checkIsUSM())),
    //Handling case: thrust::transform_exclusive_scan(policy, ptr, ptr, ptr, val);
    IFELSE_FACTORY_ENTRY(
      "thrust::transform_exclusive_scan",
      FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
        CALL_FACTORY_ENTRY("thrust::transform_exclusive_scan", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
      FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
        CALL_FACTORY_ENTRY("thrust::transform_exclusive_scan",
                          CALL("oneapi::dpl::transform_exclusive_scan",
                                CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(3)), ARG(3)),
                                ARG(5), ARG(6), ARG(4)))),
      CALL_FACTORY_ENTRY("thrust::transform_exclusive_scan",
                        CALL("oneapi::dpl::transform_exclusive_scan",
                              ARG("oneapi::dpl::execution::seq"),
                              ARG(1), ARG(2), ARG(3), ARG(5), ARG(6), ARG(4)))),
    // Handling case: thrust::unique_by_key(thrust::device, iterator, iterator, iterator, val);
    CALL_FACTORY_ENTRY("thrust::transform_exclusive_scan",
                      CALL("oneapi::dpl::transform_exclusive_scan",
                            makeMappedThrustPolicyEnum(0),
                            ARG(1), ARG(2), ARG(3), ARG(5), ARG(6), ARG(4)))
  ),

    CONDITIONAL_FACTORY_ENTRY(
      makeCheckAnd(CheckIsPtr(1), makeCheckNot(checkIsUSM())),
      //Handling case: thrust::transform_exclusive_scan(ptr, ptr, ptr, ptr);
      IFELSE_FACTORY_ENTRY(
        "thrust::transform_exclusive_scan",
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
          CALL_FACTORY_ENTRY("thrust::transform_exclusive_scan", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
          CALL_FACTORY_ENTRY("thrust::transform_exclusive_scan",
                            CALL("oneapi::dpl::transform_exclusive_scan",
                                  CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(0)), ARG(0)),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2)),
                                  ARG(4), ARG(5), ARG(3)))),
        CALL_FACTORY_ENTRY("thrust::transform_exclusive_scan",
                          CALL("oneapi::dpl::transform_exclusive_scan",
                                ARG("oneapi::dpl::execution::seq"),
                                ARG(0), ARG(1), ARG(2), ARG(4), ARG(5), ARG(3)))),
      CONDITIONAL_FACTORY_ENTRY(
        CheckThrustArgType(1, "thrust::device_ptr"),
        // Handling case: thrust::transform_exclusive_scan(iterator, iterator, iterator, iterator);
        CALL_FACTORY_ENTRY("thrust::transform_exclusive_scan",
                            CALL("oneapi::dpl::transform_exclusive_scan",
                                CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                ARG(0), ARG(1), ARG(2), ARG(4), ARG(5), ARG(3))),
        CALL_FACTORY_ENTRY("thrust::transform_exclusive_scan",
                            CALL("oneapi::dpl::transform_exclusive_scan",
                              ARG("oneapi::dpl::execution::seq"),
                              ARG(0), ARG(1), ARG(2), ARG(4), ARG(5), ARG(3))))
    )
)

// thrust::tabulate
CONDITIONAL_FACTORY_ENTRY(
  CheckArgCount(4),
  CONDITIONAL_FACTORY_ENTRY(
    makeCheckAnd(CheckIsPtr(1), makeCheckNot(checkIsUSM())),
    //Handling case: thrust::tabulate(policy, ptr, ptr, val);
    IFELSE_FACTORY_ENTRY(
      "thrust::tabulate",
      FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
        CALL_FACTORY_ENTRY("thrust::tabulate", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
      FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
        CALL_FACTORY_ENTRY("thrust::tabulate",
                          CALL(MapNames::getDpctNamespace() + "for_each_index",
                                CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2)),
                                ARG(3)))),
      CALL_FACTORY_ENTRY("thrust::tabulate",
                        CALL(MapNames::getDpctNamespace() + "for_each_index",
                              ARG("oneapi::dpl::execution::seq"),
                              ARG(1), ARG(2), ARG(3)))),
    // Handling case: thrust::unique_by_key(thrust::device, iterator, iterator, val);
    CALL_FACTORY_ENTRY("thrust::tabulate",
                      CALL(MapNames::getDpctNamespace() + "for_each_index",
                            makeMappedThrustPolicyEnum(0),
                            ARG(1), ARG(2), ARG(3)))
  ),

    CONDITIONAL_FACTORY_ENTRY(
      makeCheckAnd(CheckIsPtr(1), makeCheckNot(checkIsUSM())),
      //Handling case: thrust::tabulate(ptr, ptr, ptr, ptr);
      IFELSE_FACTORY_ENTRY(
        "thrust::tabulate",
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
          CALL_FACTORY_ENTRY("thrust::tabulate", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
          CALL_FACTORY_ENTRY("thrust::tabulate",
                            CALL(MapNames::getDpctNamespace() + "for_each_index",
                                  CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(0)), ARG(0)),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                  ARG(2)))),
        CALL_FACTORY_ENTRY("thrust::tabulate",
                          CALL(MapNames::getDpctNamespace() + "for_each_index",
                                ARG("oneapi::dpl::execution::seq"),
                                ARG(0), ARG(1), ARG(2)))),
      CONDITIONAL_FACTORY_ENTRY(
        CheckThrustArgType(1, "thrust::device_ptr"),
        // Handling case: thrust::tabulate(iterator, iterator, iterator);
        CALL_FACTORY_ENTRY("thrust::tabulate",
                            CALL(MapNames::getDpctNamespace() + "for_each_index",
                                CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                ARG(0), ARG(1), ARG(2))),
        CALL_FACTORY_ENTRY("thrust::tabulate",
                            CALL(MapNames::getDpctNamespace() + "for_each_index",
                              ARG("oneapi::dpl::execution::seq"),
                              ARG(0), ARG(1), ARG(2))))
    )
)

// thrust::for_each_n
CONDITIONAL_FACTORY_ENTRY(
  CheckArgCount(4),
  CONDITIONAL_FACTORY_ENTRY(
    makeCheckAnd(CheckIsPtr(1), makeCheckNot(checkIsUSM())),
    //Handling case: thrust::for_each_n(policy, ptr, ptr, ptr, val);
    IFELSE_FACTORY_ENTRY(
      "thrust::for_each_n",
      FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
        CALL_FACTORY_ENTRY("thrust::for_each_n", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
      FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
        CALL_FACTORY_ENTRY("thrust::for_each_n",
                          CALL("oneapi::dpl::for_each_n",
                                CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                ARG(2), THRUST_FUNCTOR(3)))),
      CALL_FACTORY_ENTRY("thrust::for_each_n",
                        CALL("oneapi::dpl::for_each_n",
                              ARG("oneapi::dpl::execution::seq"),
                              ARG(1), ARG(2), THRUST_FUNCTOR(3)))),
    // Handling case: thrust::unique_by_key(thrust::device, iterator, iterator, iterator, val);
    CALL_FACTORY_ENTRY("thrust::for_each_n",
                      CALL("oneapi::dpl::for_each_n",
                            makeMappedThrustPolicyEnum(0),
                            ARG(1), ARG(2), THRUST_FUNCTOR(3)))
  ),

    CONDITIONAL_FACTORY_ENTRY(
      makeCheckAnd(CheckIsPtr(0), makeCheckNot(checkIsUSM())),
      //Handling case: thrust::for_each_n(ptr, ptr, ptr);
      IFELSE_FACTORY_ENTRY(
        "thrust::for_each_n",
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
          CALL_FACTORY_ENTRY("thrust::for_each_n", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
          CALL_FACTORY_ENTRY("thrust::for_each_n",
                            CALL("oneapi::dpl::for_each_n",
                                  CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(0)), ARG(0)),
                                  ARG(1), THRUST_FUNCTOR(2)))),
        CALL_FACTORY_ENTRY("thrust::for_each_n",
                          CALL("oneapi::dpl::for_each_n",
                                ARG("oneapi::dpl::execution::seq"),
                                ARG(0), ARG(1), THRUST_FUNCTOR(2)))),
      CONDITIONAL_FACTORY_ENTRY(
        CheckThrustArgType(1, "thrust::device_ptr"),
        // Handling case: thrust::for_each_n(iterator, iterator, iterator);
        CALL_FACTORY_ENTRY("thrust::for_each_n",
                            CALL("oneapi::dpl::for_each_n",
                                CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                ARG(0), ARG(1), THRUST_FUNCTOR(2))),
        CALL_FACTORY_ENTRY("thrust::for_each_n",
                            CALL("oneapi::dpl::for_each_n",
                              ARG("oneapi::dpl::execution::seq"),
                              ARG(0), ARG(1), THRUST_FUNCTOR(2))))
    )
)




// thrust::set_intersection_by_key
CONDITIONAL_FACTORY_ENTRY(
  CheckArgCount(9),
  CONDITIONAL_FACTORY_ENTRY(
    makeCheckAnd(CheckIsPtr(1), makeCheckNot(checkIsUSM())),
    //Handling case: thrust::set_intersection_by_key(policy, ptr, ptr, ptr, ptr, ptr, ptr, ptr, comp);
    IFELSE_FACTORY_ENTRY(
      "thrust::set_intersection_by_key",
      FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
        CALL_FACTORY_ENTRY("thrust::set_intersection_by_key", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
      FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
        CALL_FACTORY_ENTRY("thrust::set_intersection_by_key",
                          CALL(MapNames::getDpctNamespace() + "set_intersection",
                            CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                            CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                            CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2)),
                            CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(3)), ARG(3)),
                            CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(4)), ARG(4)),
                            CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(5)), ARG(5)),
                            CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(6)), ARG(6)),
                            CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(7)), ARG(7)),
                            ARG(8)))),
      CALL_FACTORY_ENTRY("thrust::set_intersection_by_key",
                        CALL(MapNames::getDpctNamespace() + "set_intersection",
                              ARG("oneapi::dpl::execution::seq"),
                              ARG(1), ARG(2), ARG(3), ARG(4), ARG(5), ARG(6), ARG(7), ARG(8)))),
    // Handling case: thrust::unique_by_key(thrust::device, iterator, iterator, iterator, iterator, iterator, iterator, iterator, comp);
    CALL_FACTORY_ENTRY("thrust::set_intersection_by_key",
                      CALL(MapNames::getDpctNamespace() + "set_intersection",
                            makeMappedThrustPolicyEnum(0),
                            ARG(1), ARG(2), ARG(3), ARG(4), ARG(5), ARG(6), ARG(7), ARG(8)))
  ),
  CONDITIONAL_FACTORY_ENTRY(
    CheckArgCount(7),
    CONDITIONAL_FACTORY_ENTRY(
      makeCheckAnd(CheckIsPtr(1), makeCheckNot(checkIsUSM())),
      //Handling case: thrust::set_intersection_by_key(ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr);
      IFELSE_FACTORY_ENTRY(
        "thrust::set_intersection_by_key",
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
          CALL_FACTORY_ENTRY("thrust::set_intersection_by_key", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
          CALL_FACTORY_ENTRY("thrust::set_intersection_by_key",
                            CALL(MapNames::getDpctNamespace() + "set_intersection",
                              CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                              CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(0)), ARG(0)),
                              CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                              CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2)),
                              CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(3)), ARG(3)),
                              CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(4)), ARG(4)),
                              CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(5)), ARG(5)),
                              CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(6)), ARG(6))))),
        CALL_FACTORY_ENTRY("thrust::set_intersection_by_key",
                          CALL(MapNames::getDpctNamespace() + "set_intersection",
                                ARG("oneapi::dpl::execution::seq"),
                                ARG(0), ARG(1), ARG(2), ARG(3), ARG(4), ARG(5), ARG(6)))),
      CONDITIONAL_FACTORY_ENTRY(
        CheckThrustArgType(1, "thrust::device_ptr"),
        // Handling case: thrust::set_intersection_by_key(iterator, iterator, iterator, iterator, iterator, iterator, iterator);
        CALL_FACTORY_ENTRY("thrust::set_intersection_by_key",
                            CALL(MapNames::getDpctNamespace() + "set_intersection",
                                CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                ARG(0), ARG(1), ARG(2), ARG(3), ARG(4), ARG(5), ARG(6))),
        CALL_FACTORY_ENTRY("thrust::set_intersection_by_key",
                            CALL(MapNames::getDpctNamespace() + "set_intersection",
                              ARG("oneapi::dpl::execution::seq"),
                              ARG(0), ARG(1), ARG(2), ARG(3), ARG(4), ARG(5), ARG(6))))
    ),
    CONDITIONAL_FACTORY_ENTRY(
      makeCheckAnd(CheckIsPtr(1), makeCheckNot(checkIsUSM())),
      CONDITIONAL_FACTORY_ENTRY(
        IsPolicyArgType(0),
        //Handling case: thrust::set_intersection_by_key(policy, ptr, ptr, ptr, ptr, ptr, ptr ptr);
        IFELSE_FACTORY_ENTRY(
          "thrust::set_intersection_by_key",
          FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
            CALL_FACTORY_ENTRY("thrust::set_intersection_by_key", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
          FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
            CALL_FACTORY_ENTRY("thrust::set_intersection_by_key",
                              CALL(MapNames::getDpctNamespace() + "set_intersection",
                                CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(3)), ARG(3)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(4)), ARG(4)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(5)), ARG(5)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(6)), ARG(6)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(7)), ARG(7))))),
          CALL_FACTORY_ENTRY("thrust::set_intersection_by_key",
                            CALL(MapNames::getDpctNamespace() + "set_intersection",
                                  ARG("oneapi::dpl::execution::seq"),
                                  ARG(1), ARG(2), ARG(3), ARG(4), ARG(5), ARG(6), ARG(7)))),
        //Handling case: thrust::set_intersection_by_key(ptr, ptr, ptr, ptr, ptr, ptr, ptr, pred);
        IFELSE_FACTORY_ENTRY(
          "thrust::set_intersection_by_key",
          FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
            CALL_FACTORY_ENTRY("thrust::set_intersection_by_key", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
          FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
            CALL_FACTORY_ENTRY("thrust::set_intersection_by_key",
                              CALL(MapNames::getDpctNamespace() + "set_intersection",
                                CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(0)), ARG(0)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(3)), ARG(3)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(4)), ARG(4)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(5)), ARG(5)),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(6)), ARG(6)),
                                ARG(7)))),
          CALL_FACTORY_ENTRY("thrust::set_intersection_by_key",
                            CALL(MapNames::getDpctNamespace() + "set_intersection",
                                  ARG("oneapi::dpl::execution::seq"),
                                  ARG(0), ARG(1), ARG(2), ARG(3), ARG(4), ARG(5), ARG(6),ARG(7))))),
      CONDITIONAL_FACTORY_ENTRY(
        IsPolicyArgType(0),
        // Handling case: thrust::stabsset_difference_by_keyet_difference_by_keyle_sort(thrust::device, iterator, iterator, iterator, iterator, iterator, iterator, iterator);
        CALL_FACTORY_ENTRY("thrust::set_intersection_by_key",
                            CALL(MapNames::getDpctNamespace() + "set_intersection",
                                makeMappedThrustPolicyEnum(0),
                                ARG(1), ARG(2), ARG(3), ARG(4), ARG(5), ARG(6), ARG(7))),
        CONDITIONAL_FACTORY_ENTRY(
          CheckThrustArgType(1, "thrust::device_ptr"),
          // Handling case: thrust::set_intersection_by_key(iterator, iterator, iterator, iterator, iterator, iterator, iterator, comp);
          CALL_FACTORY_ENTRY("thrust::set_intersection_by_key",
                              CALL(MapNames::getDpctNamespace() + "set_intersection",
                                  CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                  ARG(0), ARG(1), ARG(2), ARG(3), ARG(4), ARG(5), ARG(6), ARG(7))),
          CALL_FACTORY_ENTRY("thrust::set_intersection_by_key",
                              CALL(MapNames::getDpctNamespace() + "set_intersection",
                                  ARG("oneapi::dpl::execution::seq"),
                                  ARG(0), ARG(1), ARG(2), ARG(3), ARG(4), ARG(5), ARG(6), ARG(7)))))
    )
  )
)

// thrust::partition_copy
CONDITIONAL_FACTORY_ENTRY(
  CheckArgCount(7),
  CONDITIONAL_FACTORY_ENTRY(
    makeCheckAnd(CheckIsPtr(1), makeCheckNot(checkIsUSM())),
    // Handling case: thrust::partition_copy(policy, ptr, ptr, ptr,  ptr, ptr, pred);
    FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasAlgorithm_partition_copy,
      IFELSE_FACTORY_ENTRY(
        "thrust::partition_copy",
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
          CALL_FACTORY_ENTRY("thrust::partition_copy", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
          CALL_FACTORY_ENTRY("thrust::partition_copy",
                            CALL(MapNames::getDpctNamespace() + "partition_copy",
                                  CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2)),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(3)), ARG(3)),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(4)), ARG(4)),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(5)), ARG(5)),
                                  ARG(6)))),
        CALL_FACTORY_ENTRY("thrust::partition_copy",
                          CALL(MapNames::getDpctNamespace() + "partition_copy",
                                ARG("oneapi::dpl::execution::seq"),
                                ARG(1), ARG(2), ARG(3), ARG(4), ARG(5), ARG(6))))),
    // Handling case: thrust::partition_copy(thrust::device, itr, itr, itr, itr, itr, pred);
      FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasAlgorithm_partition_copy,
        CALL_FACTORY_ENTRY("thrust::partition_copy",
                           CALL(MapNames::getDpctNamespace() + "partition_copy",
                                makeMappedThrustPolicyEnum(0),
                                ARG(1), ARG(2), ARG(3), ARG(4), ARG(5), ARG(6))))
  ),
  CONDITIONAL_FACTORY_ENTRY(
    CheckArgCount(5),
    CONDITIONAL_FACTORY_ENTRY(
      makeCheckAnd(CheckIsPtr(1), makeCheckNot(checkIsUSM())),
      //Handling case: thrust::partition_copy(ptr, ptr, ptr, pred);
      IFELSE_FACTORY_ENTRY(
        "thrust::partition_copy",
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
          CALL_FACTORY_ENTRY("thrust::partition_copy", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
          CALL_FACTORY_ENTRY("thrust::partition_copy",
                            CALL("oneapi::dpl::partition_copy",
                                  CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(0)), ARG(0)),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2)),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(3)), ARG(3)),
                                  ARG(4)))),
        CALL_FACTORY_ENTRY("thrust::partition_copy",
                           CALL("oneapi::dpl::partition_copy",
                                ARG("oneapi::dpl::execution::seq"),
                                ARG(0), ARG(1), ARG(2), ARG(3), ARG(4)))),
      //Handling case: thrust::partition_copy(iter, iter, iter, iter, pred);
      CONDITIONAL_FACTORY_ENTRY(
        CheckThrustArgType(1, "thrust::device_ptr"),
        CALL_FACTORY_ENTRY("thrust::partition_copy",
                          CALL("oneapi::dpl::partition_copy",
                                CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                ARG(0), ARG(1), ARG(2), ARG(3),ARG(4))),
        CALL_FACTORY_ENTRY("thrust::partition_copy",
                          CALL("oneapi::dpl::partition_copy",
                                ARG("oneapi::dpl::execution::seq"),
                                ARG(0), ARG(1), ARG(2), ARG(3), ARG(4))))
    ),
    CONDITIONAL_FACTORY_ENTRY(
      makeCheckAnd(CheckIsPtr(1), makeCheckNot(checkIsUSM())),
      CONDITIONAL_FACTORY_ENTRY(
        IsPolicyArgType(0),
        //Handling case: thrust::partition_copy(policy, ptr, ptr, ptr, ptr, pred);
        IFELSE_FACTORY_ENTRY(
          "thrust::partition_copy",
          FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
            CALL_FACTORY_ENTRY("thrust::partition_copy", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
          FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
            CALL_FACTORY_ENTRY("thrust::partition_copy",
                              CALL("oneapi::dpl::partition_copy",
                                    CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                    CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                    CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2)),
                                    CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(3)), ARG(3)),
                                    CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(4)), ARG(4)),
                                    ARG(5)))),
          CALL_FACTORY_ENTRY("thrust::partition_copy",
                             CALL("oneapi::dpl::partition_copy",
                                  ARG("oneapi::dpl::execution::seq"),
                                  ARG(1), ARG(2), ARG(3), ARG(4), ARG(5)))),
        //Handling case: thrust::partition_copy(ptr, ptr, ptr, ptr, ptr, pred);
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasAlgorithm_partition_copy,
          IFELSE_FACTORY_ENTRY(
            "thrust::partition_copy",
            FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
              CALL_FACTORY_ENTRY("thrust::partition_copy", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
            FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
              CALL_FACTORY_ENTRY("thrust::partition_copy",
                                CALL(MapNames::getDpctNamespace() + "partition_copy",
                                      CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                      CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(0)), ARG(0)),
                                      CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                      CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2)),
                                      CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(3)), ARG(3)),
                                      CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(4)), ARG(4)),
                                      ARG(5)))),
            CALL_FACTORY_ENTRY("thrust::partition_copy",
                              CALL(MapNames::getDpctNamespace() + "partition_copy",
                                    ARG("oneapi::dpl::execution::seq"),
                                    ARG(0), ARG(1), ARG(2), ARG(3), ARG(4), ARG(5)))))),
      CONDITIONAL_FACTORY_ENTRY(
        IsPolicyArgType(0),
        //Handling case: thrust::partition_copy(policy, itr, itr, itr, itr, pred);
        CALL_FACTORY_ENTRY("thrust::partition_copy",
                          CALL("oneapi::dpl::partition_copy",
                                makeMappedThrustPolicyEnum(0),
                                ARG(1), ARG(2), ARG(3), ARG(4), ARG(5))),
        //Handling case: thrust::partition_copy(itr, itr, itr, itr, itr, pred);
        CONDITIONAL_FACTORY_ENTRY(
          CheckThrustArgType(1, "thrust::device_ptr"),
          FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasAlgorithm_partition_copy,
            CALL_FACTORY_ENTRY("thrust::partition_copy",
                              CALL(MapNames::getDpctNamespace() + "partition_copy",
                                    CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                    ARG(0), ARG(1), ARG(2), ARG(3), ARG(4), ARG(5)))),
          FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasAlgorithm_partition_copy,
            CALL_FACTORY_ENTRY("thrust::partition_copy",
                              CALL(MapNames::getDpctNamespace() + "partition_copy",
                                    ARG("oneapi::dpl::execution::seq"),
                                    ARG(0), ARG(1), ARG(2), ARG(3), ARG(4), ARG(5))))))
    )
  )
)

// thrust::stable_partition_copy
CONDITIONAL_FACTORY_ENTRY(
  CheckArgCount(7),
  CONDITIONAL_FACTORY_ENTRY(
    makeCheckAnd(CheckIsPtr(1), makeCheckNot(checkIsUSM())),
    // Handling case: thrust::stable_partition_copy(policy, ptr, ptr, ptr,  ptr, ptr, pred);
    FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasAlgorithm_stable_partition_copy,
      IFELSE_FACTORY_ENTRY(
        "thrust::stable_partition_copy",
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
          CALL_FACTORY_ENTRY("thrust::stable_partition_copy", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
          CALL_FACTORY_ENTRY("thrust::stable_partition_copy",
                            CALL(MapNames::getDpctNamespace() + "stable_partition_copy",
                                  CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2)),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(3)), ARG(3)),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(4)), ARG(4)),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(5)), ARG(5)),
                                  ARG(6)))),
        CALL_FACTORY_ENTRY("thrust::stable_partition_copy",
                          CALL(MapNames::getDpctNamespace() + "stable_partition_copy",
                                ARG("oneapi::dpl::execution::seq"),
                                ARG(1), ARG(2), ARG(3), ARG(4), ARG(5), ARG(6))))),
    // Handling case: thrust::stable_partition_copy(thrust::device, itr, itr, itr, itr, itr, pred);
      FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasAlgorithm_stable_partition_copy,
        CALL_FACTORY_ENTRY("thrust::stable_partition_copy",
                           CALL(MapNames::getDpctNamespace() + "stable_partition_copy",
                                makeMappedThrustPolicyEnum(0),
                                ARG(1), ARG(2), ARG(3), ARG(4), ARG(5), ARG(6))))
  ),
  CONDITIONAL_FACTORY_ENTRY(
    CheckArgCount(5),
    CONDITIONAL_FACTORY_ENTRY(
      makeCheckAnd(CheckIsPtr(1), makeCheckNot(checkIsUSM())),
      //Handling case: thrust::stable_partition_copy(ptr, ptr, ptr, pred);
      IFELSE_FACTORY_ENTRY(
        "thrust::stable_partition_copy",
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
          CALL_FACTORY_ENTRY("thrust::stable_partition_copy", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
          CALL_FACTORY_ENTRY("thrust::stable_partition_copy",
                            CALL(MapNames::getDpctNamespace() + "stable_partition_copy",
                                  CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(0)), ARG(0)),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2)),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(3)), ARG(3)),
                                  ARG(4)))),
        CALL_FACTORY_ENTRY("thrust::stable_partition_copy",
                           CALL(MapNames::getDpctNamespace() + "stable_partition_copy",
                                ARG("oneapi::dpl::execution::seq"),
                                ARG(0), ARG(1), ARG(2), ARG(3), ARG(4)))),
      //Handling case: thrust::stable_partition_copy(iter, iter, iter, iter, pred);
      CONDITIONAL_FACTORY_ENTRY(
        CheckThrustArgType(1, "thrust::device_ptr"),
        CALL_FACTORY_ENTRY("thrust::stable_partition_copy",
                          CALL(MapNames::getDpctNamespace() + "stable_partition_copy",
                                CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                ARG(0), ARG(1), ARG(2), ARG(3),ARG(4))),
        CALL_FACTORY_ENTRY("thrust::stable_partition_copy",
                          CALL(MapNames::getDpctNamespace() + "stable_partition_copy",
                                ARG("oneapi::dpl::execution::seq"),
                                ARG(0), ARG(1), ARG(2), ARG(3), ARG(4))))
    ),
    CONDITIONAL_FACTORY_ENTRY(
      makeCheckAnd(CheckIsPtr(1), makeCheckNot(checkIsUSM())),
      CONDITIONAL_FACTORY_ENTRY(
        IsPolicyArgType(0),
        //Handling case: thrust::stable_partition_copy(policy, ptr, ptr, ptr, ptr, pred);
        IFELSE_FACTORY_ENTRY(
          "thrust::stable_partition_copy",
          FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
            CALL_FACTORY_ENTRY("thrust::stable_partition_copy", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
          FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
            CALL_FACTORY_ENTRY("thrust::stable_partition_copy",
                              CALL(MapNames::getDpctNamespace() + "stable_partition_copy",
                                    CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                    CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                    CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2)),
                                    CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(3)), ARG(3)),
                                    CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(4)), ARG(4)),
                                    ARG(5)))),
          CALL_FACTORY_ENTRY("thrust::stable_partition_copy",
                             CALL(MapNames::getDpctNamespace() + "stable_partition_copy",
                                  ARG("oneapi::dpl::execution::seq"),
                                  ARG(1), ARG(2), ARG(3), ARG(4), ARG(5)))),
        //Handling case: thrust::stable_partition_copy(ptr, ptr, ptr, ptr, ptr, pred);
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasAlgorithm_stable_partition_copy,
          IFELSE_FACTORY_ENTRY(
            "thrust::stable_partition_copy",
            FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
              CALL_FACTORY_ENTRY("thrust::stable_partition_copy", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
            FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
              CALL_FACTORY_ENTRY("thrust::stable_partition_copy",
                                CALL(MapNames::getDpctNamespace() + "stable_partition_copy",
                                      CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                      CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(0)), ARG(0)),
                                      CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                      CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2)),
                                      CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(3)), ARG(3)),
                                      CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(4)), ARG(4)),
                                      ARG(5)))),
            CALL_FACTORY_ENTRY("thrust::stable_partition_copy",
                              CALL(MapNames::getDpctNamespace() + "stable_partition_copy",
                                    ARG("oneapi::dpl::execution::seq"),
                                    ARG(0), ARG(1), ARG(2), ARG(3), ARG(4), ARG(5)))))),
      CONDITIONAL_FACTORY_ENTRY(
        IsPolicyArgType(0),
        //Handling case: thrust::stable_partition_copy(policy, itr, itr, itr, itr, pred);
        CALL_FACTORY_ENTRY("thrust::stable_partition_copy",
                          CALL(MapNames::getDpctNamespace() + "stable_partition_copy",
                                makeMappedThrustPolicyEnum(0),
                                ARG(1), ARG(2), ARG(3), ARG(4), ARG(5))),
        //Handling case: thrust::stable_partition_copy(itr, itr, itr, itr, itr, pred);
        CONDITIONAL_FACTORY_ENTRY(
          CheckThrustArgType(1, "thrust::device_ptr"),
          FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasAlgorithm_stable_partition_copy,
            CALL_FACTORY_ENTRY("thrust::stable_partition_copy",
                              CALL(MapNames::getDpctNamespace() + "stable_partition_copy",
                                    CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                    ARG(0), ARG(1), ARG(2), ARG(3), ARG(4), ARG(5)))),
          FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasAlgorithm_stable_partition_copy,
            CALL_FACTORY_ENTRY("thrust::stable_partition_copy",
                              CALL(MapNames::getDpctNamespace() + "stable_partition_copy",
                                    ARG("oneapi::dpl::execution::seq"),
                                    ARG(0), ARG(1), ARG(2), ARG(3), ARG(4), ARG(5))))))
    )
  )
)

// thrust::stable_partition
CONDITIONAL_FACTORY_ENTRY(
  CheckArgCount(5),
  CONDITIONAL_FACTORY_ENTRY(
    makeCheckAnd(CheckIsPtr(1), makeCheckNot(checkIsUSM())),
    // Handling case: thrust::stable_partition(policy, ptr, ptr, ptr, pred);
    FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasAlgorithm_stable_partition,
      IFELSE_FACTORY_ENTRY(
        "thrust::stable_partition",
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
          CALL_FACTORY_ENTRY("thrust::stable_partition", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
          CALL_FACTORY_ENTRY("thrust::stable_partition",
                            CALL(MapNames::getDpctNamespace() + "stable_partition",
                                  CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2)),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(3)), ARG(3)),
                                  ARG(4)))),
        CALL_FACTORY_ENTRY("thrust::stable_partition",
                          CALL(MapNames::getDpctNamespace() + "stable_partition",
                                ARG("oneapi::dpl::execution::seq"),
                                ARG(1), ARG(2), ARG(3), ARG(4))))),
    // Handling case: thrust::stable_partition(thrust::device, itr, itr, itr, pred);
      FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasAlgorithm_stable_partition,
        CALL_FACTORY_ENTRY("thrust::stable_partition",
                           CALL(MapNames::getDpctNamespace() + "stable_partition",
                                makeMappedThrustPolicyEnum(0),
                                ARG(1), ARG(2), ARG(3), ARG(4))))
  ),
  CONDITIONAL_FACTORY_ENTRY(
    CheckArgCount(3),
    CONDITIONAL_FACTORY_ENTRY(
      makeCheckAnd(CheckIsPtr(1), makeCheckNot(checkIsUSM())),
      //Handling case: thrust::stable_partition(ptr, ptr, pred);
      IFELSE_FACTORY_ENTRY(
        "thrust::stable_partition",
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
          CALL_FACTORY_ENTRY("thrust::stable_partition", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
          CALL_FACTORY_ENTRY("thrust::stable_partition",
                            CALL("oneapi::dpl::stable_partition",
                                  CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(0)), ARG(0)),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                  ARG(2)))),
        CALL_FACTORY_ENTRY("thrust::stable_partition",
                           CALL("oneapi::dpl::stable_partition",
                                ARG("oneapi::dpl::execution::seq"),
                                ARG(0), ARG(1), ARG(2)))),
      //Handling case: thrust::stable_partition(iter, iter, pred);
      CONDITIONAL_FACTORY_ENTRY(
        CheckThrustArgType(1, "thrust::device_ptr"),
        CALL_FACTORY_ENTRY("thrust::stable_partition",
                          CALL("oneapi::dpl::stable_partition",
                                CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                ARG(0), ARG(1), ARG(2))),
        CALL_FACTORY_ENTRY("thrust::stable_partition",
                          CALL("oneapi::dpl::stable_partition",
                                ARG("oneapi::dpl::execution::seq"),
                                ARG(0), ARG(1), ARG(2))))
    ),
    CONDITIONAL_FACTORY_ENTRY(
      makeCheckAnd(CheckIsPtr(1), makeCheckNot(checkIsUSM())),
      CONDITIONAL_FACTORY_ENTRY(
        IsPolicyArgType(0),
        //Handling case: thrust::stable_partition(policy, ptr, ptr, pred);
        IFELSE_FACTORY_ENTRY(
          "thrust::stable_partition",
          FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
            CALL_FACTORY_ENTRY("thrust::stable_partition", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
          FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
            CALL_FACTORY_ENTRY("thrust::stable_partition",
                              CALL("oneapi::dpl::stable_partition",
                                    CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                    CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                    CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2)),
                                    ARG(3)))),
          CALL_FACTORY_ENTRY("thrust::stable_partition",
                             CALL("oneapi::dpl::stable_partition",
                                  ARG("oneapi::dpl::execution::seq"),
                                  ARG(1), ARG(2), ARG(3)))),
        //Handling case: thrust::stable_partition(ptr, ptr, ptr, pred);
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasAlgorithm_stable_partition,
          IFELSE_FACTORY_ENTRY(
            "thrust::stable_partition",
            FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
              CALL_FACTORY_ENTRY("thrust::stable_partition", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
            FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
              CALL_FACTORY_ENTRY("thrust::stable_partition",
                                CALL(MapNames::getDpctNamespace() + "stable_partition",
                                      CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                      CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(0)), ARG(0)),
                                      CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                      CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2)),
                                      ARG(3)))),
            CALL_FACTORY_ENTRY("thrust::stable_partition",
                              CALL(MapNames::getDpctNamespace() + "stable_partition",
                                    ARG("oneapi::dpl::execution::seq"),
                                    ARG(0), ARG(1), ARG(2), ARG(3)))))),
      CONDITIONAL_FACTORY_ENTRY(
        IsPolicyArgType(0),
        //Handling case: thrust::stable_partition(policy, itr, itr, pred);
        CALL_FACTORY_ENTRY("thrust::stable_partition",
                          CALL("oneapi::dpl::stable_partition",
                                makeMappedThrustPolicyEnum(0),
                                ARG(1), ARG(2), ARG(3))),
        //Handling case: thrust::stable_partition(itr, itr, itr, itr, itr, pred);
        CONDITIONAL_FACTORY_ENTRY(
          CheckThrustArgType(1, "thrust::device_ptr"),
          FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasAlgorithm_stable_partition,
            CALL_FACTORY_ENTRY("thrust::stable_partition",
                              CALL(MapNames::getDpctNamespace() + "stable_partition",
                                    CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                    ARG(0), ARG(1), ARG(2),ARG(3)))),
          FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasAlgorithm_stable_partition,
            CALL_FACTORY_ENTRY("thrust::stable_partition",
                              CALL(MapNames::getDpctNamespace() + "stable_partition",
                                    ARG("oneapi::dpl::execution::seq"),
                                    ARG(0), ARG(1), ARG(2), ARG(3))))))
    )
  )
)

// thrust::remove
CONDITIONAL_FACTORY_ENTRY(
  CheckArgCount(4),
  CONDITIONAL_FACTORY_ENTRY(
    makeCheckAnd(CheckIsPtr(1), makeCheckNot(checkIsUSM())),
    //Handling case: thrust::remove(policy, ptr, ptr, val);
    IFELSE_FACTORY_ENTRY(
      "thrust::remove",
      FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
        CALL_FACTORY_ENTRY("thrust::remove", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
      FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
        CALL_FACTORY_ENTRY("thrust::remove",
                          CALL("oneapi::dpl::remove",
                                CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
								CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2)),
                                ARG(3)))),
      CALL_FACTORY_ENTRY("thrust::remove",
                        CALL("oneapi::dpl::remove",
                              ARG("oneapi::dpl::execution::seq"),
                              ARG(1), ARG(2), ARG(3)))),
    // Handling case: thrust::remove(thrust::device, itr, itr, val);
    CALL_FACTORY_ENTRY("thrust::remove",
                      CALL("oneapi::dpl::remove",
                            makeMappedThrustPolicyEnum(0),
                            ARG(1), ARG(2), ARG(3)))
  ),

    CONDITIONAL_FACTORY_ENTRY(
      makeCheckAnd(CheckIsPtr(0), makeCheckNot(checkIsUSM())),
      //Handling case: thrust::remove(ptr, ptr, val);
      IFELSE_FACTORY_ENTRY(
        "thrust::remove",
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
          CALL_FACTORY_ENTRY("thrust::remove", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
        FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
          CALL_FACTORY_ENTRY("thrust::remove",
                            CALL("oneapi::dpl::remove",
                                  CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(0)), ARG(0)),
								  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                  ARG(2)))),
        CALL_FACTORY_ENTRY("thrust::remove",
                          CALL("oneapi::dpl::remove",
                                ARG("oneapi::dpl::execution::seq"),
                                ARG(0), ARG(1), ARG(2)))),
      CONDITIONAL_FACTORY_ENTRY(
        CheckThrustArgType(1, "thrust::device_ptr"),
        // Handling case: thrust::remove(itr, itr, itr);
        CALL_FACTORY_ENTRY("thrust::remove",
                            CALL("oneapi::dpl::remove",
                                CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                ARG(0), ARG(1), ARG(2))),
        CALL_FACTORY_ENTRY("thrust::remove",
                            CALL("oneapi::dpl::remove",
                              ARG("oneapi::dpl::execution::seq"),
                              ARG(0), ARG(1), ARG(2))))
    )
)

// thrust::copy
CONDITIONAL_FACTORY_ENTRY(
    CheckArgCount(3),
    CONDITIONAL_FACTORY_ENTRY(
      // Handle case thrust::copy(ptr, ptr, des_ptr)
        makeCheckAnd(CheckIsPtr(0), makeCheckNot(checkIsUSM())),
            IFELSE_FACTORY_ENTRY("thrust::copy",
            FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
                CALL_FACTORY_ENTRY("thrust::copy", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(0)))),
            FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
                CALL_FACTORY_ENTRY("thrust::copy",
                            CALL("std::copy",
                                  CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(0)), ARG(0)),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2))))),
            CALL_FACTORY_ENTRY("thrust::copy",
                          CALL("std::copy",
                                ARG("oneapi::dpl::execution::seq"),
                                ARG(0), ARG(1), ARG(2)))),
        CONDITIONAL_FACTORY_ENTRY(
            CheckArgType(0, "thrust::device_ptr"),
            // Handle case thrust::copy(dev_itr, dev_itr, dev_itr)
            CALL_FACTORY_ENTRY("thrust::copy",
                CALL("std::copy",
                     CALL("oneapi::dpl::execution::make_device_policy",
                          QUEUESTR),
                     ARG(0), ARG(1), ARG(2))),
            // Handle case thrust::copy(host_itr, host_itr, host_itr)
            CALL_FACTORY_ENTRY("thrust::copy",
                               CALL("std::copy",
                                    ARG("oneapi::dpl::execution::seq"), ARG(0),
                                    ARG(1), ARG(2))))),
    CONDITIONAL_FACTORY_ENTRY(
        makeCheckAnd(CheckIsPtr(1), makeCheckNot(checkIsUSM())),
            IFELSE_FACTORY_ENTRY("thrust::copy",
            FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
                CALL_FACTORY_ENTRY("thrust::copy", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
            FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
                CALL_FACTORY_ENTRY("thrust::copy",
                            CALL("std::copy",
                                  CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2)),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(3)), ARG(3))))),
            CALL_FACTORY_ENTRY("thrust::copy",
                          CALL("std::copy",
                                ARG("oneapi::dpl::execution::seq"),
                                ARG(1), ARG(2), ARG(3)))),
        // Handle case thrust::copy(policy,itr,itr,itr)
        CALL_FACTORY_ENTRY("thrust::copy",
                           CALL("std::copy", makeMappedThrustPolicyEnum(0),
                                ARG(1), ARG(2), ARG(3)))))

// thrust::copy_n
CONDITIONAL_FACTORY_ENTRY(
    CheckArgCount(3),
    CONDITIONAL_FACTORY_ENTRY(
      // Handle case thrust::copy(ptr, N, des_ptr)
        makeCheckAnd(CheckIsPtr(0), makeCheckNot(checkIsUSM())),
            IFELSE_FACTORY_ENTRY("thrust::copy_n",
            FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
                CALL_FACTORY_ENTRY("thrust::copy_n", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(0)))),
            FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
                CALL_FACTORY_ENTRY("thrust::copy_n",
                            CALL("std::copy_n",
                                  CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(0)), ARG(0)),
                                  ARG(1),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(2)), ARG(2))))),
            CALL_FACTORY_ENTRY("thrust::copy_n",
                          CALL("std::copy_n",
                                ARG("oneapi::dpl::execution::seq"),
                                ARG(0), ARG(1), ARG(2)))),
        CONDITIONAL_FACTORY_ENTRY(
            CheckArgType(0, "thrust::device_ptr"),
            // Handle case thrust::copy(dev_itr, N, dev_itr)
            CALL_FACTORY_ENTRY("thrust::copy_n",
                CALL("std::copy_n",
                     CALL("oneapi::dpl::execution::make_device_policy",
                          QUEUESTR),
                     ARG(0), ARG(1), ARG(2))),
            // Handle case thrust::copy(host_itr, N, host_itr)
            CALL_FACTORY_ENTRY("thrust::copy_n",
                               CALL("std::copy_n",
                                    ARG("oneapi::dpl::execution::seq"), ARG(0),
                                    ARG(1), ARG(2))))),
    CONDITIONAL_FACTORY_ENTRY(
        makeCheckAnd(CheckIsPtr(1), makeCheckNot(checkIsUSM())),
            IFELSE_FACTORY_ENTRY("thrust::copy_n",
            FEATURE_REQUEST_FACTORY(HelperFeatureEnum::Memory_is_device_ptr,
                CALL_FACTORY_ENTRY("thrust::copy_n", CALL(MapNames::getDpctNamespace() + "is_device_ptr", ARG(1)))),
            FEATURE_REQUEST_FACTORY(HelperFeatureEnum::DplExtrasMemory_device_pointer_forward_decl,
                CALL_FACTORY_ENTRY("thrust::copy_n",
                            CALL("std::copy_n",
                                  CALL("oneapi::dpl::execution::make_device_policy", QUEUESTR),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(1)), ARG(1)),
                                  ARG(2),
                                  CALL(TEMPLATED_CALLEE_WITH_ARGS(MapNames::getDpctNamespace() + "device_pointer", getDerefedType(3)), ARG(3))))),
            CALL_FACTORY_ENTRY("thrust::copy_n",
                          CALL("std::copy_n",
                                ARG("oneapi::dpl::execution::seq"),
                                ARG(1), ARG(2), ARG(3)))),
        // Handle case thrust::copy(policy,itr, N, itr)
        CALL_FACTORY_ENTRY("thrust::copy_n",
                           CALL("std::copy_n", makeMappedThrustPolicyEnum(0),
                                ARG(1), ARG(2), ARG(3)))))
