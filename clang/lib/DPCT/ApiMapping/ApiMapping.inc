//===--------------- ApiMapping.inc ---------------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

/// CUDA Runtime API
// Device Management
REGISTER_ENTRY(
    "cudaDeviceGetAttribute", "dpct::dev_mgr::get_device",
    "CUDA API\n"
    "========\n"
    "    cudaError_t cudaDeviceGetAttribute(...)\n"
    "SYCL API\n"
    "========\n"
    "    device_ext dpct::dev_mgr::get_device(...)\n"
    "example\n"
    "========\n"
    "    CUDA code:\n"
    "        int main() {\n"
    "          int clockRate = 0;\n"
    "          int dev_id;\n"
    "          cudaGetDevice(&dev_id);\n"
    "          cudaDeviceGetAttribute(&clockRate, cudaDevAttrClockRate, "
    "dev_id);\n"
    "        }\n"
    "    SYCL code:\n"
    "        #include <sycl/sycl.hpp>\n"
    "        #include <dpct/dpct.hpp>\n"
    "        int main() {\n"
    "          int clockRate = 0;\n"
    "          int dev_id;\n"
    "          dev_id = dpct::dev_mgr::instance().current_device_id();\n"
    "          clockRate =\n"
    "              "
    "dpct::dev_mgr::instance().get_device(dev_id).get_max_clock_frequency();\n"
    "        }")
REGISTER_ENTRY("cudaDeviceGetLimit", "=",
               "CUDA API\n"
               "========\n"
               "    cudaError_t cudaDeviceGetLimit(...)\n"
               "SYCL API\n"
               "========\n"
               "    =\n"
               "example\n"
               "========\n"
               "    CUDA code:\n"
               "        int main() {\n"
               "          size_t *pValue;\n"
               "          cudaLimit limit;\n"
               "          cudaDeviceGetLimit(pValue, limit);\n"
               "        }\n"
               "    SYCL code:\n"
               "        #include <sycl/sycl.hpp>\n"
               "        #include <dpct/dpct.hpp>\n"
               "        int main() {\n"
               "          size_t *pValue;\n"
               "          cudaLimit limit;\n"
               "          /*\n"
               "          DPCT1029:0: SYCL currently does not support getting "
               "device resource limits.\n"
               "          The output parameter(s) are set to 0.\n"
               "          */\n"
               "          *pValue = 0;\n"
               "        }")
REGISTER_ENTRY("cudaDeviceReset", "dpct::device_ext::reset",
               "CUDA API\n"
               "========\n"
               "    cudaError_t cudaDeviceReset(...)\n"
               "SYCL API\n"
               "========\n"
               "    void dpct::device_ext::reset(...)\n"
               "example\n"
               "========\n"
               "    CUDA code:\n"
               "        int main() {\n"
               "          cudaDeviceReset();\n"
               "        }\n"
               "    SYCL code:\n"
               "        #include <sycl/sycl.hpp>\n"
               "        #include <dpct/dpct.hpp>\n"
               "        int main() {\n"
               "          dpct::get_current_device().reset();\n"
               "        }")
REGISTER_ENTRY("cudaDeviceSynchronize",
               "dpct::device_ext::queues_wait_and_throw",
               "CUDA API\n"
               "========\n"
               "    cudaError_t cudaDeviceReset(...)\n"
               "SYCL API\n"
               "========\n"
               "    void dpct::device_ext::queues_wait_and_throw(...)\n"
               "example\n"
               "========\n"
               "    CUDA code:\n"
               "        int main() {\n"
               "          cudaDeviceSynchronize();\n"
               "        }\n"
               "    SYCL code:\n"
               "        #include <sycl/sycl.hpp>\n"
               "        #include <dpct/dpct.hpp>\n"
               "        int main() {\n"
               "          dpct::get_current_device().queues_wait_and_throw();\n"
               "        }")
REGISTER_ENTRY(
    "cudaGetDevice", "dpct::dev_mgr::current_device_id",
    "CUDA API\n"
    "========\n"
    "    cudaError_t cudaDeviceReset(...)\n"
    "SYCL API\n"
    "========\n"
    "    unsigned int dpct::dev_mgr::current_device_id(...)\n"
    "example\n"
    "========\n"
    "    CUDA code:\n"
    "        int main() {\n"
    "          int dev_id;\n"
    "          cudaGetDevice(&dev_id);\n"
    "        }\n"
    "    SYCL code:\n"
    "        #include <sycl/sycl.hpp>\n"
    "        #include <dpct/dpct.hpp>\n"
    "        int main() {\n"
    "          int dev_id;\n"
    "          dev_id = dpct::dev_mgr::instance().current_device_id();\n"
    "        }")
REGISTER_ENTRY(
    "cudaGetDeviceCount", "dpct::dev_mgr::device_count",
    "CUDA API\n"
    "========\n"
    "    cudaError_t cudaGetDeviceCount(...)\n"
    "SYCL API\n"
    "========\n"
    "    unsigned int dpct::dev_mgr::device_count(...)\n"
    "example\n"
    "========\n"
    "    CUDA code:\n"
    "        int main() {\n"
    "          int deviceCount = 0;\n"
    "          cudaGetDeviceCount(&deviceCount);\n"
    "        }\n"
    "    SYCL code:\n"
    "        #include <sycl/sycl.hpp>\n"
    "        #include <dpct/dpct.hpp>\n"
    "        int main() {\n"
    "          int deviceCount = 0;\n"
    "          deviceCount = dpct::dev_mgr::instance().device_count();\n"
    "        }")
REGISTER_ENTRY(
    "cudaGetDeviceProperties", "dpct::device_ext::get_device_info",
    "CUDA API\n"
    "========\n"
    "    cudaError_t cudaGetDeviceProperties(...)\n"
    "SYCL API\n"
    "========\n"
    "    void dpct::device_ext::get_device_info(...)\n"
    "example\n"
    "========\n"
    "    CUDA code:\n"
    "        int main() {\n"
    "          cudaDeviceProp deviceProp;\n"
    "          cudaGetDeviceProperties(&deviceProp, 0);\n"
    "        }\n"
    "    SYCL code:\n"
    "        #include <sycl/sycl.hpp>\n"
    "        #include <dpct/dpct.hpp>\n"
    "        int main() {\n"
    "          dpct::device_info deviceProp;\n"
    "          "
    "dpct::dev_mgr::instance().get_device(0).get_device_info(deviceProp);\n"
    "        }")
REGISTER_ENTRY("cudaSetDevice", "dpct::select_device",
               "CUDA API\n"
               "========\n"
               "    cudaError_t cudaSetDevice(...)\n"
               "SYCL API\n"
               "========\n"
               "    unsigned int dpct::select_device(...)\n"
               "example\n"
               "========\n"
               "    CUDA code:\n"
               "        int main() {\n"
               "          cudaSetDevice(0);\n"
               "        }\n"
               "    SYCL code:\n"
               "        #include <sycl/sycl.hpp>\n"
               "        #include <dpct/dpct.hpp>\n"
               "        int main() {\n"
               "          /*\n"
               "          DPCT1093:0: The \"0\" may not be the best XPU "
               "device. Adjust the selected device\n"
               "          if needed.\n"
               "          */\n"
               "          dpct::select_device(0);\n"
               "        }")
// Thread Management
REGISTER_ENTRY("cudaThreadExit", "dpct::device_ext::reset",
               "CUDA API\n"
               "========\n"
               "    cudaError_t cudaThreadExit(...)\n"
               "SYCL API\n"
               "========\n"
               "    void dpct::device_ext::reset(...)\n"
               "example\n"
               "========\n"
               "    CUDA code:\n"
               "        int main() {\n"
               "          cudaThreadExit();\n"
               "        }\n"
               "    SYCL code:\n"
               "        #include <sycl/sycl.hpp>\n"
               "        #include <dpct/dpct.hpp>\n"
               "        int main() {\n"
               "          dpct::get_current_device().reset();\n"
               "        }")
REGISTER_ENTRY("cudaThreadSynchronize",
               "dpct::device_ext::queues_wait_and_throw",
               "CUDA API\n"
               "========\n"
               "    cudaError_t cudaThreadSynchronize(...)\n"
               "SYCL API\n"
               "========\n"
               "    void dpct::device_ext::queues_wait_and_throw(...)\n"
               "example\n"
               "========\n"
               "    CUDA code:\n"
               "        int main() {\n"
               "          cudaThreadSynchronize();\n"
               "        }\n"
               "    SYCL code:\n"
               "        #include <sycl/sycl.hpp>\n"
               "        #include <dpct/dpct.hpp>\n"
               "        int main() {\n"
               "          dpct::get_current_device().queues_wait_and_throw();\n"
               "        }")
// Stream Management
REGISTER_ENTRY(
    "cudaStreamAddCallback", "std::async",
    "CUDA API\n"
    "========\n"
    "    cudaError_t cudaStreamAddCallback(...)\n"
    "SYCL API\n"
    "========\n"
    "    future<...> std::async(...)\n"
    "example\n"
    "========\n"
    "    CUDA code:\n"
    "        void f(cudaStream_t stream, cudaError_t status, void *userData) "
    "{}\n"
    "        int main() {\n"
    "          cudaStream_t s;\n"
    "          cudaStreamCreate(&s);\n"
    "          char str[256];\n"
    "          cudaStreamAddCallback(s, f, str, 0);\n"
    "        }\n"
    "    SYCL code:\n"
    "        #include <sycl/sycl.hpp>\n"
    "        #include <dpct/dpct.hpp>\n"
    "        #include <future>\n"
    "        void f(dpct::queue_ptr stream, int status, void *userData) {}\n"
    "        int main() {\n"
    "          dpct::queue_ptr s;\n"
    "          s = dpct::get_current_device().create_queue();\n"
    "          char str[256];\n"
    "          std::async([&]() { s->wait(); f(s, 0, str); });\n"
    "        }")
REGISTER_ENTRY("cudaStreamCreate", "dpct::device_ext::create_queue",
               "CUDA API\n"
               "========\n"
               "    cudaError_t cudaStreamCreate(...)\n"
               "DPCT API\n"
               "========\n"
               "    sycl::queue *dpct::device_ext::create_queue(...)\n"
               "example\n"
               "========\n"
               "    CUDA code:\n"
               "        int main() {\n"
               "          cudaStream_t s;\n"
               "          cudaStreamCreate(&s);\n"
               "        }\n"
               "    SYCL code:\n"
               "        #include <sycl/sycl.hpp>\n"
               "        #include <dpct/dpct.hpp>\n"
               "        int main() {\n"
               "          dpct::queue_ptr s;\n"
               "          s = dpct::get_current_device().create_queue();\n"
               "        }")
REGISTER_ENTRY("cudaStreamCreateWithFlags", "dpct::device_ext::create_queue",
               "CUDA API\n"
               "========\n"
               "    cudaError_t cudaStreamCreateWithFlags(...)\n"
               "DPCT API\n"
               "========\n"
               "    sycl::queue *dpct::device_ext::create_queue(...)\n"
               "example\n"
               "========\n"
               "    CUDA code:\n"
               "        int main() {\n"
               "          cudaStream_t s;\n"
               "          cudaStreamCreateWithFlags(&s, cudaStreamDefault);\n"
               "        }\n"
               "    SYCL code:\n"
               "        #include <sycl/sycl.hpp>\n"
               "        #include <dpct/dpct.hpp>\n"
               "        int main() {\n"
               "          dpct::queue_ptr s;\n"
               "          /*\n"
               "          DPCT1025:0: The SYCL queue is created ignoring the "
               "flag and priority options.\n"
               "          */\n"
               "          s = dpct::get_current_device().create_queue();\n"
               "        }")
REGISTER_ENTRY(
    "cudaStreamCreateWithPriority", "dpct::device_ext::create_queue",
    "CUDA API\n"
    "========\n"
    "    cudaError_t cudaStreamCreateWithPriority(...)\n"
    "DPCT API\n"
    "========\n"
    "    sycl::queue *dpct::device_ext::create_queue(...)\n"
    "example\n"
    "========\n"
    "    CUDA code:\n"
    "        int main() {\n"
    "          cudaStream_t s;\n"
    "          cudaStreamCreateWithPriority(&s, cudaStreamDefault);\n"
    "        }\n"
    "    SYCL code:\n"
    "        #include <sycl/sycl.hpp>\n"
    "        #include <dpct/dpct.hpp>\n"
    "        int main() {\n"
    "          dpct::queue_ptr s;\n"
    "          /*\n"
    "          DPCT1025:0: The SYCL queue is created ignoring the flag and "
    "priority options.\n"
    "          */\n"
    "          s = dpct::get_current_device().create_queue();\n"
    "        }")
REGISTER_ENTRY(
    "cudaStreamDestroy", "dpct::device_ext::destroy_queue",
    "CUDA API\n"
    "========\n"
    "    cudaError_t cudaStreamDestroy(...)\n"
    "DPCT API\n"
    "========\n"
    "    sycl::queue *dpct::device_ext::destroy_queue(...)\n"
    "example\n"
    "========\n"
    "    CUDA code:\n"
    "        int main() {\n"
    "          cudaStream_t s;\n"
    "          cudaStreamCreate(&s);\n"
    "          cudaStreamDestroy(s);\n"
    "        }\n"
    "    SYCL code:\n"
    "        #include <sycl/sycl.hpp>\n"
    "        #include <dpct/dpct.hpp>\n"
    "        int main() {\n"
    "          dpct::device_ext &dev_ct1 = dpct::get_current_device();\n"
    "          dpct::queue_ptr s;\n"
    "          s = dev_ct1.create_queue();\n"
    "          dev_ct1.destroy_queue(s);\n"
    "        }")
REGISTER_ENTRY("cudaStreamGetFlags", "=",
               "CUDA API\n"
               "========\n"
               "    cudaError_t cudaStreamGetFlags(...)\n"
               "SYCL API\n"
               "========\n"
               "    =\n"
               "example\n"
               "========\n"
               "    CUDA code:\n"
               "        int main() {\n"
               "          cudaStream_t s;\n"
               "          cudaStreamCreate(&s);\n"
               "          unsigned int flags = 0;\n"
               "          cudaStreamGetFlags(s, &flags);\n"
               "        }\n"
               "    SYCL code:\n"
               "        #include <sycl/sycl.hpp>\n"
               "        #include <dpct/dpct.hpp>\n"
               "        int main() {\n"
               "          dpct::queue_ptr s;\n"
               "          s = dpct::get_current_device().create_queue();\n"
               "          unsigned int flags = 0;\n"
               "          /*\n"
               "          DPCT1014:0: The flag and priority options are not "
               "supported for SYCL queues.\n"
               "          The output parameter(s) are set to 0.\n"
               "          */\n"
               "          *(&flags) = 0;\n"
               "        }")
REGISTER_ENTRY("cudaStreamGetPriority", "=",
               "CUDA API\n"
               "========\n"
               "    cudaError_t cudaStreamGetPriority(...)\n"
               "SYCL API\n"
               "========\n"
               "    =\n"
               "example\n"
               "========\n"
               "    CUDA code:\n"
               "        int main() {\n"
               "          cudaStream_t s;\n"
               "          cudaStreamCreate(&s);\n"
               "          int priority;\n"
               "          cudaStreamGetPriority(s, &priority);\n"
               "        }\n"
               "    SYCL code:\n"
               "        #include <sycl/sycl.hpp>\n"
               "        #include <dpct/dpct.hpp>\n"
               "        int main() {\n"
               "          dpct::queue_ptr s;\n"
               "          s = dpct::get_current_device().create_queue();\n"
               "          unsigned int flags = 0;\n"
               "          /*\n"
               "          DPCT1014:0: The flag and priority options are not "
               "supported for SYCL queues.\n"
               "          The output parameter(s) are set to 0.\n"
               "          */\n"
               "          *(&flags) = 0;\n"
               "        }")
REGISTER_ENTRY("cudaStreamSynchronize", "sycl::queue::wait",
               "CUDA API\n"
               "========\n"
               "    cudaError_t cudaStreamSynchronize(...)\n"
               "SYCL API\n"
               "========\n"
               "    void sycl::queue::wait(...)\n"
               "example\n"
               "========\n"
               "    CUDA code:\n"
               "        int main() {\n"
               "          cudaStream_t s;\n"
               "          cudaStreamCreate(&s);\n"
               "          cudaStreamSynchronize(s);\n"
               "        }\n"
               "    SYCL code:\n"
               "        #include <sycl/sycl.hpp>\n"
               "        #include <dpct/dpct.hpp>\n"
               "        int main() {\n"
               "          dpct::queue_ptr s;\n"
               "          s = dpct::get_current_device().create_queue();\n"
               "          s->wait();\n"
               "        }")
REGISTER_ENTRY("cudaStreamWaitEvent", "sycl::queue::ext_oneapi_submit_barrier",
               "CUDA API\n"
               "========\n"
               "    cudaError_t cudaStreamWaitEvent(...)\n"
               "SYCL API\n"
               "========\n"
               "    event sycl::queue::ext_oneapi_submit_barrier(...)\n"
               "example\n"
               "========\n"
               "    CUDA code:\n"
               "        int main() {\n"
               "          cudaStream_t s;\n"
               "          cudaStreamCreate(&s);\n"
               "          cudaEvent_t e;\n"
               "          cudaEventCreate(&e);\n"
               "          cudaStreamWaitEvent(s, e, 0);\n"
               "        }\n"
               "    SYCL code:\n"
               "        #include <sycl/sycl.hpp>\n"
               "        #include <dpct/dpct.hpp>\n"
               "        int main() {\n"
               "          dpct::queue_ptr s;\n"
               "          s = dpct::get_current_device().create_queue();\n"
               "          dpct::event_ptr e;\n"
               "          e = new sycl::event();\n"
               "          s->ext_oneapi_submit_barrier({*e});\n"
               "        }")
// Event Management
REGISTER_ENTRY("cudaEventCreate", "sycl::event::event",
               "CUDA API\n"
               "========\n"
               "    cudaError_t cudaEventCreate(...)\n"
               "SYCL API\n"
               "========\n"
               "    sycl::event::event(...)\n"
               "example\n"
               "========\n"
               "    CUDA code:\n"
               "        int main() {\n"
               "          cudaEvent_t e;\n"
               "          cudaEventCreate(&e);\n"
               "        }\n"
               "    SYCL code:\n"
               "        #include <sycl/sycl.hpp>\n"
               "        #include <dpct/dpct.hpp>\n"
               "        int main() {\n"
               "          dpct::event_ptr e;\n"
               "          e = new sycl::event();\n"
               "        }")
REGISTER_ENTRY("cudaEventCreateWithFlags", "sycl::event::event",
               "CUDA API\n"
               "========\n"
               "    cudaError_t cudaEventCreateWithFlags(...)\n"
               "SYCL API\n"
               "========\n"
               "    sycl::event::event(...)\n"
               "example\n"
               "========\n"
               "    CUDA code:\n"
               "        int main() {\n"
               "          cudaEvent_t e;\n"
               "          cudaEventCreateWithFlags(&e, cudaEventDefault);\n"
               "        }\n"
               "    SYCL code:\n"
               "        #include <sycl/sycl.hpp>\n"
               "        #include <dpct/dpct.hpp>\n"
               "        int main() {\n"
               "          dpct::event_ptr e;\n"
               "          e = new sycl::event();\n"
               "        }")
REGISTER_ENTRY("cudaEventDestroy", "dpct::destroy_event",
               "CUDA API\n"
               "========\n"
               "    cudaError_t cudaEventDestroy(...)\n"
               "DPCT API\n"
               "========\n"
               "    /// Destroy \p event pointed memory.\n"
               "    ///\n"
               "    /// \param event Pointer to the sycl::event address.\n"
               "    void dpct::destroy_event(event_ptr event)\n"
               "example\n"
               "========\n"
               "    CUDA code:\n"
               "        int main() {\n"
               "          cudaEvent_t e;\n"
               "          cudaEventCreate(&e);\n"
               "          cudaEventDestroy(e);\n"
               "        }\n"
               "    SYCL code:\n"
               "        #include <sycl/sycl.hpp>\n"
               "        #include <dpct/dpct.hpp>\n"
               "        int main() {\n"
               "          dpct::event_ptr e;\n"
               "          e = new sycl::event();\n"
               "          dpct::destroy_event(e);\n"
               "        }")
REGISTER_ENTRY(
    "cudaEventQuery", "sycl::event::get_info",
    "CUDA API\n"
    "========\n"
    "    cudaError_t cudaEventQuery(...)\n"
    "SYCL API\n"
    "========\n"
    "    detail::is_event_info_desc<...>::return_type "
    "sycl::event::get_info(...)\n"
    "example\n"
    "========\n"
    "    CUDA code:\n"
    "        int main() {\n"
    "          cudaEvent_t e;\n"
    "          cudaEventCreate(&e);\n"
    "          cudaEventQuery(e);\n"
    "        }\n"
    "    SYCL code:\n"
    "        #include <sycl/sycl.hpp>\n"
    "        #include <dpct/dpct.hpp>\n"
    "        int main() {\n"
    "          dpct::event_ptr e;\n"
    "          e = new sycl::event();\n"
    "          "
    "(int)e->get_info<sycl::info::event::command_execution_status>();\n"
    "        }")
REGISTER_ENTRY(
    "cudaEventRecord", "std::chrono::steady_clock::now",
    "CUDA API\n"
    "========\n"
    "    cudaError_t cudaEventRecord(...)\n"
    "SYCL API\n"
    "========\n"
    "    time_point std::chrono::steady_clock::now(...)\n"
    "example\n"
    "========\n"
    "    CUDA code:\n"
    "        int main() {\n"
    "          cudaEvent_t e;\n"
    "          cudaEventCreate(&e);\n"
    "          cudaEventRecord(e, 0);\n"
    "        }\n"
    "    SYCL code:\n"
    "        #include <sycl/sycl.hpp>\n"
    "        #include <dpct/dpct.hpp>\n"
    "        #include <chrono>\n"
    "        int main() {\n"
    "          dpct::device_ext &dev_ct1 = dpct::get_current_device();\n"
    "          sycl::queue &q_ct1 = dev_ct1.default_queue();\n"
    "          dpct::event_ptr e;\n"
    "          std::chrono::time_point<std::chrono::steady_clock> e_ct1;\n"
    "          e = new sycl::event();\n"
    "          /*\n"
    "          DPCT1012:0: Detected kernel execution time measurement pattern "
    "and generated\n"
    "          an initial code for time measurements in SYCL. You can change "
    "the way time is\n"
    "          measured depending on your goals.\n"
    "          */\n"
    "          e_ct1 = std::chrono::steady_clock::now();\n"
    "          *e = q_ct1.ext_oneapi_submit_barrier();\n"
    "        }")
REGISTER_ENTRY("cudaEventSynchronize", "sycl::event::wait_and_throw",
               "CUDA API\n"
               "========\n"
               "    cudaError_t cudaEventSynchronize(...)\n"
               "SYCL API\n"
               "========\n"
               "    void sycl::event::wait_and_throw(...)\n"
               "example\n"
               "========\n"
               "    CUDA code:\n"
               "        int main() {\n"
               "          cudaEvent_t e;\n"
               "          cudaEventCreate(&e);\n"
               "          cudaEventSynchronize(e);\n"
               "        }\n"
               "    SYCL code:\n"
               "        #include <sycl/sycl.hpp>\n"
               "        #include <dpct/dpct.hpp>\n"
               "        int main() {\n"
               "          dpct::event_ptr e;\n"
               "          e = new sycl::event();\n"
               "          e->wait_and_throw();\n"
               "        }")
// Execution Control
REGISTER_ENTRY(
    "cudaFuncGetAttributes", "dpct::get_kernel_function_info",
    "CUDA API\n"
    "========\n"
    "    cudaError_t cudaFuncGetAttributes(...)\n"
    "SYCL API\n"
    "========\n"
    "    void dpct::get_kernel_function_info(...)\n"
    "example\n"
    "========\n"
    "    CUDA code:\n"
    "        __global__ void f() {}\n"
    "        int main() {\n"
    "          cudaFuncAttributes attr;\n"
    "          cudaFuncGetAttributes(&attr, f);\n"
    "        }\n"
    "    SYCL code:\n"
    "        #include <sycl/sycl.hpp>\n"
    "        #include <dpct/dpct.hpp>\n"
    "        void f() {}\n"
    "        int main() {\n"
    "          dpct::kernel_function_info attr;\n"
    "          (dpct::get_kernel_function_info(&attr, (const void *)f), 0);\n"
    "        }")
REGISTER_ENTRY(
    "cudaLaunchCooperativeKernel", "sycl::queue::parallel_for",
    "CUDA API\n"
    "========\n"
    "    cudaError_t cudaLaunchCooperativeKernel(...)\n"
    "SYCL API\n"
    "========\n"
    "    event sycl::queue::parallel_for(...)\n"
    "example\n"
    "========\n"
    "    CUDA code:\n"
    "        __global__ void f() {}\n"
    "        int main() {\n"
    "          void *args[0];\n"
    "          cudaLaunchCooperativeKernel((void *)&f, dim3(16), dim3(16), "
    "args, 0, 0);\n"
    "        }\n"
    "    SYCL code:\n"
    "        #include <sycl/sycl.hpp>\n"
    "        #include <dpct/dpct.hpp>\n"
    "        void f() {}\n"
    "        int main() {\n"
    "          dpct::device_ext &dev_ct1 = dpct::get_current_device();\n"
    "          sycl::queue &q_ct1 = dev_ct1.default_queue();\n"
    "          void *args[0];\n"
    "          q_ct1.parallel_for(\n"
    "              sycl::nd_range<3>(sycl::range<3>(1, 1, 16) * "
    "sycl::range<3>(1, 1, 16),\n"
    "                                sycl::range<3>(1, 1, 16)),\n"
    "              [=](sycl::nd_item<3> item_ct1) {\n"
    "                f();\n"
    "              });\n"
    "        }")
REGISTER_ENTRY(
    "cudaLaunchKernel", "sycl::queue::parallel_for",
    "CUDA API\n"
    "========\n"
    "    cudaError_t cudaLaunchKernel(...)\n"
    "SYCL API\n"
    "========\n"
    "    event sycl::queue::parallel_for(...)\n"
    "example\n"
    "========\n"
    "    CUDA code:\n"
    "        __global__ void f() {}\n"
    "        int main() {\n"
    "          void *args[0];\n"
    "          cudaLaunchKernel((void *)&f, dim3(16), dim3(16), args, 0, 0);\n"
    "        }\n"
    "    SYCL code:\n"
    "        #include <sycl/sycl.hpp>\n"
    "        #include <dpct/dpct.hpp>\n"
    "        void f() {}\n"
    "        int main() {\n"
    "          dpct::device_ext &dev_ct1 = dpct::get_current_device();\n"
    "          sycl::queue &q_ct1 = dev_ct1.default_queue();\n"
    "          void *args[0];\n"
    "          q_ct1.parallel_for(\n"
    "              sycl::nd_range<3>(sycl::range<3>(1, 1, 16) * "
    "sycl::range<3>(1, 1, 16),\n"
    "                                sycl::range<3>(1, 1, 16)),\n"
    "              [=](sycl::nd_item<3> item_ct1) {\n"
    "                f();\n"
    "              });\n"
    "        }")
// Memory Management
REGISTER_ENTRY(
    "cudaArrayGetInfo", "dpct::image_matrix::get_channel/get_range",
    "CUDA API\n"
    "========\n"
    "    cudaError_t cudaArrayGetInfo(...)\n"
    "SYCL API\n"
    "========\n"
    "    image_channel dpct::image_matrix::get_channel(...)\n"
    "    sycl::range<3> dpct::image_matrix::get_range(...)\n"
    "example\n"
    "========\n"
    "    CUDA code:\n"
    "        int main() {\n"
    "          cudaChannelFormatDesc desc;\n"
    "          cudaExtent extent;\n"
    "          unsigned int flags;\n"
    "          cudaArray_t array;\n"
    "          cudaChannelFormatDesc channel;\n"
    "          cudaMallocArray(&array, &channel, 1, 1);\n"
    "          cudaArrayGetInfo(&desc, &extent, &flags, array);\n"
    "        }\n"
    "    SYCL code:\n"
    "        #include <sycl/sycl.hpp>\n"
    "        #include <dpct/dpct.hpp>\n"
    "        int main() {\n"
    "          dpct::image_channel desc;\n"
    "          sycl::range<3> extent;\n"
    "          unsigned int flags;\n"
    "          dpct::image_matrix_p array;\n"
    "          dpct::image_channel channel;\n"
    "          array = new dpct::image_matrix(channel, sycl::range<2>(1, 1));\n"
    "          desc = array->get_channel();\n"
    "          extent = array->get_range();\n"
    "          flags = 0;\n"
    "        }")
REGISTER_ENTRY(
    "cudaFree", "sycl::free",
    "CUDA API\n"
    "========\n"
    "    cudaError_t cudaFree(...)\n"
    "SYCL API\n"
    "========\n"
    "    void sycl::free(...)\n"
    "example\n"
    "========\n"
    "    CUDA code:\n"
    "        int main() {\n"
    "          float *p = NULL;\n"
    "          cudaMalloc((void **)&p, sizeof(p));\n"
    "          cudaFree(p);\n"
    "        }\n"
    "    SYCL code:\n"
    "        #include <sycl/sycl.hpp>\n"
    "        #include <dpct/dpct.hpp>\n"
    "        int main() {\n"
    "          dpct::device_ext &dev_ct1 = dpct::get_current_device();\n"
    "          sycl::queue &q_ct1 = dev_ct1.default_queue();\n"
    "          float *p = NULL;\n"
    "          p = (float *)sycl::malloc_device(sizeof(p), q_ct1);\n"
    "          sycl::free(p, q_ct1);\n"
    "        }")
REGISTER_ENTRY(
    "cudaFreeArray", "delete",
    "CUDA API\n"
    "========\n"
    "    cudaError_t cudaFreeArray(...)\n"
    "SYCL API\n"
    "========\n"
    "    delete\n"
    "example\n"
    "========\n"
    "    CUDA code:\n"
    "        int main() {\n"
    "          cudaArray_t array;\n"
    "          cudaChannelFormatDesc channel;\n"
    "          cudaMallocArray(&array, &channel, 1, 1);\n"
    "          cudaFreeArray(array);\n"
    "        }\n"
    "    SYCL code:\n"
    "        #include <sycl/sycl.hpp>\n"
    "        #include <dpct/dpct.hpp>\n"
    "        int main() {\n"
    "          dpct::image_matrix_p array;\n"
    "          dpct::image_channel channel;\n"
    "          array = new dpct::image_matrix(channel, sycl::range<2>(1, 1));\n"
    "          delete array;\n"
    "        }")
REGISTER_ENTRY(
    "cudaFreeHost", "sycl::free",
    "CUDA API\n"
    "========\n"
    "    cudaError_t cudaFreeHost(...)\n"
    "SYCL API\n"
    "========\n"
    "    void sycl::free(...)\n"
    "example\n"
    "========\n"
    "    CUDA code:\n"
    "        int main() {\n"
    "          float *p = NULL;\n"
    "          cudaMalloc((void **)&p, sizeof(p));\n"
    "          cudaFreeHost(p);\n"
    "        }\n"
    "    SYCL code:\n"
    "        #include <sycl/sycl.hpp>\n"
    "        #include <dpct/dpct.hpp>\n"
    "        int main() {\n"
    "          dpct::device_ext &dev_ct1 = dpct::get_current_device();\n"
    "          sycl::queue &q_ct1 = dev_ct1.default_queue();\n"
    "          float *p = NULL;\n"
    "          p = (float *)sycl::malloc_device(sizeof(p), q_ct1);\n"
    "          sycl::free(p, q_ct1);\n"
    "        }")
REGISTER_ENTRY("cudaGetSymbolAddress", "dpct::detail::device_memory::get_ptr",
               "CUDA API\n"
               "========\n"
               "    cudaError_t cudaGetSymbolAddress(...)\n"
               "SYCL API\n"
               "========\n"
               "    value_t *dpct::detail::device_memory::get_ptr(...)\n"
               "example\n"
               "========\n"
               "    CUDA code:\n"
               "        static __device__ float arr[1];\n"
               "        int main() {\n"
               "          void *p_addr;\n"
               "          cudaGetSymbolAddress(&p_addr, arr);\n"
               "        }\n"
               "    SYCL code:\n"
               "        #include <sycl/sycl.hpp>\n"
               "        #include <dpct/dpct.hpp>\n"
               "        static dpct::global_memory<float, 1> arr(1);\n"
               "        int main() {\n"
               "          void *p_addr;\n"
               "          *(&p_addr) = arr.get_ptr();\n"
               "        }")
REGISTER_ENTRY("cudaGetSymbolSize", "dpct::detail::device_memory::get_size",
               "CUDA API\n"
               "========\n"
               "    cudaError_t cudaGetSymbolSize(...)\n"
               "SYCL API\n"
               "========\n"
               "    size_t dpct::detail::device_memory::get_size(...)\n"
               "example\n"
               "========\n"
               "    CUDA code:\n"
               "        static __device__ float arr[1];\n"
               "        int main() {\n"
               "          size_t size2;\n"
               "          cudaGetSymbolSize(&size2, arr);\n"
               "        }\n"
               "    SYCL code:\n"
               "        #include <sycl/sycl.hpp>\n"
               "        #include <dpct/dpct.hpp>\n"
               "        static dpct::global_memory<float, 1> arr(1);\n"
               "        int main() {\n"
               "          size_t size2;\n"
               "          size2 = arr.get_size();\n"
               "        }")
REGISTER_ENTRY(
    "cudaHostAlloc", "sycl::malloc_host",
    "CUDA API\n"
    "========\n"
    "    cudaError_t cudaHostAlloc(...)\n"
    "SYCL API\n"
    "========\n"
    "    void *sycl::malloc_host(...)\n"
    "example\n"
    "========\n"
    "    CUDA code:\n"
    "        int main() {\n"
    "          float *p = NULL;\n"
    "          cudaHostAlloc((void **)&p, sizeof(p), cudaHostAllocDefault);\n"
    "        }\n"
    "    SYCL code:\n"
    "        #include <sycl/sycl.hpp>\n"
    "        #include <dpct/dpct.hpp>\n"
    "        int main() {\n"
    "          float *p = NULL;\n"
    "          /*\n"
    "          DPCT1048:0: The original value cudaHostAllocDefault is not "
    "meaningful in the\n"
    "          migrated code and was removed or replaced with 0. You may need "
    "to check the\n"
    "          migrated code.\n"
    "          */\n"
    "          p = (float *)sycl::malloc_host(sizeof(p), "
    "dpct::get_default_queue());\n"
    "        }")
REGISTER_ENTRY("cudaHostGetDevicePointer", "=",
               "CUDA API\n"
               "========\n"
               "    cudaError_t cudaHostGetDevicePointer(...)\n"
               "SYCL API\n"
               "========\n"
               "    =\n"
               "example\n"
               "========\n"
               "    CUDA code:\n"
               "        static __device__ float arr[1];\n"
               "        int main() {\n"
               "          void *p_addr;\n"
               "          cudaHostGetDevicePointer(&p_addr, arr, 0);\n"
               "        }\n"
               "    SYCL code:\n"
               "        #include <sycl/sycl.hpp>\n"
               "        #include <dpct/dpct.hpp>\n"
               "        static dpct::global_memory<float, 1> arr(1);\n"
               "        int main() {\n"
               "          void *p_addr;\n"
               "          p_addr = (char *)arr;\n"
               "        }")
REGISTER_ENTRY("cudaHostGetFlags", "=",
               "CUDA API\n"
               "========\n"
               "    cudaError_t cudaHostGetFlags(...)\n"
               "SYCL API\n"
               "========\n"
               "    =\n"
               "example\n"
               "========\n"
               "    CUDA code:\n"
               "        int main() {\n"
               "          int host;\n"
               "          unsigned int flags;\n"
               "          cudaHostGetFlags(&flags, &host);\n"
               "        }\n"
               "    SYCL code:\n"
               "        #include <sycl/sycl.hpp>\n"
               "        #include <dpct/dpct.hpp>\n"
               "        int main() {\n"
               "          int host;\n"
               "          unsigned int flags;\n"
               "          flags = 0;\n"
               "        }")
REGISTER_ENTRY("cudaMalloc", "sycl::malloc_device",
               "CUDA API\n"
               "========\n"
               "    cudaError_t cudaMalloc(...)\n"
               "SYCL API\n"
               "========\n"
               "    void *sycl::malloc_device(...)\n"
               "example\n"
               "========\n"
               "    CUDA code:\n"
               "        int main() {\n"
               "          float *p = NULL;\n"
               "          cudaMalloc((void **)&p, sizeof(p));\n"
               "        }\n"
               "    SYCL code:\n"
               "        #include <sycl/sycl.hpp>\n"
               "        #include <dpct/dpct.hpp>\n"
               "        int main() {\n"
               "          float *p = NULL;\n"
               "          p = (float *)sycl::malloc_device(sizeof(p), "
               "dpct::get_default_queue());\n"
               "        }")
REGISTER_ENTRY(
    "cudaMalloc3D", "dpct::dpct_malloc",
    "CUDA API\n"
    "========\n"
    "    cudaError_t cudaMalloc3D(...)\n"
    "SYCL API\n"
    "========\n"
    "    /// Allocate memory block for 3D array on the device.\n"
    "    /// \\param size Size of the memory block, in bytes.\n"
    "    /// \\param q Queue to execute the allocate task.\n"
    "    /// \\returns A pitched_data object which stores the memory info.\n"
    "    pitched_data dpct::dpct_malloc(...)\n"
    "example\n"
    "========\n"
    "    CUDA code:\n"
    "        int main() {\n"
    "          cudaPitchedPtr p_A;\n"
    "          cudaExtent extent = make_cudaExtent(1, 1, 1);\n"
    "          cudaMalloc3D(&p_A, extent);\n"
    "        }\n"
    "    SYCL code:\n"
    "        #include <sycl/sycl.hpp>\n"
    "        #include <dpct/dpct.hpp>\n"
    "        int main() {\n"
    "          dpct::pitched_data p_A;\n"
    "          sycl::range<3> extent = sycl::range<3>(1, 1, 1);\n"
    "          p_A = dpct::dpct_malloc(extent);\n"
    "        }")
REGISTER_ENTRY(
    "cudaMalloc3DArray", "dpct::image_matrix",
    "CUDA API\n"
    "========\n"
    "    cudaError_t cudaMalloc3DArray(...)\n"
    "SYCL API\n"
    "========\n"
    "    /// Constructor with channel info and dimension size info.\n"
    "    dpct::image_matrix(...)\n"
    "example\n"
    "========\n"
    "    CUDA code:\n"
    "        int main() {\n"
    "          cudaArray_t a;\n"
    "          cudaChannelFormatDesc channel;\n"
    "          cudaExtent extent = make_cudaExtent(1, 1, 1);\n"
    "          cudaMalloc3DArray(&a, &channel, extent);\n"
    "        }\n"
    "    SYCL code:\n"
    "        #include <sycl/sycl.hpp>\n"
    "        #include <dpct/dpct.hpp>\n"
    "        int main() {\n"
    "          dpct::image_matrix_p a;\n"
    "          dpct::image_channel channel;\n"
    "          sycl::range<3> extent = sycl::range<3>(1, 1, 1);\n"
    "          a = new dpct::image_matrix(channel, extent);\n"
    "        }")
REGISTER_ENTRY(
    "cudaMallocArray", "dpct::image_matrix",
    "CUDA API\n"
    "========\n"
    "    cudaError_t cudaMallocArray(...)\n"
    "SYCL API\n"
    "========\n"
    "    /// Constructor with channel info and dimension size info.\n"
    "    dpct::image_matrix(...)\n"
    "example\n"
    "========\n"
    "    CUDA code:\n"
    "        int main() {\n"
    "          cudaArray_t a;\n"
    "          cudaChannelFormatDesc channel;\n"
    "          cudaMallocArray(&a, &channel, 1, 1, 1);\n"
    "        }\n"
    "    SYCL code:\n"
    "        #include <sycl/sycl.hpp>\n"
    "        #include <dpct/dpct.hpp>\n"
    "        int main() {\n"
    "          dpct::image_matrix_p a;\n"
    "          dpct::image_channel channel;\n"
    "          a = new dpct::image_matrix(channel, sycl::range<2>(1, 1));\n"
    "        }")
REGISTER_ENTRY("cudaMallocHost", "sycl::malloc_host",
               "CUDA API\n"
               "========\n"
               "    cudaError_t cudaMallocHost(...)\n"
               "SYCL API\n"
               "========\n"
               "    void *sycl::malloc_host(...)\n"
               "example\n"
               "========\n"
               "    CUDA code:\n"
               "        int main() {\n"
               "          float *p = NULL;\n"
               "          cudaMallocHost((void **)&p, sizeof(p));\n"
               "        }\n"
               "    SYCL code:\n"
               "        #include <sycl/sycl.hpp>\n"
               "        #include <dpct/dpct.hpp>\n"
               "        int main() {\n"
               "          float *p = NULL;\n"
               "          p = (float *)sycl::malloc_host(sizeof(p), "
               "dpct::get_default_queue());\n"
               "        }")
REGISTER_ENTRY("cudaMallocManaged", "sycl::malloc_shared",
               "CUDA API\n"
               "========\n"
               "    cudaError_t cudaMallocManaged(...)\n"
               "SYCL API\n"
               "========\n"
               "    void *sycl::malloc_shared(...)\n"
               "example\n"
               "========\n"
               "    CUDA code:\n"
               "        int main() {\n"
               "          float *p = NULL;\n"
               "          cudaMallocManaged((void **)&p, sizeof(p));\n"
               "        }\n"
               "    SYCL code:\n"
               "        #include <sycl/sycl.hpp>\n"
               "        #include <dpct/dpct.hpp>\n"
               "        int main() {\n"
               "          float *p = NULL;\n"
               "          p = (float *)sycl::malloc_shared(sizeof(p), "
               "dpct::get_default_queue());\n"
               "        }")
REGISTER_ENTRY(
    "cudaMallocPitch", "dpct::dpct_malloc",
    "CUDA API\n"
    "========\n"
    "    cudaError_t cudaMallocPitch(...)\n"
    "SYCL API\n"
    "========\n"
    "    /// Allocate memory block for 3D array on the device.\n"
    "    /// \\param size Size of the memory block, in bytes.\n"
    "    /// \\param q Queue to execute the allocate task.\n"
    "    /// \\returns A pitched_data object which stores the memory info.\n"
    "    pitched_data dpct::dpct_malloc(...)\n"
    "example\n"
    "========\n"
    "    CUDA code:\n"
    "        int main() {\n"
    "          float *p = NULL;\n"
    "          size_t size = 1;\n"
    "          cudaMallocPitch((void **)&p, &size, 1, 1);\n"
    "        }\n"
    "    SYCL code:\n"
    "        #include <sycl/sycl.hpp>\n"
    "        #include <dpct/dpct.hpp>\n"
    "        int main() {\n"
    "          float *p = NULL;\n"
    "          size_t size = 1;\n"
    "          p = (float *)dpct::dpct_malloc(size, 1, 1);\n"
    "        }")
REGISTER_ENTRY(
    "cudaMemAdvise", "sycl::queue::mem_advise",
    "CUDA API\n"
    "========\n"
    "    cudaError_t cudaMemAdvise(...)\n"
    "SYCL API\n"
    "========\n"
    "    event sycl::queue::mem_advise(...)\n"
    "example\n"
    "========\n"
    "    CUDA code:\n"
    "        int main() {\n"
    "          int *devPtr;\n"
    "          cudaMemAdvise(devPtr, 1,  cudaMemAdviseSetReadMostly, 0);\n"
    "        }\n"
    "    SYCL code:\n"
    "        #include <sycl/sycl.hpp>\n"
    "        #include <dpct/dpct.hpp>\n"
    "        int main() {\n"
    "          int *devPtr;\n"
    "          /*\n"
    "          DPCT1063:0: Advice parameter is device-defined and was set to "
    "0. You may need\n"
    "          to adjust it.\n"
    "          */\n"
    "          dpct::get_device(0).default_queue().mem_advise(devPtr, 1, 0);\n"
    "        }")
REGISTER_ENTRY(
    "cudaMemGetInfo", "dpct::device_ext::get_memory_info",
    "CUDA API\n"
    "========\n"
    "    cudaError_t cudaMemGetInfo(...)\n"
    "SYCL API\n"
    "========\n"
    "    /// Get the number of bytes of free and total memory on the SYCL "
    "device.\n"
    "    /// \\param [out] free_memory The number of bytes of free memory on "
    "the SYCL device.\n"
    "    /// \\param [out] total_memory The number of bytes of total memory on "
    "the SYCL device.\n"
    "    void dpct::device_ext::get_memory_info(...)\n"
    "example\n"
    "========\n"
    "    CUDA code:\n"
    "        int main() {\n"
    "          size_t free, total;\n"
    "          cudaMemGetInfo(&free, &total);\n"
    "        }\n"
    "    SYCL code:\n"
    "        #include <sycl/sycl.hpp>\n"
    "        #include <dpct/dpct.hpp>\n"
    "        int main() {\n"
    "          size_t free, total;\n"
    "          dpct::get_current_device().get_memory_info(free, total);\n"
    "        }")
REGISTER_ENTRY(
    "cudaMemPrefetchAsync", "sycl::queue::prefetch",
    "CUDA API\n"
    "========\n"
    "    cudaError_t cudaMemPrefetchAsync(...)\n"
    "SYCL API\n"
    "========\n"
    "    event sycl::queue::prefetch(...)\n"
    "example\n"
    "========\n"
    "    CUDA code:\n"
    "        int main() {\n"
    "          float *devPtr = NULL;\n"
    "          cudaMemPrefetchAsync(devPtr, 100, cudaMemAdviseSetReadMostly,\n"
    "                               cudaStreamDefault);\n"
    "        }\n"
    "    SYCL code:\n"
    "        #include <sycl/sycl.hpp>\n"
    "        #include <dpct/dpct.hpp>\n"
    "        int main() {\n"
    "          float *devPtr = NULL;\n"
    "          /*\n"
    "          DPCT1063:0: Advice parameter is device-defined and was set to "
    "0. You may need\n"
    "          to adjust it.\n"
    "          */\n"
    "          "
    "dpct::dev_mgr::instance().get_device(0).default_queue().prefetch(devPtr, "
    "100);\n"
    "        }")
REGISTER_ENTRY(
    "cudaMemcpy", "sycl::queue::memcpy",
    "CUDA API\n"
    "========\n"
    "    cudaError_t cudaMemcpy(...)\n"
    "SYCL API\n"
    "========\n"
    "    event sycl::queue::memcpy(...)\n"
    "example\n"
    "========\n"
    "    CUDA code:\n"
    "        int main() {\n"
    "          float *h_A = NULL;\n"
    "          cudaMallocHost(&h_A, sizeof(h_A));\n"
    "          float *d_A = NULL;\n"
    "          cudaMemcpy(d_A, h_A, sizeof(h_A), cudaMemcpyHostToDevice);\n"
    "        }\n"
    "    SYCL code:\n"
    "        #include <sycl/sycl.hpp>\n"
    "        #include <dpct/dpct.hpp>\n"
    "        int main() {\n"
    "          dpct::device_ext &dev_ct1 = dpct::get_current_device();\n"
    "          sycl::queue &q_ct1 = dev_ct1.default_queue();\n"
    "          float *h_A = NULL;\n"
    "          h_A = (float *)sycl::malloc_host(sizeof(h_A), q_ct1);\n"
    "          float *d_A = NULL;\n"
    "          q_ct1.memcpy(d_A, h_A, sizeof(h_A)).wait();\n"
    "        }")
REGISTER_ENTRY("cudaMemcpy2D", "dpct::dpct_memcpy",
               "CUDA API\n"
               "========\n"
               "    cudaError_t cudaMemcpy2D(...)\n"
               "SYCL API\n"
               "========\n"
               "    event sycl::queue::memcpy(...)\n"
               "example\n"
               "========\n"
               "    CUDA code:\n"
               "        int main() {\n"
               "          float *h_A = NULL;\n"
               "          auto size = sizeof(h_A);\n"
               "          cudaMallocHost(&h_A, size);\n"
               "          float *d_A = NULL;\n"
               "          cudaMemcpy2D(d_A, size, h_A, size, size, size, "
               "cudaMemcpyHostToDevice);\n"
               "        }\n"
               "    SYCL code:\n"
               "        #include <sycl/sycl.hpp>\n"
               "        #include <dpct/dpct.hpp>\n"
               "        int main() {\n"
               "          float *h_A = NULL;\n"
               "          auto size = sizeof(h_A);\n"
               "          h_A = (float *)sycl::malloc_host(size, "
               "dpct::get_default_queue());\n"
               "          float *d_A = NULL;\n"
               "          dpct::dpct_memcpy(d_A, size, h_A, size, size, size, "
               "dpct::host_to_device);\n"
               "        }")

/// CUDA Driver API
// Context Management
REGISTER_ENTRY("cuCtxGetDevice", "dpct::get_current_device_id",
               "CUDA API\n"
               "========\n"
               "    CUresult cuCtxGetDevice(...)\n"
               "DPCT API\n"
               "========\n"
               "    /// Util function to get the id of current device in\n"
               "    /// dpct device manager.\n"
               "    unsigned int dpct::get_current_device_id()\n"
               "example\n"
               "========\n"
               "    CUDA code:\n"
               "        #include <cuda.h>\n"
               "        int main() {\n"
               "          CUdevice* d = nullptr;\n"
               "          cuCtxGetDevice(d);\n"
               "        }\n"
               "    SYCL code:\n"
               "        #include <sycl/sycl.hpp>\n"
               "        #include <dpct/dpct.hpp>\n"
               "        int main() {\n"
               "          int* d = nullptr;\n"
               "          *d = dpct::get_current_device_id();\n"
               "        }")
