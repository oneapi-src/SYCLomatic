//===--------------- APINames.inc -----------------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
/****************************************************************************
*
* ENTRY(Interface APIName, APINAME, ProcessedOrNot, Flag, Priority, MigrationDesc)
*  Interface APIName: name of CUDA Interface API available in official document
*  APIName: name of CUDA API
*
*  ProcessedOrNot:  false|true
*    false: this API has not been processed.
*    true:  this API has been processed, need check MigrationDesc field to
            see if it has be migrated successfully.
*
*  Flag: Bit map for all kind of flag for this API.
*    default(all bits are 0): NO_FLAG
*    bit 0: API_CALL_REMOVED
*    bit 1: API_CALL_UNSUPPORTED
*  Priority: migration priority, eg. P0 - P4
*    P0:  should support in Beta release.
*    P4:  should support in Gold.
*
*  MigrationDesc: Successful[: Comment] | Unsupported: Comment
*    Successful:   this API has been migrated.
*    Unsupported:  this API can not be migrated currently.
*                  Must add Comment to explain why this API is Unsupported.
*    Comment:      extra comment on the migration.
*
****************************************************************************/

// API Names refer to "v12.2"
// CUDA runtime API
// Device management functions of runtime API
ENTRY(cudaChooseDevice, cudaChooseDevice, false, NO_FLAG, P0, "comment")
ENTRY(cudaDeviceFlushGPUDirectRDMAWrites, cudaDeviceFlushGPUDirectRDMAWrites, false, NO_FLAG, P7, "comment")
ENTRY(cudaDeviceGetAttribute, cudaDeviceGetAttribute, true, NO_FLAG, P0, "DPCT1076")
ENTRY(cudaDeviceGetByPCIBusId, cudaDeviceGetByPCIBusId, false, NO_FLAG, P4, "comment")
ENTRY(cudaDeviceGetCacheConfig, cudaDeviceGetCacheConfig, true, API_CALL_REMOVED, P4, "DPCT1026/DPCT1027")
ENTRY(cudaDeviceGetDefaultMemPool, cudaDeviceGetDefaultMemPool, false, NO_FLAG, P7, "comment")
ENTRY(cudaDeviceGetLimit, cudaDeviceGetLimit, true, NO_FLAG, P0, "DPCT1029")
ENTRY(cudaDeviceGetMemPool, cudaDeviceGetMemPool, false, NO_FLAG, P4, "comment")
ENTRY(cudaDeviceGetNvSciSyncAttributes, cudaDeviceGetNvSciSyncAttributes, false, NO_FLAG, P4, "comment")
ENTRY(cudaDeviceGetP2PAttribute, cudaDeviceGetP2PAttribute, false, API_CALL_UNSUPPORTED, P0, "DPCT1007")
ENTRY(cudaDeviceGetPCIBusId, cudaDeviceGetPCIBusId, false, API_CALL_UNSUPPORTED, P0, "DPCT1007")
ENTRY(cudaDeviceGetSharedMemConfig, cudaDeviceGetSharedMemConfig, false, NO_FLAG, P4, "comment")
ENTRY(cudaDeviceGetStreamPriorityRange, cudaDeviceGetStreamPriorityRange, true, NO_FLAG, P0, "DPCT1014")
ENTRY(cudaDeviceGetTexture1DLinearMaxWidth, cudaDeviceGetTexture1DLinearMaxWidth, false, NO_FLAG, P7, "comment")
ENTRY(cudaDeviceReset, cudaDeviceReset, true, NO_FLAG, P0, "Successful")
ENTRY(cudaDeviceSetCacheConfig, cudaDeviceSetCacheConfig, true, API_CALL_REMOVED, P0, "DPCT1026/DPCT1027")
ENTRY(cudaDeviceSetLimit, cudaDeviceSetLimit, true, API_CALL_REMOVED, P0, "DPCT1026/DPCT1027")
ENTRY(cudaDeviceSetMemPool, cudaDeviceSetMemPool, false, NO_FLAG, P7, "comment")
ENTRY(cudaDeviceSetSharedMemConfig, cudaDeviceSetSharedMemConfig, true, NO_FLAG, P0, "DPCT1026/DPCT1027")
ENTRY(cudaDeviceSynchronize, cudaDeviceSynchronize, true, NO_FLAG, P0, "Successful")
ENTRY(cudaGetDevice, cudaGetDevice, true, NO_FLAG, P0, "Successful")
ENTRY(cudaGetDeviceCount, cudaGetDeviceCount, true, NO_FLAG, P0, "Successful")
ENTRY(cudaGetDeviceFlags, cudaGetDeviceFlags, false, NO_FLAG, P4, "comment")
ENTRY(cudaGetDeviceProperties, cudaGetDeviceProperties, true, NO_FLAG, P0, "Successful")
ENTRY(cudaGetDeviceProperties_v2 , cudaGetDeviceProperties_v2, true, NO_FLAG, P0, "Successful")
ENTRY(cudaInitDevice, cudaInitDevice, false, NO_FLAG, P4, "comment")
ENTRY(cudaIpcCloseMemHandle, cudaIpcCloseMemHandle, true, NO_FLAG, P0, "DPCT1030")
ENTRY(cudaIpcGetEventHandle, cudaIpcGetEventHandle, true, NO_FLAG, P0, "DPCT1030")
ENTRY(cudaIpcGetMemHandle, cudaIpcGetMemHandle, true, NO_FLAG, P0, "DPCT1030")
ENTRY(cudaIpcOpenEventHandle, cudaIpcOpenEventHandle, true, NO_FLAG, P0, "DPCT1030")
ENTRY(cudaIpcOpenMemHandle, cudaIpcOpenMemHandle, true, NO_FLAG, P0, "DPCT1030")
ENTRY(cudaSetDevice, cudaSetDevice, true, NO_FLAG, P0, "DPCT1093")
ENTRY(cudaSetDeviceFlags, cudaSetDeviceFlags, true, NO_FLAG, P0, "DPCT1026/DPCT1027")
ENTRY(cudaSetValidDevices, cudaSetValidDevices, false, NO_FLAG, P4, "comment")

// thread management functions of API
ENTRY(cudaThreadExit, cudaThreadExit, true, NO_FLAG, P0, "Successful")
ENTRY(cudaThreadGetCacheConfig, cudaThreadGetCacheConfig, false, NO_FLAG, P4, "comment")
ENTRY(cudaThreadGetLimit, cudaThreadGetLimit, false, NO_FLAG, P4, "comment")
ENTRY(cudaThreadSetCacheConfig, cudaThreadSetCacheConfig, false, NO_FLAG, P0, "comment")
ENTRY(cudaThreadSetLimit, cudaThreadSetLimit, true, API_CALL_REMOVED, P0, "DPCT1026/DPCT1027")
ENTRY(cudaThreadSynchronize, cudaThreadSynchronize, true, NO_FLAG, P0, "Successful")

// error handling functions of runtime API
ENTRY(cudaGetErrorName, cudaGetErrorName, true, NO_FLAG, P0, "Successful")
ENTRY(cudaGetErrorString, cudaGetErrorString, true, NO_FLAG, P0, "Successful")
ENTRY(cudaGetLastError, cudaGetLastError, true, NO_FLAG, P0, "DPCT1010")
ENTRY(cudaPeekAtLastError, cudaPeekAtLastError, true, NO_FLAG, P0, "DPCT1026/DPCT1027")

// stream management functions of API
ENTRY(cudaCtxResetPersistingL2Cache, cudaCtxResetPersistingL2Cache, true, NO_FLAG, P7, "DPCT1026/DPCT1027")
ENTRY(cudaStreamAddCallback, cudaStreamAddCallback, true, NO_FLAG, P0, "Successful")
ENTRY(cudaStreamAttachMemAsync, cudaStreamAttachMemAsync, true, API_CALL_REMOVED, P0, "DPCT1026/DPCT1027")
ENTRY(cudaStreamBeginCapture, cudaStreamBeginCapture, true, API_CALL_REMOVED, P4, "DPCT1026/DPCT1027")
ENTRY(cudaStreamBeginCaptureToGraph, cudaStreamBeginCaptureToGraph, false, NO_FLAG, P4, "comment")
ENTRY(cudaStreamCopyAttributes, cudaStreamCopyAttributes, false, NO_FLAG, P4, "comment")
ENTRY(cudaStreamCreate, cudaStreamCreate, true, NO_FLAG, P0, "Successful")
ENTRY(cudaStreamCreateWithFlags, cudaStreamCreateWithFlags, true, NO_FLAG, P0, "Successful: DPCT1025")
ENTRY(cudaStreamCreateWithPriority, cudaStreamCreateWithPriority, true, NO_FLAG, P0, "Successful: DPCT1025")
ENTRY(cudaStreamDestroy, cudaStreamDestroy, true, NO_FLAG, P0, "Successful")
ENTRY(cudaStreamEndCapture, cudaStreamEndCapture, true, API_CALL_REMOVED, P4, "DPCT1026/DPCT1027")
ENTRY(cudaStreamGetAttribute, cudaStreamGetAttribute, true, NO_FLAG, P7, "DPCT1026/DPCT1027")
ENTRY(cudaStreamGetCaptureInfo, cudaStreamGetCaptureInfo_v2, false, NO_FLAG, P4, "comment")
ENTRY(cudaStreamGetCaptureInfo_v3, cudaStreamGetCaptureInfo_v3, false, NO_FLAG, P4, "comment")
ENTRY(cudaStreamGetFlags, cudaStreamGetFlags, true, NO_FLAG, P4, "DPCT1014")
ENTRY(cudaStreamGetId, cudaStreamGetId, false, NO_FLAG, P4, "comment")
ENTRY(cudaStreamGetPriority, cudaStreamGetPriority, true, NO_FLAG, P4, "DPCT1014")
ENTRY(cudaStreamIsCapturing, cudaStreamIsCapturing, true, API_CALL_REMOVED, P4, "DPCT1026/DPCT1027")
ENTRY(cudaStreamQuery, cudaStreamQuery, true, API_CALL_REMOVED, P0, "DPCT1026/DPCT1027")
ENTRY(cudaStreamSetAttribute, cudaStreamSetAttribute, true, NO_FLAG, P7, "DPCT1026/DPCT1027")
ENTRY(cudaStreamSynchronize, cudaStreamSynchronize, true, NO_FLAG, P0, "Successful")
ENTRY(cudaStreamUpdateCaptureDependencies, cudaStreamUpdateCaptureDependencies, false, NO_FLAG, P4, "comment")
ENTRY(cudaStreamUpdateCaptureDependencies_v2, cudaStreamUpdateCaptureDependencies_v2, false, NO_FLAG, P4, "comment")
ENTRY(cudaStreamWaitEvent, cudaStreamWaitEvent, true, API_CALL_UNSUPPORTED, P0, "Successful")
ENTRY(cudaThreadExchangeStreamCaptureMode, cudaThreadExchangeStreamCaptureMode, false, NO_FLAG, P4, "comment")

// event management functions of runtime API
ENTRY(cudaEventCreate, cudaEventCreate, true, API_CALL_REMOVED, P0, "DPCT1026/DPCT1027")
ENTRY(cudaEventCreateWithFlags, cudaEventCreateWithFlags, true, API_CALL_REMOVED, P0, "DPCT1026/DPCT1027")
ENTRY(cudaEventDestroy, cudaEventDestroy, true, API_CALL_REMOVED, P0, "DPCT1026/DPCT1027")
ENTRY(cudaEventElapsedTime, cudaEventElapsedTime, true, NO_FLAG, P0, "DPCT1012")
ENTRY(cudaEventQuery, cudaEventQuery, true, NO_FLAG, P0, "Successful")
ENTRY(cudaEventRecord, cudaEventRecord, true, NO_FLAG, P0, "DPCT1012/DPCT1024")
ENTRY(cudaEventRecordWithFlags, cudaEventRecordWithFlags, false, NO_FLAG, P7, "comment")
ENTRY(cudaEventSynchronize, cudaEventSynchronize, true, NO_FLAG, P0, "DPCT1012")

// external resource interoperability functions of runtime API
ENTRY(cudaDestroyExternalMemory, cudaDestroyExternalMemory, false, NO_FLAG, P4, "comment")
ENTRY(cudaDestroyExternalSemaphore, cudaDestroyExternalSemaphore, false, NO_FLAG, P4, "comment")
ENTRY(cudaExternalMemoryGetMappedBuffer, cudaExternalMemoryGetMappedBuffer, false, NO_FLAG, P4, "comment")
ENTRY(cudaExternalMemoryGetMappedMipmappedArray, cudaExternalMemoryGetMappedMipmappedArray, false, NO_FLAG, P4, "comment")
ENTRY(cudaImportExternalMemory, cudaImportExternalMemory, false, NO_FLAG, P4, "comment")
ENTRY(cudaImportExternalSemaphore, cudaImportExternalSemaphore, false, NO_FLAG, P4, "comment")
ENTRY(cudaSignalExternalSemaphoresAsync, cudaSignalExternalSemaphoresAsync, false, NO_FLAG, P4, "comment")
ENTRY(cudaWaitExternalSemaphoresAsync, cudaWaitExternalSemaphoresAsync, false, NO_FLAG, P4, "comment")

// execution control functions of runtime API
ENTRY(cudaFuncGetAttributes, cudaFuncGetAttributes, true, NO_FLAG, P0, "Successful")
ENTRY(cudaFuncGetName, cudaFuncGetName, false, NO_FLAG, P4, "comment")
ENTRY(cudaFuncSetAttribute, cudaFuncSetAttribute, true, NO_FLAG, P0, "DPCT1026/DPCT1027")
ENTRY(cudaFuncSetCacheConfig, cudaFuncSetCacheConfig, true, API_CALL_UNSUPPORTED, P0, "DPCT1026")
ENTRY(cudaFuncSetSharedMemConfig, cudaFuncSetSharedMemConfig, true, NO_FLAG, P0, "DPCT1026")
ENTRY(cudaGetParameterBuffer, cudaGetParameterBuffer, false, NO_FLAG, P4, "comment")
ENTRY(cudaGetParameterBufferV2, cudaGetParameterBufferV2, false, NO_FLAG, P4, "comment")
ENTRY(cudaGridDependencySynchronize, cudaGridDependencySynchronize, false, NO_FLAG, P4, "comment")
ENTRY(cudaLaunchCooperativeKernel, cudaLaunchCooperativeKernel, true, NO_FLAG, P4, "Partial: DPCT1007")
ENTRY(cudaLaunchCooperativeKernelMultiDevice, cudaLaunchCooperativeKernelMultiDevice, false, NO_FLAG, P4, "comment")
ENTRY(cudaLaunchDevice, cudaLaunchDevice, false, NO_FLAG, P4, "comment")
ENTRY(cudaLaunchHostFunc, cudaLaunchHostFunc, false, NO_FLAG, P4, "comment")
ENTRY(cudaLaunchKernel, cudaLaunchKernel, true, NO_FLAG, P0, "Partial: DPCT1007, success only when directly using of kernel function name")
ENTRY(cudaLaunchKernelExC, cudaLaunchKernelExC, false, NO_FLAG, P4, "comment")
ENTRY(cudaSetDoubleForDevice, cudaSetDoubleForDevice, false, NO_FLAG, P0, "comment")
ENTRY(cudaSetDoubleForHost, cudaSetDoubleForHost, false, NO_FLAG, P0, "comment")
ENTRY(cudaTriggerProgrammaticLaunchCompletion, cudaTriggerProgrammaticLaunchCompletion, false, NO_FLAG, P4, "comments")

// occupancy calculation functions of runtime API
ENTRY(cudaOccupancyAvailableDynamicSMemPerBlock, cudaOccupancyAvailableDynamicSMemPerBlock, false, NO_FLAG, P4, "comment")
ENTRY(cudaOccupancyMaxActiveBlocksPerMultiprocessor, cudaOccupancyMaxActiveBlocksPerMultiprocessor, true, NO_FLAG, P0, "DPCT1111")
ENTRY(cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags, cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags, false, NO_FLAG, P0, "comment")
ENTRY(cudaOccupancyMaxActiveClusters, cudaOccupancyMaxActiveClusters, false, NO_FLAG, P4, "comment")
ENTRY(cudaOccupancyMaxPotentialClusterSize, cudaOccupancyMaxPotentialClusterSize, false, NO_FLAG, P4, "comment")

// deprecated execution control functions of runtime API
ENTRY(cudaConfigureCall, cudaConfigureCall, false, NO_FLAG, P0, "comment")
ENTRY(cudaLaunch, cudaLaunch, false, NO_FLAG, P0, "comment")
ENTRY(cudaSetupArgument, cudaSetupArgument, false, NO_FLAG, P0, "comment")

// memory management functions of runtime API
ENTRY(cudaArrayGetInfo, cudaArrayGetInfo, true, NO_FLAG, P0, "Successful")
ENTRY(cudaArrayGetMemoryRequirements, cudaArrayGetMemoryRequirements, false, NO_FLAG, P4, "comment")
ENTRY(cudaArrayGetPlane, cudaArrayGetPlane, false, NO_FLAG, P4, "comment")
ENTRY(cudaArrayGetSparseProperties, cudaArrayGetSparseProperties, false, NO_FLAG, P4, "comment")
ENTRY(cudaFree, cudaFree, true, NO_FLAG, P0, "Successful")
ENTRY(cudaFreeArray, cudaFreeArray, true, NO_FLAG, P0, "Successful")
ENTRY(cudaFreeHost, cudaFreeHost, true, NO_FLAG, P0, "Successful")
ENTRY(cudaFreeMipmappedArray, cudaFreeMipmappedArray, true, NO_FLAG, P0, "DPCT1026/DPCT1027")
ENTRY(cudaGetMipmappedArrayLevel, cudaGetMipmappedArrayLevel, true, NO_FLAG, P0, "DPCT1026/DPCT1027")
ENTRY(cudaGetSymbolAddress, cudaGetSymbolAddress, true, NO_FLAG, P0, "Successful")
ENTRY(cudaGetSymbolSize, cudaGetSymbolSize, true, NO_FLAG, P0, "Successful")
ENTRY(cudaHostAlloc, cudaHostAlloc, true, NO_FLAG, P0, "Successful")
ENTRY(cudaHostGetDevicePointer, cudaHostGetDevicePointer, true, NO_FLAG, P0, "Partial: DPCT1007")
ENTRY(cudaHostGetFlags, cudaHostGetFlags, true, NO_FLAG, P4, "Successful")
ENTRY(cudaHostRegister, cudaHostRegister, true, NO_FLAG, P0, "DPCT1026/DPCT1027")
ENTRY(cudaHostUnregister, cudaHostUnregister, true, NO_FLAG, P0, "DPCT1026/DPCT1027")
ENTRY(cudaMalloc, cudaMalloc, true, NO_FLAG, P0, "Successful")
ENTRY(cudaMalloc3D, cudaMalloc3D, true, NO_FLAG, P0, "Successful")
ENTRY(cudaMalloc3DArray, cudaMalloc3DArray, true, NO_FLAG, P0, "Successful")
ENTRY(cudaMallocArray, cudaMallocArray, true, NO_FLAG, P0, "Successful")
ENTRY(cudaMallocHost, cudaMallocHost, true, NO_FLAG, P0, "Successful")
ENTRY(cudaMallocManaged, cudaMallocManaged, true, NO_FLAG, P0, "Successful")
ENTRY(cudaMallocMipmappedArray, cudaMallocMipmappedArray, true, NO_FLAG, P0, "DPCT1026/DPCT1027")
ENTRY(cudaMallocPitch, cudaMallocPitch, true, NO_FLAG, P0, "Successful")
ENTRY(cudaMemAdvise, cudaMemAdvise, true, NO_FLAG, P0, "Partial: DPCT1063/DPCT1007")
ENTRY(cudaMemAdvise_v2, cudaMemAdvise_v2, false, NO_FLAG, P0, "comment")
ENTRY(cudaMemGetInfo, cudaMemGetInfo, true, NO_FLAG, P0, "DPCT1072/DPCT1106")
ENTRY(cudaMemPrefetchAsync, cudaMemPrefetchAsync, true, NO_FLAG, P0, "Partial: DPCT1007")
ENTRY(cudaMemRangeGetAttribute, cudaMemRangeGetAttribute, false, NO_FLAG, P4, "comment")
ENTRY(cudaMemRangeGetAttributes, cudaMemRangeGetAttributes, false, NO_FLAG, P4, "comment")
ENTRY(cudaMemcpy, cudaMemcpy, true, NO_FLAG, P0, "Successful")
ENTRY(cudaMemcpy2D, cudaMemcpy2D, true, NO_FLAG, P0, "Successful")
ENTRY(cudaMemcpy2DArrayToArray, cudaMemcpy2DArrayToArray, true, NO_FLAG, P0, "Successful")
ENTRY(cudaMemcpy2DAsync, cudaMemcpy2DAsync, true, NO_FLAG, P0, "Successful")
ENTRY(cudaMemcpy2DFromArray, cudaMemcpy2DFromArray, true, NO_FLAG, P0, "Successful")
ENTRY(cudaMemcpy2DFromArrayAsync, cudaMemcpy2DFromArrayAsync, true, NO_FLAG, P0, "Successful")
ENTRY(cudaMemcpy2DToArray, cudaMemcpy2DToArray, true, NO_FLAG, P0, "Successful")
ENTRY(cudaMemcpy2DToArrayAsync, cudaMemcpy2DToArrayAsync, true, NO_FLAG, P0, "Successful")
ENTRY(cudaMemcpy3D, cudaMemcpy3D, true, NO_FLAG, P0, "Successful")
ENTRY(cudaMemcpy3DAsync, cudaMemcpy3DAsync, true, NO_FLAG, P0, "Successful")
ENTRY(cudaMemcpy3DPeer, cudaMemcpy3DPeer, false, NO_FLAG, P0, "comment")
ENTRY(cudaMemcpy3DPeerAsync, cudaMemcpy3DPeerAsync, false, NO_FLAG, P0, "comment")
ENTRY(cudaMemcpyAsync, cudaMemcpyAsync, true, NO_FLAG, P0, "Successful")
ENTRY(cudaMemcpyFromSymbol, cudaMemcpyFromSymbol, true, NO_FLAG, P0, "Successful")
ENTRY(cudaMemcpyFromSymbolAsync, cudaMemcpyFromSymbolAsync, true, NO_FLAG, P0, "Successful")
ENTRY(cudaMemcpyPeer, cudaMemcpyPeer, false, NO_FLAG, P0, "comment")
ENTRY(cudaMemcpyPeerAsync, cudaMemcpyPeerAsync, false, NO_FLAG, P0, "comment")
ENTRY(cudaMemcpyToSymbol, cudaMemcpyToSymbol, true, NO_FLAG, P0, "Successful")
ENTRY(cudaMemcpyToSymbolAsync, cudaMemcpyToSymbolAsync, true, NO_FLAG, P0, "Successful")
ENTRY(cudaMemset, cudaMemset, true, NO_FLAG, P0, "Successful")
ENTRY(cudaMemset2D, cudaMemset2D, true, NO_FLAG, P0, "Successful")
ENTRY(cudaMemset2DAsync, cudaMemset2DAsync, true, NO_FLAG, P0, "Successful")
ENTRY(cudaMemset3D, cudaMemset3D, true, NO_FLAG, P0, "Successful")
ENTRY(cudaMemset3DAsync, cudaMemset3DAsync, true, NO_FLAG, P4, "Successful")
ENTRY(cudaMemsetAsync, cudaMemsetAsync, true, NO_FLAG, P0, "Successful")
ENTRY(cudaMipmappedArrayGetMemoryRequirements, cudaMipmappedArrayGetMemoryRequirements, false, NO_FLAG, P4, "comment")
ENTRY(cudaMipmappedArrayGetSparseProperties, cudaMipmappedArrayGetSparseProperties, false, NO_FLAG, P4, "comment")
ENTRY(make_cudaExtent, make_cudaExtent, true, NO_FLAG, P0, "Successful")
ENTRY(make_cudaPitchedPtr, make_cudaPitchedPtr, true, NO_FLAG, P0, "Successful")
ENTRY(make_cudaPos, make_cudaPos, true, NO_FLAG, P0, "Successful")

// deprecated memory management functions of runtime API
ENTRY(cudaMemcpyArrayToArray, cudaMemcpyArrayToArray, true, NO_FLAG, P0, "Successful")
ENTRY(cudaMemcpyFromArray, cudaMemcpyFromArray, true, NO_FLAG, P0, "Successful")
ENTRY(cudaMemcpyFromArrayAsync, cudaMemcpyFromArrayAsync, true, NO_FLAG, P0, "Successful")
ENTRY(cudaMemcpyToArray, cudaMemcpyToArray, true, NO_FLAG, P0, "Successful")
ENTRY(cudaMemcpyToArrayAsync, cudaMemcpyToArrayAsync, true, NO_FLAG, P0, "Successful")

// stream ordered memory allocator functions of runtime API
ENTRY(cudaFreeAsync, cudaFreeAsync, false, NO_FLAG, P7, "comment")
ENTRY(cudaMallocAsync, cudaMallocAsync, false, NO_FLAG, P7, "comment")
ENTRY(cudaMallocFromPoolAsync, cudaMallocFromPoolAsync, false, NO_FLAG, P7, "comment")
ENTRY(cudaMemPoolCreate, cudaMemPoolCreate, false, NO_FLAG, P4, "comment")
ENTRY(cudaMemPoolDestroy, cudaMemPoolDestroy, false, NO_FLAG, P7, "comment")
ENTRY(cudaMemPoolExportPointer, cudaMemPoolExportPointer, false, NO_FLAG, P4, "comment")
ENTRY(cudaMemPoolExportToShareableHandle, cudaMemPoolExportToShareableHandle, false, NO_FLAG, P7, "comment")
ENTRY(cudaMemPoolGetAccess, cudaMemPoolGetAccess, false, NO_FLAG, P4, "comment")
ENTRY(cudaMemPoolGetAttribute, cudaMemPoolGetAttribute, false, NO_FLAG, P4, "comment")
ENTRY(cudaMemPoolImportFromShareableHandle, cudaMemPoolImportFromShareableHandle, false, NO_FLAG, P4, "comment")
ENTRY(cudaMemPoolImportPointer, cudaMemPoolImportPointer, false, NO_FLAG, P7, "comment")
ENTRY(cudaMemPoolSetAccess, cudaMemPoolSetAccess, false, NO_FLAG, P4, "comment")
ENTRY(cudaMemPoolSetAttribute, cudaMemPoolSetAttribute, false, NO_FLAG, P4, "comment")
ENTRY(cudaMemPoolTrimTo, cudaMemPoolTrimTo, false, NO_FLAG, P4, "comment")

// unified addressing functions of runtime API
ENTRY(cudaPointerGetAttributes, cudaPointerGetAttributes, true, NO_FLAG, P0, "Successful")

// peer device memory access functions of runtime API
ENTRY(cudaDeviceCanAccessPeer, cudaDeviceCanAccessPeer, true, NO_FLAG, P0, "DPCT1031")
ENTRY(cudaDeviceDisablePeerAccess, cudaDeviceDisablePeerAccess, true, NO_FLAG, P0, "DPCT1026/DPCT1027")
ENTRY(cudaDeviceEnablePeerAccess, cudaDeviceEnablePeerAccess, true, NO_FLAG, P0, "DPCT1026/DPCT1027")

// OpenGL interoperability functions of runtime API
ENTRY(cudaGLGetDevices, cudaGLGetDevices, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphicsGLRegisterBuffer, cudaGraphicsGLRegisterBuffer, false, NO_FLAG, P0, "comment")
ENTRY(cudaGraphicsGLRegisterImage, cudaGraphicsGLRegisterImage, false, NO_FLAG, P0, "comment")
ENTRY(cudaWGLGetDevice, cudaWGLGetDevice, false, NO_FLAG, P4, "comment")

// deprecated OpenGL interoperability functionality.
ENTRY(cudaGLMapBufferObject, cudaGLMapBufferObject, false, NO_FLAG, P0, "comment")
ENTRY(cudaGLMapBufferObjectAsync, cudaGLMapBufferObjectAsync, false, NO_FLAG, P4, "comment")
ENTRY(cudaGLRegisterBufferObject, cudaGLRegisterBufferObject, false, NO_FLAG, P0, "comment")
ENTRY(cudaGLSetBufferObjectMapFlags, cudaGLSetBufferObjectMapFlags, false, NO_FLAG, P4, "comment")
ENTRY(cudaGLSetGLDevice, cudaGLSetGLDevice, false, NO_FLAG, P0, "comment")
ENTRY(cudaGLUnmapBufferObject, cudaGLUnmapBufferObject, false, NO_FLAG, P0, "comment")
ENTRY(cudaGLUnmapBufferObjectAsync, cudaGLUnmapBufferObjectAsync, false, NO_FLAG, P4, "comment")
ENTRY(cudaGLUnregisterBufferObject, cudaGLUnregisterBufferObject, false, NO_FLAG, P0, "comment")

// Direct3D 9 interoperability functions of runtime API
ENTRY(cudaD3D9GetDevice, cudaD3D9GetDevice, false, NO_FLAG, P4, "comment")
ENTRY(cudaD3D9GetDevices, cudaD3D9GetDevices, false, NO_FLAG, P4, "comment")
ENTRY(cudaD3D9GetDirect3DDevice, cudaD3D9GetDirect3DDevice, false, NO_FLAG, P4, "comment")
ENTRY(cudaD3D9SetDirect3DDevice, cudaD3D9SetDirect3DDevice, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphicsD3D9RegisterResource, cudaGraphicsD3D9RegisterResource, false, NO_FLAG, P4, "comment")

// deprecated Direct3D 9 interoperability functions of runtime API
ENTRY(cudaD3D9MapResources, cudaD3D9MapResources, false, NO_FLAG, P4, "comment")
ENTRY(cudaD3D9RegisterResource, cudaD3D9RegisterResource, false, NO_FLAG, P4, "comment")
ENTRY(cudaD3D9ResourceGetMappedArray, cudaD3D9ResourceGetMappedArray, false, NO_FLAG, P4, "comment")
ENTRY(cudaD3D9ResourceGetMappedPitch, cudaD3D9ResourceGetMappedPitch, false, NO_FLAG, P4, "comment")
ENTRY(cudaD3D9ResourceGetMappedPointer, cudaD3D9ResourceGetMappedPointer, false, NO_FLAG, P4, "comment")
ENTRY(cudaD3D9ResourceGetMappedSize, cudaD3D9ResourceGetMappedSize, false, NO_FLAG, P4, "comment")
ENTRY(cudaD3D9ResourceGetSurfaceDimensions, cudaD3D9ResourceGetSurfaceDimensions, false, NO_FLAG, P4, "comment")
ENTRY(cudaD3D9ResourceSetMapFlags, cudaD3D9ResourceSetMapFlags, false, NO_FLAG, P4, "comment")
ENTRY(cudaD3D9UnmapResources, cudaD3D9UnmapResources, false, NO_FLAG, P4, "comment")
ENTRY(cudaD3D9UnregisterResource, cudaD3D9UnregisterResource, false, NO_FLAG, P4, "comment")

// Direct3D 10 interoperability functions of runtime API
ENTRY(cudaD3D10GetDevice, cudaD3D10GetDevice, false, NO_FLAG, P4, "comment")
ENTRY(cudaD3D10GetDevices, cudaD3D10GetDevices, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphicsD3D10RegisterResource, cudaGraphicsD3D10RegisterResource, false, NO_FLAG, P4, "comment")

// deprecated Direct3D 10 interoperability functions.
ENTRY(cudaD3D10GetDirect3DDevice, cudaD3D10GetDirect3DDevice, false, NO_FLAG, P4, "comment")
ENTRY(cudaD3D10MapResources, cudaD3D10MapResources, false, NO_FLAG, P4, "comment")
ENTRY(cudaD3D10RegisterResource, cudaD3D10RegisterResource, false, NO_FLAG, P4, "comment")
ENTRY(cudaD3D10ResourceGetMappedArray, cudaD3D10ResourceGetMappedArray, false, NO_FLAG, P4, "comment")
ENTRY(cudaD3D10ResourceGetMappedPitch, cudaD3D10ResourceGetMappedPitch, false, NO_FLAG, P4, "comment")
ENTRY(cudaD3D10ResourceGetMappedPointer, cudaD3D10ResourceGetMappedPointer, false, NO_FLAG, P4, "comment")
ENTRY(cudaD3D10ResourceGetMappedSize, cudaD3D10ResourceGetMappedSize, false, NO_FLAG, P4, "comment")
ENTRY(cudaD3D10ResourceGetSurfaceDimensions, cudaD3D10ResourceGetSurfaceDimensions, false, NO_FLAG, P4, "comment")
ENTRY(cudaD3D10ResourceSetMapFlags, cudaD3D10ResourceSetMapFlags, false, NO_FLAG, P4, "comment")
ENTRY(cudaD3D10SetDirect3DDevice, cudaD3D10SetDirect3DDevice, false, NO_FLAG, P4, "comment")
ENTRY(cudaD3D10UnmapResources, cudaD3D10UnmapResources, false, NO_FLAG, P4, "comment")
ENTRY(cudaD3D10UnregisterResource, cudaD3D10UnregisterResource, false, NO_FLAG, P4, "comment")

// Direct3D 11 interoperability functions of runtime API
ENTRY(cudaD3D11GetDevice, cudaD3D11GetDevice, false, NO_FLAG, P4, "comment")
ENTRY(cudaD3D11GetDevices, cudaD3D11GetDevices, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphicsD3D11RegisterResource, cudaGraphicsD3D11RegisterResource, false, NO_FLAG, P4, "comment")

// deprecated Direct3D 11 interoperability functions of runtime API
ENTRY(cudaD3D11GetDirect3DDevice, cudaD3D11GetDirect3DDevice, false, NO_FLAG, P4, "comment")
ENTRY(cudaD3D11SetDirect3DDevice, cudaD3D11SetDirect3DDevice, false, NO_FLAG, P4, "comment")

// VDPAU interoperability functions of runtime API
ENTRY(cudaGraphicsVDPAURegisterOutputSurface, cudaGraphicsVDPAURegisterOutputSurface, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphicsVDPAURegisterVideoSurface, cudaGraphicsVDPAURegisterVideoSurface, false, NO_FLAG, P4, "comment")
ENTRY(cudaVDPAUGetDevice, cudaVDPAUGetDevice, false, NO_FLAG, P4, "comment")
ENTRY(cudaVDPAUSetVDPAUDevice, cudaVDPAUSetVDPAUDevice, false, NO_FLAG, P4, "comment")

// EGL interoperability functions of runtime API
ENTRY(cudaEGLStreamConsumerAcquireFrame, cudaEGLStreamConsumerAcquireFrame, false, NO_FLAG, P4, "comment")
ENTRY(cudaEGLStreamConsumerConnect, cudaEGLStreamConsumerConnect, false, NO_FLAG, P4, "comment")
ENTRY(cudaEGLStreamConsumerConnectWithFlags, cudaEGLStreamConsumerConnectWithFlags, false, NO_FLAG, P4, "comment")
ENTRY(cudaEGLStreamConsumerDisconnect, cudaEGLStreamConsumerDisconnect, false, NO_FLAG, P4, "comment")
ENTRY(cudaEGLStreamConsumerReleaseFrame, cudaEGLStreamConsumerReleaseFrame, false, NO_FLAG, P4, "comment")
ENTRY(cudaEGLStreamProducerConnect, cudaEGLStreamProducerConnect, false, NO_FLAG, P4, "comment")
ENTRY(cudaEGLStreamProducerDisconnect, cudaEGLStreamProducerDisconnect, false, NO_FLAG, P4, "comment")
ENTRY(cudaEGLStreamProducerPresentFrame, cudaEGLStreamProducerPresentFrame, false, NO_FLAG, P4, "comment")
ENTRY(cudaEGLStreamProducerReturnFrame, cudaEGLStreamProducerReturnFrame, false, NO_FLAG, P4, "comment")
ENTRY(cudaEventCreateFromEGLSync, cudaEventCreateFromEGLSync, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphicsEGLRegisterImage, cudaGraphicsEGLRegisterImage, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphicsResourceGetMappedEglFrame, cudaGraphicsResourceGetMappedEglFrame, false, NO_FLAG, P4, "comment")

// graphics interoperability functions of runtime API
ENTRY(cudaGraphicsMapResources, cudaGraphicsMapResources, false, NO_FLAG, P0, "comment")
ENTRY(cudaGraphicsResourceGetMappedMipmappedArray, cudaGraphicsResourceGetMappedMipmappedArray, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphicsResourceGetMappedPointer, cudaGraphicsResourceGetMappedPointer, false, NO_FLAG, P0, "comment")
ENTRY(cudaGraphicsResourceSetMapFlags, cudaGraphicsResourceSetMapFlags, false, NO_FLAG, P0, "comment")
ENTRY(cudaGraphicsSubResourceGetMappedArray, cudaGraphicsSubResourceGetMappedArray, false, NO_FLAG, P0, "comment")
ENTRY(cudaGraphicsUnmapResources, cudaGraphicsUnmapResources, false, NO_FLAG, P0, "comment")
ENTRY(cudaGraphicsUnregisterResource, cudaGraphicsUnregisterResource, false, NO_FLAG, P0, "comment")

// low level texture reference management functions of runtime API
ENTRY(cudaBindTexture, cudaBindTexture, true, NO_FLAG, P0, "Successful")
ENTRY(cudaBindTexture2D, cudaBindTexture2D, true, NO_FLAG, P0, "Successful")
ENTRY(cudaBindTextureToArray, cudaBindTextureToArray, true, NO_FLAG, P0, "Successful")
ENTRY(cudaBindTextureToMipmappedArray, cudaBindTextureToMipmappedArray, true, NO_FLAG, P4, "Successful")
ENTRY(cudaGetTextureAlignmentOffset, cudaGetTextureAlignmentOffset, false, NO_FLAG, P0, "comment")
ENTRY(cudaGetTextureReference, cudaGetTextureReference, false, NO_FLAG, P0, "comment")
ENTRY(cudaUnbindTexture, cudaUnbindTexture, true, NO_FLAG, P0, "Successful")

// low level surface reference management functions of runtime API
ENTRY(cudaBindSurfaceToArray, cudaBindSurfaceToArray, false, NO_FLAG, P0, "comment")
ENTRY(cudaGetSurfaceReference, cudaGetSurfaceReference, false, NO_FLAG, P4, "comment")

// low level texture object management functions of runtime API
ENTRY(cudaCreateChannelDesc, cudaCreateChannelDesc, true, NO_FLAG, P0, "Successful")
ENTRY(cudaCreateChannelDescHalf, cudaCreateChannelDescHalf, true, NO_FLAG, P0, "Successful")
ENTRY(cudaCreateChannelDescHalf1, cudaCreateChannelDescHalf1, true, NO_FLAG, P0, "Successful")
ENTRY(cudaCreateChannelDescHalf2, cudaCreateChannelDescHalf2, true, NO_FLAG, P0, "Successful")
ENTRY(cudaCreateChannelDescHalf4, cudaCreateChannelDescHalf4, true, NO_FLAG, P0, "Successful")
ENTRY(cudaCreateTextureObject, cudaCreateTextureObject, true, NO_FLAG, P0, "Successful")
ENTRY(cudaDestroyTextureObject, cudaDestroyTextureObject, true, NO_FLAG, P0, "Successful")
ENTRY(cudaGetChannelDesc, cudaGetChannelDesc, true, NO_FLAG, P0, "Successful")
ENTRY(cudaGetTextureObjectResourceDesc, cudaGetTextureObjectResourceDesc, true, NO_FLAG, P0, "Successful")
ENTRY(cudaGetTextureObjectResourceViewDesc, cudaGetTextureObjectResourceViewDesc, false, API_CALL_UNSUPPORTED, P4, "DPCT1007")
ENTRY(cudaGetTextureObjectTextureDesc, cudaGetTextureObjectTextureDesc, true, NO_FLAG, P4, "Successful")

// low level texture surface management functions of runtime API
ENTRY(cudaCreateSurfaceObject, cudaCreateSurfaceObject, false, NO_FLAG, P0, "comment")
ENTRY(cudaDestroySurfaceObject, cudaDestroySurfaceObject, false, NO_FLAG, P0, "comment")
ENTRY(cudaGetSurfaceObjectResourceDesc, cudaGetSurfaceObjectResourceDesc, false, NO_FLAG, P4, "comment")

// Version Management
ENTRY(cudaDriverGetVersion, cudaDriverGetVersion, true, NO_FLAG, P0, "DPCT1043")
ENTRY(cudaRuntimeGetVersion, cudaRuntimeGetVersion, true, NO_FLAG, P0, "DPCT1043")

// Graph Management
ENTRY(cudaDeviceGetGraphMemAttribute, cudaDeviceGetGraphMemAttribute, false, NO_FLAG, P4, "comment")
ENTRY(cudaDeviceGraphMemTrim, cudaDeviceGraphMemTrim, false, NO_FLAG, P4, "comment")
ENTRY(cudaDeviceSetGraphMemAttribute, cudaDeviceSetGraphMemAttribute, false, NO_FLAG, P4, "comment")
ENTRY(cudaGetCurrentGraphExec, cudaGetCurrentGraphExec, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphAddChildGraphNode, cudaGraphAddChildGraphNode, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphAddDependencies, cudaGraphAddDependencies, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphAddDependencies_v2, cudaGraphAddDependencies_v2, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphAddEmptyNode, cudaGraphAddEmptyNode, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphAddEventRecordNode, cudaGraphAddEventRecordNode, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphAddEventWaitNode, cudaGraphAddEventWaitNode, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphAddExternalSemaphoresSignalNode, cudaGraphAddExternalSemaphoresSignalNode, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphAddExternalSemaphoresWaitNode, cudaGraphAddExternalSemaphoresWaitNode, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphAddHostNode, cudaGraphAddHostNode, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphAddKernelNode, cudaGraphAddKernelNode, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphAddMemAllocNode, cudaGraphAddMemAllocNode, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphAddMemFreeNode, cudaGraphAddMemFreeNode, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphAddMemcpyNode, cudaGraphAddMemcpyNode, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphAddMemcpyNode1D, cudaGraphAddMemcpyNode1D, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphAddMemcpyNodeFromSymbol, cudaGraphAddMemcpyNodeFromSymbol, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphAddMemcpyNodeToSymbol, cudaGraphAddMemcpyNodeToSymbol, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphAddMemsetNode, cudaGraphAddMemsetNode, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphAddNode, cudaGraphAddNode, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphAddNode_v2, cudaGraphAddNode_v2, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphChildGraphNodeGetGraph, cudaGraphChildGraphNodeGetGraph, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphClone, cudaGraphClone, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphCreate, cudaGraphCreate, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphDebugDotPrint, cudaGraphDebugDotPrint, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphDestroy, cudaGraphDestroy, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphDestroyNode, cudaGraphDestroyNode, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphEventRecordNodeGetEvent, cudaGraphEventRecordNodeGetEvent, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphEventRecordNodeSetEvent, cudaGraphEventRecordNodeSetEvent, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphEventWaitNodeGetEvent, cudaGraphEventWaitNodeGetEvent, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphEventWaitNodeSetEvent, cudaGraphEventWaitNodeSetEvent, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphExecChildGraphNodeSetParams, cudaGraphExecChildGraphNodeSetParams, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphExecDestroy, cudaGraphExecDestroy, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphExecEventRecordNodeSetEvent, cudaGraphExecEventRecordNodeSetEvent, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphExecEventWaitNodeSetEvent, cudaGraphExecEventWaitNodeSetEvent, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphExecExternalSemaphoresSignalNodeSetParams, cudaGraphExecExternalSemaphoresSignalNodeSetParams, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphExecExternalSemaphoresWaitNodeSetParams, cudaGraphExecExternalSemaphoresWaitNodeSetParams, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphExecGetFlags, cudaGraphExecGetFlags, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphExecHostNodeSetParams, cudaGraphExecHostNodeSetParams,false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphExecKernelNodeSetParams, cudaGraphExecKernelNodeSetParams, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphExecMemcpyNodeSetParams, cudaGraphExecMemcpyNodeSetParams, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphExecMemcpyNodeSetParams1D, cudaGraphExecMemcpyNodeSetParams1D, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphExecMemcpyNodeSetParamsFromSymbol, cudaGraphExecMemcpyNodeSetParamsFromSymbol, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphExecMemcpyNodeSetParamsToSymbol, cudaGraphExecMemcpyNodeSetParamsToSymbol, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphExecMemsetNodeSetParams, cudaGraphExecMemsetNodeSetParams, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphExecNodeSetParams, cudaGraphExecNodeSetParams, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphExecUpdate, cudaGraphExecUpdate, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphExternalSemaphoresSignalNodeGetParams, cudaGraphExternalSemaphoresSignalNodeGetParams, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphExternalSemaphoresSignalNodeSetParams, cudaGraphExternalSemaphoresSignalNodeSetParams, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphExternalSemaphoresWaitNodeGetParams, cudaGraphExternalSemaphoresWaitNodeGetParams, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphExternalSemaphoresWaitNodeSetParams, cudaGraphExternalSemaphoresWaitNodeSetParams, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphGetEdges, cudaGraphGetEdges, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphGetEdges_v2, cudaGraphGetEdges_v2, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphGetNodes, cudaGraphGetNodes, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphGetRootNodes, cudaGraphGetRootNodes, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphHostNodeGetParams, cudaGraphHostNodeGetParams, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphHostNodeSetParams, cudaGraphHostNodeSetParams, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphInstantiate, cudaGraphInstantiate, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphInstantiateWithFlags, cudaGraphInstantiateWithFlags, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphInstantiateWithParams, cudaGraphInstantiateWithParams, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphKernelNodeCopyAttributes, cudaGraphKernelNodeCopyAttributes, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphKernelNodeGetAttribute, cudaGraphKernelNodeGetAttribute, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphKernelNodeGetParams, cudaGraphKernelNodeGetParams, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphKernelNodeSetAttribute, cudaGraphKernelNodeSetAttribute, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphKernelNodeSetParams, cudaGraphKernelNodeSetParams, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphLaunch, cudaGraphLaunch, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphMemAllocNodeGetParams, cudaGraphMemAllocNodeGetParams, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphMemFreeNodeGetParams, cudaGraphMemFreeNodeGetParams, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphMemcpyNodeGetParams, cudaGraphMemcpyNodeGetParams, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphMemcpyNodeSetParams, cudaGraphMemcpyNodeSetParams, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphMemcpyNodeSetParams1D, cudaGraphMemcpyNodeSetParams1D, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphMemcpyNodeSetParamsFromSymbol, cudaGraphMemcpyNodeSetParamsFromSymbol, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphMemcpyNodeSetParamsToSymbol, cudaGraphMemcpyNodeSetParamsToSymbol, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphMemsetNodeGetParams, cudaGraphMemsetNodeGetParams, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphMemsetNodeSetParams, cudaGraphMemsetNodeSetParams, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphNodeFindInClone, cudaGraphNodeFindInClone, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphNodeGetDependencies, cudaGraphNodeGetDependencies, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphNodeGetDependencies_v2, cudaGraphNodeGetDependencies_v2, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphNodeGetDependentNodes, cudaGraphNodeGetDependentNodes, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphNodeGetDependentNodes_v2, cudaGraphNodeGetDependentNodes_v2, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphNodeGetEnabled, cudaGraphNodeGetEnabled, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphNodeGetType, cudaGraphNodeGetType, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphNodeSetEnabled, cudaGraphNodeSetEnabled, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphNodeSetParams, cudaGraphNodeSetParams, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphReleaseUserObject, cudaGraphReleaseUserObject, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphRemoveDependencies, cudaGraphRemoveDependencies, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphRemoveDependencies_v2, cudaGraphRemoveDependencies_v2, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphRetainUserObject, cudaGraphRetainUserObject, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphSetConditional, cudaGraphSetConditional, false, NO_FLAG, P4, "comment")
ENTRY(cudaGraphUpload, cudaGraphUpload, false, NO_FLAG, P4, "comment")
ENTRY(cudaUserObjectCreate, cudaUserObjectCreate, false, NO_FLAG, P4, "comment")
ENTRY(cudaUserObjectRelease, cudaUserObjectRelease, false, NO_FLAG, P4, "comment")
ENTRY(cudaUserObjectRetain, cudaUserObjectRetain, false, NO_FLAG, P4, "comment")

// Driver Entry Point Access functions of runtime API
ENTRY(cudaGetDriverEntryPoint, cudaGetDriverEntryPoint, false, NO_FLAG, P7, "comment")

// C++ high level API functions of runtime API
ENTRY(cudaOccupancyMaxPotentialBlockSize, cudaOccupancyMaxPotentialBlockSize, true, NO_FLAG, P0, "DPCT1111")
ENTRY(cudaOccupancyMaxPotentialBlockSizeVariableSMem, cudaOccupancyMaxPotentialBlockSizeVariableSMem, false, NO_FLAG, P0, "comment")
ENTRY(cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags, cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags, false, NO_FLAG, P4, "comment")
ENTRY(cudaOccupancyMaxPotentialBlockSizeWithFlags, cudaOccupancyMaxPotentialBlockSizeWithFlags, false, NO_FLAG, P4, "comment")

// Interactions with the CUDA Driver functions of runtime API
ENTRY(cudaGetFuncBySymbol, cudaGetFuncBySymbol, false, NO_FLAG, P7, "comment")
ENTRY(cudaGetKernel, cudaGetKernel, false, NO_FLAG, P0, "comment")

// profiler control functions of runtime API
ENTRY(cudaProfilerInitialize, cudaProfilerInitialize, false, NO_FLAG, P4, "comment")
ENTRY(cudaProfilerStart, cudaProfilerStart, true, NO_FLAG, P0, "DPCT1026/DPCT1027")
ENTRY(cudaProfilerStop, cudaProfilerStop, true, NO_FLAG, P0, "DPCT1026/DPCT1027")

// Atomic API
ENTRY(atomicAdd, atomicAdd, true, NO_FLAG, P0, "Successful: DPCT1039")
ENTRY(atomicSub, atomicSub, true, NO_FLAG, P0, "Successful: DPCT1039")
ENTRY(atomicExch, atomicExch, true, NO_FLAG, P0, "Successful: DPCT1039")
ENTRY(atomicMin, atomicMin, true, NO_FLAG, P0, "Successful: DPCT1039")
ENTRY(atomicMax, atomicMax, true, NO_FLAG, P0, "Successful: DPCT1039")
ENTRY(atomicInc, atomicInc, true, NO_FLAG, P0, "Successful: DPCT1039")
ENTRY(atomicDec, atomicDec, true, NO_FLAG, P0, "Successful: DPCT1039")
ENTRY(atomicCAS, atomicCAS, true, NO_FLAG, P0, "Successful: DPCT1039")
ENTRY(atomicAnd, atomicAnd, true, NO_FLAG, P0, "Successful: DPCT1039")
ENTRY(atomicOr, atomicOr, true, NO_FLAG, P0, "Successful: DPCT1039")
ENTRY(atomicXor, atomicXor, true, NO_FLAG, P0, "Successful: DPCT1039")

// FP8 Conversion and Data Movement
ENTRY(__nv_cvt_bfloat16raw2_to_fp8x2, __nv_cvt_bfloat16raw2_to_fp8x2, false, NO_FLAG, P4, "comment")
ENTRY(__nv_cvt_bfloat16raw_to_fp8, __nv_cvt_bfloat16raw_to_fp8, false, NO_FLAG, P4, "comment")
ENTRY(__nv_cvt_double2_to_fp8x2, __nv_cvt_double2_to_fp8x2, false, NO_FLAG, P4, "comment")
ENTRY(__nv_cvt_double_to_fp8, __nv_cvt_double_to_fp8, false, NO_FLAG, P4, "comment")
ENTRY(__nv_cvt_float2_to_fp8x2, __nv_cvt_float2_to_fp8x2, false, NO_FLAG, P4, "comment")
ENTRY(__nv_cvt_float_to_fp8, __nv_cvt_float_to_fp8, false, NO_FLAG, P4, "comment")
ENTRY(__nv_cvt_fp8_to_halfraw, __nv_cvt_fp8_to_halfraw, false, NO_FLAG, P4, "comment")
ENTRY(__nv_cvt_fp8x2_to_halfraw2, __nv_cvt_fp8x2_to_halfraw2, false, NO_FLAG, P4, "comment")
ENTRY(__nv_cvt_halfraw2_to_fp8x2, __nv_cvt_halfraw2_to_fp8x2, false, NO_FLAG, P4, "comment")
ENTRY(__nv_cvt_halfraw_to_fp8, __nv_cvt_halfraw_to_fp8, false, NO_FLAG, P4, "comment")

// Half Arithmetic Functions
ENTRY(__habs, __habs, true, NO_FLAG, P4, "Successful")
ENTRY(__hadd, __hadd, true, NO_FLAG, P0, "Successful")
ENTRY(__hadd_rn, __hadd_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__hadd_sat, __hadd_sat, true, NO_FLAG, P4, "Successful")
ENTRY(__hdiv, __hdiv, true, NO_FLAG, P4, "Successful")
ENTRY(__hfma, __hfma, true, NO_FLAG, P0, "Successful")
ENTRY(__hfma_relu, __hfma_relu, true, NO_FLAG, P4, "Successful")
ENTRY(__hfma_sat, __hfma_sat, true, NO_FLAG, P4, "Successful")
ENTRY(__hmul, __hmul, true, NO_FLAG, P4, "Successful")
ENTRY(__hmul_rn, __hmul_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__hmul_sat, __hmul_sat, true, NO_FLAG, P4, "Successful")
ENTRY(__hneg, __hneg, true, NO_FLAG, P4, "Successful")
ENTRY(__hsub, __hsub, true, NO_FLAG, P4, "Successful")
ENTRY(__hsub_rn, __hsub_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__hsub_sat, __hsub_sat, true, NO_FLAG, P4, "Successful")
// half version atomicAdd is overload with the ENTRY in 'Atomic API'

// Half2 Arithmetic Functions
ENTRY(__h2div, __h2div, true, NO_FLAG, P4, "Successful")
ENTRY(__habs2, __habs2, true, NO_FLAG, P4, "Successful")
ENTRY(__hadd2, __hadd2, true, NO_FLAG, P0, "Successful")
ENTRY(__hadd2_rn, __hadd2_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__hadd2_sat, __hadd2_sat, true, NO_FLAG, P4, "Successful")
ENTRY(__hcmadd, __hcmadd, true, NO_FLAG, P4, "Successful")
ENTRY(__hfma2, __hfma2, true, NO_FLAG, P0, "Successful")
ENTRY(__hfma2_relu, __hfma2_relu, true, NO_FLAG, P4, "Successful")
ENTRY(__hfma2_sat, __hfma2_sat, true, NO_FLAG, P4, "Successful")
ENTRY(__hmul2, __hmul2, true, NO_FLAG, P4, "Successful")
ENTRY(__hmul2_rn, __hmul2_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__hmul2_sat, __hmul2_sat, true, NO_FLAG, P4, "Successful")
ENTRY(__hneg2, __hneg2, true, NO_FLAG, P4, "Successful")
ENTRY(__hsub2, __hsub2, true, NO_FLAG, P4, "Successful")
ENTRY(__hsub2_rn, __hsub2_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__hsub2_sat, __hsub2_sat, true, NO_FLAG, P4, "Successful")
// half2 version atomicAdd is overload with the ENTRY in 'Atomic API'

// Half Comparison Functions
ENTRY(__heq, __heq, true, NO_FLAG, P4, "Successful")
ENTRY(__hequ, __hequ, true, NO_FLAG, P4, "Successful")
ENTRY(__hge, __hge, true, NO_FLAG, P4, "Successful")
ENTRY(__hgeu, __hgeu, true, NO_FLAG, P4, "Successful")
ENTRY(__hgt, __hgt, true, NO_FLAG, P4, "Successful")
ENTRY(__hgtu, __hgtu, true, NO_FLAG, P4, "Successful")
ENTRY(__hisinf, __hisinf, true, NO_FLAG, P4, "Successful")
ENTRY(__hisnan, __hisnan, true, NO_FLAG, P4, "Successful")
ENTRY(__hle, __hle, true, NO_FLAG, P4, "Successful")
ENTRY(__hleu, __hleu, true, NO_FLAG, P4, "Successful")
ENTRY(__hlt, __hlt, true, NO_FLAG, P4, "Successful")
ENTRY(__hltu, __hltu, true, NO_FLAG, P4, "Successful")
ENTRY(__hmax, __hmax, true, NO_FLAG, P4, "Successful")
ENTRY(__hmax_nan, __hmax_nan, true, NO_FLAG, P4, "Successful")
ENTRY(__hmin, __hmin, true, NO_FLAG, P4, "Successful")
ENTRY(__hmin_nan, __hmin_nan, true, NO_FLAG, P4, "Successful")
ENTRY(__hne, __hne, true, NO_FLAG, P4, "Successful")
ENTRY(__hneu, __hneu, true, NO_FLAG, P4, "Successful")

// Half2 Comparison Functions
ENTRY(__hbeq2, __hbeq2, true, NO_FLAG, P4, "Successful")
ENTRY(__hbequ2, __hbequ2, true, NO_FLAG, P4, "Successful")
ENTRY(__hbge2, __hbge2, true, NO_FLAG, P4, "Successful")
ENTRY(__hbgeu2, __hbgeu2, true, NO_FLAG, P4, "Successful")
ENTRY(__hbgt2, __hbgt2, true, NO_FLAG, P4, "Successful")
ENTRY(__hbgtu2, __hbgtu2, true, NO_FLAG, P4, "Successful")
ENTRY(__hble2, __hble2, true, NO_FLAG, P4, "Successful")
ENTRY(__hbleu2, __hbleu2, true, NO_FLAG, P4, "Successful")
ENTRY(__hblt2, __hblt2, true, NO_FLAG, P4, "Successful")
ENTRY(__hbltu2, __hbltu2, true, NO_FLAG, P4, "Successful")
ENTRY(__hbne2, __hbne2, true, NO_FLAG, P4, "Successful")
ENTRY(__hbneu2, __hbneu2, true, NO_FLAG, P4, "Successful")
ENTRY(__heq2, __heq2, true, NO_FLAG, P4, "Successful")
ENTRY(__heq2_mask, __heq2_mask, true, NO_FLAG, P4, "Successful")
ENTRY(__hequ2, __hequ2, true, NO_FLAG, P4, "Successful")
ENTRY(__hequ2_mask, __hequ2_mask, true, NO_FLAG, P4, "Successful")
ENTRY(__hge2, __hge2, true, NO_FLAG, P4, "Successful")
ENTRY(__hge2_mask, __hge2_mask, true, NO_FLAG, P4, "Successful")
ENTRY(__hgeu2, __hgeu2, true, NO_FLAG, P4, "Successful")
ENTRY(__hgeu2_mask, __hgeu2_mask, true, NO_FLAG, P4, "Successful")
ENTRY(__hgt2, __hgt2, true, NO_FLAG, P4, "Successful")
ENTRY(__hgt2_mask, __hgt2_mask, true, NO_FLAG, P4, "Successful")
ENTRY(__hgtu2, __hgtu2, true, NO_FLAG, P4, "Successful")
ENTRY(__hgtu2_mask, __hgtu2_mask, true, NO_FLAG, P4, "Successful")
ENTRY(__hisnan2, __hisnan2, true, NO_FLAG, P4, "Successful")
ENTRY(__hle2, __hle2, true, NO_FLAG, P4, "Successful")
ENTRY(__hle2_mask, __hle2_mask, true, NO_FLAG, P4, "Successful")
ENTRY(__hleu2, __hleu2, true, NO_FLAG, P4, "Successful")
ENTRY(__hleu2_mask, __hleu2_mask, true, NO_FLAG, P4, "Successful")
ENTRY(__hlt2, __hlt2, true, NO_FLAG, P4, "Successful")
ENTRY(__hlt2_mask, __hlt2_mask, true, NO_FLAG, P4, "Successful")
ENTRY(__hltu2, __hltu2, true, NO_FLAG, P4, "Successful")
ENTRY(__hltu2_mask, __hltu2_mask, true, NO_FLAG, P4, "Successful")
ENTRY(__hmax2, __hmax2, true, NO_FLAG, P4, "Successful")
ENTRY(__hmax2_nan, __hmax2_nan, true, NO_FLAG, P4, "Successful")
ENTRY(__hmin2, __hmin2, true, NO_FLAG, P4, "Successful")
ENTRY(__hmin2_nan, __hmin2_nan, true, NO_FLAG, P4, "Successful")
ENTRY(__hne2, __hne2, true, NO_FLAG, P4, "Successful")
ENTRY(__hne2_mask, __hne2_mask, true, NO_FLAG, P4, "Successful")
ENTRY(__hneu2, __hneu2, true, NO_FLAG, P4, "Successful")
ENTRY(__hneu2_mask, __hneu2_mask, true, NO_FLAG, P4, "Successful")

// Half Precision Conversion and Data Movement
ENTRY(__double2half, __double2half, true, NO_FLAG, P4, "Successful")
ENTRY(__float22half2_rn, __float22half2_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__float2half, __float2half, true, NO_FLAG, P0, "Successful")
ENTRY(__float2half2_rn, __float2half2_rn, true, NO_FLAG, P0, "Successful")
ENTRY(__float2half_rd, __float2half_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__float2half_rn, __float2half_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__float2half_ru, __float2half_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__float2half_rz, __float2half_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__floats2half2_rn, __floats2half2_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__half22float2, __half22float2, true, NO_FLAG, P4, "Successful")
ENTRY(__half2float, __half2float, true, NO_FLAG, P0, "Successful")
ENTRY(__half2half2, __half2half2, true, NO_FLAG, P4, "Successful")
ENTRY(__half2int_rd, __half2int_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__half2int_rn, __half2int_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__half2int_ru, __half2int_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__half2int_rz, __half2int_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__half2ll_rd, __half2ll_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__half2ll_rn, __half2ll_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__half2ll_ru, __half2ll_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__half2ll_rz, __half2ll_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__half2short_rd, __half2short_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__half2short_rn, __half2short_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__half2short_ru, __half2short_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__half2short_rz, __half2short_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__half2uint_rd, __half2uint_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__half2uint_rn, __half2uint_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__half2uint_ru, __half2uint_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__half2uint_rz, __half2uint_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__half2ull_rd, __half2ull_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__half2ull_rn, __half2ull_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__half2ull_ru, __half2ull_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__half2ull_rz, __half2ull_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__half2ushort_rd, __half2ushort_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__half2ushort_rn, __half2ushort_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__half2ushort_ru, __half2ushort_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__half2ushort_rz, __half2ushort_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__half_as_short, __half_as_short, true, NO_FLAG, P4, "Successful")
ENTRY(__half_as_ushort, __half_as_ushort, true, NO_FLAG, P4, "Successful")
ENTRY(__halves2half2, __halves2half2, true, NO_FLAG, P4, "Successful")
ENTRY(__high2float, __high2float, true, NO_FLAG, P0, "Successful")
ENTRY(__high2half, __high2half, true, NO_FLAG, P4, "Successful")
ENTRY(__high2half2, __high2half2, true, NO_FLAG, P4, "Successful")
ENTRY(__highs2half2, __highs2half2, true, NO_FLAG, P4, "Successful")
ENTRY(__int2half_rd, __int2half_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__int2half_rn, __int2half_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__int2half_ru, __int2half_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__int2half_rz, __int2half_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__ldca, __ldca, true, NO_FLAG, P4, "DPCT1098")
// half2 version __ldca is overload with previous half version ENTRY
ENTRY(__ldcg, __ldcg, true, NO_FLAG, P4, "DPCT1098")
// half2 version __ldcg is overload with previous half version ENTRY
ENTRY(__ldcs, __ldcs, true, NO_FLAG, P4, "DPCT1098")
// half2 version __ldcs is overload with previous half version ENTRY
ENTRY(__ldcv, __ldcv, true, NO_FLAG, P4, "DPCT1098")
// half2 version __ldcv is overload with previous half version ENTRY
ENTRY(__ldg, __ldg, true, NO_FLAG, P0, "DPCT1098")
// half2 version __ldg is overload with previous half version ENTRY
ENTRY(__ldlu, __ldlu, true, NO_FLAG, P4, "DPCT1098")
// half2 version __ldlu is overload with previous half version ENTRY
ENTRY(__ll2half_rd, __ll2half_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__ll2half_rn, __ll2half_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__ll2half_ru, __ll2half_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__ll2half_rz, __ll2half_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__low2float, __low2float, true, NO_FLAG, P0, "Successful")
ENTRY(__low2half, __low2half, true, NO_FLAG, P4, "Successful")
ENTRY(__low2half2, __low2half2, true, NO_FLAG, P4, "Successful")
ENTRY(__lowhigh2highlow, __lowhigh2highlow, true, NO_FLAG, P4, "Successful")
ENTRY(__lows2half2, __lows2half2, true, NO_FLAG, P4, "Successful")
ENTRY(__shfl_down_sync, __shfl_down_sync, true, NO_FLAG, P0, "Successful")
// half2 version __shfl_down_sync is overload with previous half version ENTRY
ENTRY(__shfl_sync, __shfl_sync, true, NO_FLAG, P0, "Successful")
// half2 version __shfl_sync is overload with previous half version ENTRY
ENTRY(__shfl_up_sync, __shfl_up_sync, true, NO_FLAG, P0, "Successful")
// half2 version __shfl_up_sync is overload with previous half version ENTRY
ENTRY(__shfl_xor_sync, __shfl_xor_sync, true, NO_FLAG, P0, "Successful")
// half2 version __shfl_xor_sync is overload with previous half version ENTRY
ENTRY(__short2half_rd, __short2half_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__short2half_rn, __short2half_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__short2half_ru, __short2half_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__short2half_rz, __short2half_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__short_as_half, __short_as_half, true, NO_FLAG, P4, "Successful")
ENTRY(__stcg, __stcg, true, NO_FLAG, P4, "DPCT1098")
// half2 version __stcg is overload with previous half version ENTRY
ENTRY(__stcs, __stcs, true, NO_FLAG, P4, "DPCT1098")
// half2 version __stcs is overload with previous half version ENTRY
ENTRY(__stwb, __stwb, true, NO_FLAG, P4, "DPCT1098")
// half2 version __stwb is overload with previous half version ENTRY
ENTRY(__stwt, __stwt, true, NO_FLAG, P4, "DPCT1098")
// half2 version __stwt is overload with previous half version ENTRY
ENTRY(__uint2half_rd, __uint2half_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__uint2half_rn, __uint2half_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__uint2half_ru, __uint2half_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__uint2half_rz, __uint2half_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__ull2half_rd, __ull2half_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__ull2half_rn, __ull2half_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__ull2half_ru, __ull2half_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__ull2half_rz, __ull2half_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__ushort2half_rd, __ushort2half_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__ushort2half_rn, __ushort2half_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__ushort2half_ru, __ushort2half_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__ushort2half_rz, __ushort2half_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__ushort_as_half, __ushort_as_half, true, NO_FLAG, P4, "Successful")
ENTRY(make_half2, make_half2, true, NO_FLAG, P4, "Successful")

// Half Math Functions
ENTRY(hceil, hceil, true, NO_FLAG, P4, "Successful")
ENTRY(hcos, hcos, true, NO_FLAG, P0, "Successful")
ENTRY(hexp, hexp, true, NO_FLAG, P4, "Successful")
ENTRY(hexp10, hexp10, true, NO_FLAG, P4, "Successful")
ENTRY(hexp2, hexp2, true, NO_FLAG, P4, "Successful")
ENTRY(hfloor, hfloor, true, NO_FLAG, P4, "Successful")
ENTRY(hlog, hlog, true, NO_FLAG, P0, "Successful")
ENTRY(hlog10, hlog10, true, NO_FLAG, P4, "Successful")
ENTRY(hlog2, hlog2, true, NO_FLAG, P4, "Successful")
ENTRY(hrcp, hrcp, true, NO_FLAG, P4, "Successful")
ENTRY(hrint, hrint, true, NO_FLAG, P4, "Successful")
ENTRY(hrsqrt, hrsqrt, true, NO_FLAG, P4, "Successful")
ENTRY(hsin, hsin, true, NO_FLAG, P0, "Successful")
ENTRY(hsqrt, hsqrt, true, NO_FLAG, P4, "Successful")
ENTRY(htrunc, htrunc, true, NO_FLAG, P4, "Successful")

// Half2 Math Functions
ENTRY(h2ceil, h2ceil, true, NO_FLAG, P4, "Successful")
ENTRY(h2cos, h2cos, true, NO_FLAG, P4, "Successful")
ENTRY(h2exp, h2exp, true, NO_FLAG, P4, "Successful")
ENTRY(h2exp10, h2exp10, true, NO_FLAG, P4, "Successful")
ENTRY(h2exp2, h2exp2, true, NO_FLAG, P4, "Successful")
ENTRY(h2floor, h2floor, true, NO_FLAG, P4, "Successful")
ENTRY(h2log, h2log, true, NO_FLAG, P4, "Successful")
ENTRY(h2log10, h2log10, true, NO_FLAG, P4, "Successful")
ENTRY(h2log2, h2log2, true, NO_FLAG, P4, "Successful")
ENTRY(h2rcp, h2rcp, true, NO_FLAG, P4, "Successful")
ENTRY(h2rint, h2rint, true, NO_FLAG, P4, "Successful")
ENTRY(h2rsqrt, h2rsqrt, true, NO_FLAG, P4, "Successful")
ENTRY(h2sin, h2sin, true, NO_FLAG, P4, "Successful")
ENTRY(h2sqrt, h2sqrt, true, NO_FLAG, P4, "Successful")
ENTRY(h2trunc, h2trunc, true, NO_FLAG, P4, "Successful")

// 16 Bfloat16 Arithmetic Functions are overload with the ENTRYs of Half Arithmetic Functions

// 17 Bfloat162 Arithmetic Functions are overload with the ENTRYs of Half2 Arithmetic Functions

// 18 Bfloat16 Comparison Functions are overload with the ENTRYs of Half Comparison Functions

// 41 Bfloat162 Comparison Functions are overload with the ENTRYs of Half2 Comparison Functions

// Bfloat16 Precision Conversion and Data Movement
ENTRY(__bfloat1622float2, __bfloat1622float2, true, NO_FLAG, P4, "Successful")
ENTRY(__bfloat162bfloat162, __bfloat162bfloat162, true, NO_FLAG, P4, "Successful")
ENTRY(__bfloat162float, __bfloat162float, true, NO_FLAG, P4, "Successful")
ENTRY(__bfloat162int_rd, __bfloat162int_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__bfloat162int_rn, __bfloat162int_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__bfloat162int_ru, __bfloat162int_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__bfloat162int_rz, __bfloat162int_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__bfloat162ll_rd, __bfloat162ll_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__bfloat162ll_rn, __bfloat162ll_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__bfloat162ll_ru, __bfloat162ll_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__bfloat162ll_rz, __bfloat162ll_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__bfloat162short_rd, __bfloat162short_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__bfloat162short_rn, __bfloat162short_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__bfloat162short_ru, __bfloat162short_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__bfloat162short_rz, __bfloat162short_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__bfloat162uint_rd, __bfloat162uint_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__bfloat162uint_rn, __bfloat162uint_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__bfloat162uint_ru, __bfloat162uint_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__bfloat162uint_rz, __bfloat162uint_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__bfloat162ull_rd, __bfloat162ull_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__bfloat162ull_rn, __bfloat162ull_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__bfloat162ull_ru, __bfloat162ull_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__bfloat162ull_rz, __bfloat162ull_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__bfloat162ushort_rd, __bfloat162ushort_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__bfloat162ushort_rn, __bfloat162ushort_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__bfloat162ushort_ru, __bfloat162ushort_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__bfloat162ushort_rz, __bfloat162ushort_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__bfloat16_as_short, __bfloat16_as_short, true, NO_FLAG, P4, "Successful")
ENTRY(__bfloat16_as_ushort, __bfloat16_as_ushort, true, NO_FLAG, P4, "Successful")
ENTRY(__double2bfloat16, __double2bfloat16, true, NO_FLAG, P4, "Successful")
ENTRY(__float22bfloat162_rn, __float22bfloat162_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__float2bfloat16, __bfloat162float, true, NO_FLAG, P4, "Successful")
ENTRY(__float2bfloat162_rn, __float2bfloat162_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__float2bfloat16_rd, __float2bfloat16_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__float2bfloat16_rn, __float2bfloat16_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__float2bfloat16_ru, __float2bfloat16_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__float2bfloat16_rz, __float2bfloat16_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__floats2bfloat162_rn, __floats2bfloat162_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__halves2bfloat162, __halves2bfloat162, true, NO_FLAG, P4, "Successful")
ENTRY(__high2bfloat16, __high2bfloat16, true, NO_FLAG, P4, "Successful")
ENTRY(__high2bfloat162, __high2bfloat162, true, NO_FLAG, P4, "Successful")
// __high2float is overload with the ENTRY in 'Half Precision Conversion and Data Movement'
ENTRY(__highs2bfloat162, __highs2bfloat162, true, NO_FLAG, P4, "Successful")
ENTRY(__int2bfloat16_rd, __int2bfloat16_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__int2bfloat16_rn, __int2bfloat16_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__int2bfloat16_ru, __int2bfloat16_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__int2bfloat16_rz, __int2bfloat16_rz, true, NO_FLAG, P4, "Successful")
// 2 __ldca APIs are overload with the ENTRY in 'Half Precision Conversion and Data Movement'
// 2 __ldcg APIs are overload with the ENTRY in 'Half Precision Conversion and Data Movement'
// 2 __ldcs APIs are overload with the ENTRY in 'Half Precision Conversion and Data Movement'
// 2 __ldcv APIs are overload with the ENTRY in 'Half Precision Conversion and Data Movement'
// 2 __ldg APIs are overload with the ENTRY in 'Half Precision Conversion and Data Movement'
// 2 __ldlu APIs are overload with the ENTRY in 'Half Precision Conversion and Data Movement'
ENTRY(__ll2bfloat16_rd, __ll2bfloat16_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__ll2bfloat16_rn, __ll2bfloat16_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__ll2bfloat16_ru, __ll2bfloat16_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__ll2bfloat16_rz, __ll2bfloat16_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__low2bfloat16, __low2bfloat16, true, NO_FLAG, P4, "Successful")
ENTRY(__low2bfloat162, __low2bfloat162, true, NO_FLAG, P4, "Successful")
// __low2float is overload with the ENTRY in 'Half Precision Conversion and Data Movement'
// __lowhigh2highlow is overload with the ENTRY in 'Half Precision Conversion and Data Movement'
ENTRY(__lows2bfloat162, __lows2bfloat162, true, NO_FLAG, P4, "Successful")
// 2 __shfl_down_sync APIs are overload with the ENTRY in 'Half Precision Conversion and Data Movement'
// 2 __shfl_sync APIs are overload with the ENTRY in 'Half Precision Conversion and Data Movement'
// 2 __shfl_up_sync APIs are overload with the ENTRY in 'Half Precision Conversion and Data Movement'
// 2 __shfl_xor_sync APIs are overload with the ENTRY in 'Half Precision Conversion and Data Movement'
ENTRY(__short2bfloat16_rd, __short2bfloat16_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__short2bfloat16_rn, __short2bfloat16_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__short2bfloat16_ru, __short2bfloat16_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__short2bfloat16_rz, __short2bfloat16_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__short_as_bfloat16, __short_as_bfloat16, true, NO_FLAG, P4, "Successful")
// 2 __stcg APIs are overload with the ENTRY in 'Half Precision Conversion and Data Movement'
// 2 __stcs APIs are overload with the ENTRY in 'Half Precision Conversion and Data Movement'
// 2 __stwb APIs are overload with the ENTRY in 'Half Precision Conversion and Data Movement'
// 2 __stwt APIs are overload with the ENTRY in 'Half Precision Conversion and Data Movement'
ENTRY(__uint2bfloat16_rd, __uint2bfloat16_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__uint2bfloat16_rn, __uint2bfloat16_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__uint2bfloat16_ru, __uint2bfloat16_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__uint2bfloat16_rz, __uint2bfloat16_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__ull2bfloat16_rd, __ull2bfloat16_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__ull2bfloat16_rn, __ull2bfloat16_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__ull2bfloat16_ru, __ull2bfloat16_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__ull2bfloat16_rz, __ull2bfloat16_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__ushort2bfloat16_rd, __ushort2bfloat16_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__ushort2bfloat16_rn, __ushort2bfloat16_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__ushort2bfloat16_ru, __ushort2bfloat16_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__ushort2bfloat16_rz, __ushort2bfloat16_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__ushort_as_bfloat16, __ushort_as_bfloat16, true, NO_FLAG, P4, "Successful")

// 15 Bfloat16 Math Functions are overload with with the ENTRYs of Half Math Functions

// 15 Bfloat162 Math Functions are overload with with the ENTRYs of Half2 Math Functions

// Single Precision Mathematical Functions
ENTRY(acosf, acosf, true, NO_FLAG, P0, "Successful")
ENTRY(acoshf, acoshf, true, NO_FLAG, P0, "Successful")
ENTRY(asinf, asinf, true, NO_FLAG, P0, "Successful")
ENTRY(asinhf, asinhf, true, NO_FLAG, P0, "Successful")
ENTRY(atan2f, atan2f, true, NO_FLAG, P0, "Successful")
ENTRY(atanf, atanf, true, NO_FLAG, P0, "Successful")
ENTRY(atanhf, atanhf, true, NO_FLAG, P0, "Successful")
ENTRY(cbrtf, cbrtf, true, NO_FLAG, P0, "Successful")
ENTRY(ceilf, ceilf, true, NO_FLAG, P0, "Successful")
ENTRY(copysignf, copysignf, true, NO_FLAG, P0, "Successful")
ENTRY(cosf, cosf, true, NO_FLAG, P0, "Successful")
ENTRY(coshf, coshf, true, NO_FLAG, P0, "Successful")
ENTRY(cospif, cospif, true, NO_FLAG, P0, "Successful")
ENTRY(cyl_bessel_i0f, cyl_bessel_i0f, true, NO_FLAG, P4, "Successful")
ENTRY(cyl_bessel_i1f, cyl_bessel_i1f, true, NO_FLAG, P4, "Successful")
ENTRY(erfcf, erfcf, true, NO_FLAG, P0, "Successful")
ENTRY(erfcinvf, erfcinvf, true, NO_FLAG, P4, "Successful")
ENTRY(erfcxf, erfcxf, true, NO_FLAG, P4, "DPCT1017")
ENTRY(erff, erff, true, NO_FLAG, P0, "Successful")
ENTRY(erfinvf, erfinvf, true, NO_FLAG, P4, "Successful")
ENTRY(exp10f, exp10f, true, NO_FLAG, P0, "Successful")
ENTRY(exp2f, exp2f, true, NO_FLAG, P0, "Successful")
ENTRY(expf, expf, true, NO_FLAG, P0, "Successful")
ENTRY(expm1f, expm1f, true, NO_FLAG, P0, "Successful")
ENTRY(fabsf, fabsf, true, NO_FLAG, P0, "Successful")
ENTRY(fdimf, fdimf, true, NO_FLAG, P0, "Successful")
ENTRY(fdividef, fdividef, true, NO_FLAG, P0, "Successful")
ENTRY(floorf, floorf, true, NO_FLAG, P0, "Successful")
ENTRY(fmaf, fmaf, true, NO_FLAG, P0, "Successful")
ENTRY(fmaxf, fmaxf, true, NO_FLAG, P0, "Successful")
ENTRY(fminf, fminf, true, NO_FLAG, P0, "Successful")
ENTRY(fmodf, fmodf, true, NO_FLAG, P0, "Successful")
ENTRY(frexpf, frexpf, true, NO_FLAG, P0, "Successful: DPCT1017")
ENTRY(hypotf, hypotf, true, NO_FLAG, P0, "Successful")
ENTRY(ilogbf, ilogbf, true, NO_FLAG, P0, "Successful")
ENTRY(isfinite, isfinite, true, NO_FLAG, P0, "Successful")
ENTRY(isinf, isinf, true, NO_FLAG, P0, "Successful")
ENTRY(isnan, isnan, true, NO_FLAG, P0, "Successful")
ENTRY(j0f, j0f, true, NO_FLAG, P0, "Successful")
ENTRY(j1f, j1f, true, NO_FLAG, P0, "Successful")
ENTRY(jnf, jnf, true, NO_FLAG, P0, "Successful")
ENTRY(ldexpf, ldexpf, true, NO_FLAG, P0, "Successful")
ENTRY(lgammaf, lgammaf, true, NO_FLAG, P0, "Successful")
ENTRY(llrintf, llrintf, true, NO_FLAG, P4, "Successful")
ENTRY(llroundf, llroundf, true, NO_FLAG, P4, "Successful")
ENTRY(log10f, log10f, true, NO_FLAG, P0, "Successful")
ENTRY(log1pf, log1pf, true, NO_FLAG, P0, "Successful")
ENTRY(log2f, log2f, true, NO_FLAG, P0, "Successful")
ENTRY(logbf, logbf, true, NO_FLAG, P0, "Successful")
ENTRY(logf, logf, true, NO_FLAG, P0, "Successful")
ENTRY(lrintf, lrintf, true, NO_FLAG, P0, "Successful")
ENTRY(lroundf, lroundf, true, NO_FLAG, P4, "Successful")
ENTRY(max, max, true, NO_FLAG, P0, "Successful")
ENTRY(min, min, true, NO_FLAG, P0, "Successful")
ENTRY(modff, modff, true, NO_FLAG, P0, "Successful: DPCT1017")
ENTRY(nanf, nanf, true, NO_FLAG, P0, "Successful: DPCT1017")
ENTRY(nearbyintf, nearbyintf, true, NO_FLAG, P0, "DPCT1017")
ENTRY(nextafterf, nextafterf, true, NO_FLAG, P0, "Successful")
ENTRY(norm3df, norm3df, true, NO_FLAG, P4, "Successful")
ENTRY(norm4df, norm4df, true, NO_FLAG, P4, "Successful")
ENTRY(normcdff, normcdff, true, NO_FLAG, P4, "Successful")
ENTRY(normcdfinvf, normcdfinvf, true, NO_FLAG, P4, "Successful")
ENTRY(normf, normf, true, NO_FLAG, P0, "DPCT1017")
ENTRY(powf, powf, true, NO_FLAG, P0, "Successful")
ENTRY(rcbrtf, rcbrtf, true, NO_FLAG, P0, "DPCT1017")
ENTRY(remainderf, remainderf, true, NO_FLAG, P0, "Successful")
ENTRY(remquof, remquof, true, NO_FLAG, P0, "Successful: DPCT1017")
ENTRY(rhypotf, rhypotf, true, NO_FLAG, P4, "DPCT1017")
ENTRY(rintf, rintf, true, NO_FLAG, P0, "Successful")
ENTRY(rnorm3df, rnorm3df, true, NO_FLAG, P4, "Successful")
ENTRY(rnorm4df, rnorm4df, true, NO_FLAG, P4, "Successful")
ENTRY(rnormf, rnormf, true, NO_FLAG, P4, "DPCT1017")
ENTRY(roundf, roundf, true, NO_FLAG, P0, "Successful")
ENTRY(rsqrtf, rsqrtf, true, NO_FLAG, P0, "Successful")
ENTRY(scalblnf, scalblnf, true, NO_FLAG, P4, "DPCT1017")
ENTRY(scalbnf, scalbnf, true, NO_FLAG, P0, "DPCT1017")
ENTRY(signbit, signbit, true, NO_FLAG, P0, "Successful")
ENTRY(sincosf, sincosf, true, NO_FLAG, P0, "Successful: DPCT1017")
ENTRY(sincospif, sincospif, true, NO_FLAG, P4, "DPCT1017")
ENTRY(sinf, sinf, true, NO_FLAG, P0, "Successful")
ENTRY(sinhf, sinhf, true, NO_FLAG, P0, "Successful")
ENTRY(sinpif, sinpif, true, NO_FLAG, P0, "Successful")
ENTRY(sqrtf, sqrtf, true, NO_FLAG, P0, "Successful")
ENTRY(tanf, tanf, true, NO_FLAG, P0, "Successful")
ENTRY(tanhf, tanhf, true, NO_FLAG, P0, "Successful")
ENTRY(tgammaf, tgammaf, true, NO_FLAG, P0, "Successful")
ENTRY(truncf, truncf, true, NO_FLAG, P0, "Successful")
ENTRY(y0f, y0f, true, NO_FLAG, P0, "Successful")
ENTRY(y1f, y1f, true, NO_FLAG, P0, "Successful")
ENTRY(ynf, ynf, true, NO_FLAG, P0, "Successful")

// Double Precision Mathematical Functions
ENTRY(acos, acos, true, NO_FLAG, P0, "Successful")
ENTRY(acosh, acosh, true, NO_FLAG, P0, "Successful")
ENTRY(asin, asin, true, NO_FLAG, P0, "Successful")
ENTRY(asinh, asinh, true, NO_FLAG, P0, "Successful")
ENTRY(atan, atan, true, NO_FLAG, P0, "Successful")
ENTRY(atan2, atan2, true, NO_FLAG, P0, "Successful")
ENTRY(atanh, atanh, true, NO_FLAG, P0, "Successful")
ENTRY(cbrt, cbrt, true, NO_FLAG, P0, "Successful")
ENTRY(ceil, ceil, true, NO_FLAG, P0, "Successful")
ENTRY(copysign, copysign, true, NO_FLAG, P0, "Successful")
ENTRY(cos, cos, true, NO_FLAG, P0, "Successful")
ENTRY(cosh, cosh, true, NO_FLAG, P0, "Successful")
ENTRY(cospi, cospi, true, NO_FLAG, P0, "Successful")
ENTRY(cyl_bessel_i0, cyl_bessel_i0, true, NO_FLAG, P4, "Successful")
ENTRY(cyl_bessel_i1, cyl_bessel_i1, true, NO_FLAG, P4, "Successful")
ENTRY(erf, erf, true, NO_FLAG, P0, "Successful")
ENTRY(erfc, erfc, true, NO_FLAG, P0, "Successful")
ENTRY(erfcinv, erfcinv, true, NO_FLAG, P0, "Successful")
ENTRY(erfcx, erfcx, true, NO_FLAG, P0, "DPCT1017")
ENTRY(erfinv, erfinv, true, NO_FLAG, P0, "Successful")
ENTRY(exp, exp, true, NO_FLAG, P0, "Successful")
ENTRY(exp10, exp10, true, NO_FLAG, P0, "Successful")
ENTRY(exp2, exp2, true, NO_FLAG, P0, "Successful")
ENTRY(expm1, expm1, true, NO_FLAG, P0, "Successful")
ENTRY(fabs, fabs, true, NO_FLAG, P0, "Successful")
ENTRY(fdim, fdim, true, NO_FLAG, P0, "Successful")
ENTRY(floor, floor, true, NO_FLAG, P0, "Successful")
ENTRY(fma, fma, true, NO_FLAG, P0, "Successful")
ENTRY(fmax, fmax, true, NO_FLAG, P0, "Successful")
ENTRY(fmin, fmin, true, NO_FLAG, P0, "Successful")
ENTRY(fmod, fmod, true, NO_FLAG, P0, "Successful")
ENTRY(frexp, frexp, true, NO_FLAG, P0, "Successful: DPCT1017")
ENTRY(hypot, hypot, true, NO_FLAG, P0, "Successful")
ENTRY(ilogb, ilogb, true, NO_FLAG, P0, "Successful")
// isfinite is overload with the ENTRY in 'Single Precision Mathematical Functions'
// isinf is overload with the ENTRY in 'Single Precision Mathematical Functions'
// isnan is overload with the ENTRY in 'Single Precision Mathematical Functions'
ENTRY(j0, j0, true, NO_FLAG, P0, "Successful")
ENTRY(j1, j1, true, NO_FLAG, P0, "Successful")
ENTRY(jn, jn, true, NO_FLAG, P0, "Successful")
ENTRY(ldexp, ldexp, true, NO_FLAG, P0, "Successful")
ENTRY(lgamma, lgamma, true, NO_FLAG, P0, "Successful")
ENTRY(llrint, llrint, true, NO_FLAG, P0, "Successful")
ENTRY(llround, llround, true, NO_FLAG, P0, "Successful")
ENTRY(log, log, true, NO_FLAG, P0, "Successful")
ENTRY(log10, log10, true, NO_FLAG, P0, "Successful")
ENTRY(log1p, log1p, true, NO_FLAG, P0, "Successful")
ENTRY(log2, log2, true, NO_FLAG, P0, "Successful")
ENTRY(logb, logb, true, NO_FLAG, P0, "Successful")
ENTRY(lrint, lrint, true, NO_FLAG, P0, "Successful")
ENTRY(lround, lround, true, NO_FLAG, P0, "Successful")
// 3 max APIs are overload with the ENTRY in 'Single Precision Mathematical Functions'
// 3 min APIs are overload with the ENTRY in 'Single Precision Mathematical Functions'
ENTRY(modf, modf, true, NO_FLAG, P0, "Successful: DPCT1017")
ENTRY(nan, nan, true, NO_FLAG, P0, "Successful: DPCT1017")
ENTRY(nearbyint, nearbyint, true, NO_FLAG, P0, "DPCT1017")
ENTRY(nextafter, nextafter, true, NO_FLAG, P0, "Successful")
ENTRY(norm, norm, true, NO_FLAG, P0, "DPCT1017")
ENTRY(norm3d, norm3d, true, NO_FLAG, P0, "Successful")
ENTRY(norm4d, norm4d, true, NO_FLAG, P4, "Successful")
ENTRY(normcdf, normcdf, true, NO_FLAG, P4, "Successful")
ENTRY(normcdfinv, normcdfinv, true, NO_FLAG, P4, "Successful")
ENTRY(pow, pow, true, NO_FLAG, P0, "Successful")
ENTRY(rcbrt, rcbrt, true, NO_FLAG, P0, "DPCT1017")
ENTRY(remainder, remainder, true, NO_FLAG, P0, "Successful")
ENTRY(remquo, remquo, true, NO_FLAG, P0, "Successful: DPCT1017")
ENTRY(rhypot, rhypot, true, NO_FLAG, P4, "DPCT1017")
ENTRY(rint, rint, true, NO_FLAG, P0, "Successful")
ENTRY(rnorm, rnorm, true, NO_FLAG, P0, "DPCT1017")
ENTRY(rnorm3d, rnorm3d, true, NO_FLAG, P4, "Successful")
ENTRY(rnorm4d, rnorm4d, true, NO_FLAG, P4, "Successful")
ENTRY(round, round, true, NO_FLAG, P0, "Successful")
ENTRY(rsqrt, rsqrt, true, NO_FLAG, P0, "Successful")
ENTRY(scalbln, scalbln, true, NO_FLAG, P0, "DPCT1017")
ENTRY(scalbn, scalbn, true, NO_FLAG, P0, "DPCT1017")
// signbit is overload with the ENTRY in 'Single Precision Mathematical Functions'
ENTRY(sin, sin, true, NO_FLAG, P0, "Successful")
ENTRY(sincos, sincos, true, NO_FLAG, P0, "Successful: DPCT1017")
ENTRY(sincospi, sincospi, true, NO_FLAG, P4, "DPCT1017")
ENTRY(sinh, sinh, true, NO_FLAG, P0, "Successful")
ENTRY(sinpi, sinpi, true, NO_FLAG, P0, "Successful")
ENTRY(sqrt, sqrt, true, NO_FLAG, P0, "Successful")
ENTRY(tan, tan, true, NO_FLAG, P0, "Successful")
ENTRY(tanh, tanh, true, NO_FLAG, P0, "Successful")
ENTRY(tgamma, tgamma, true, NO_FLAG, P0, "Successful")
ENTRY(trunc, trunc, true, NO_FLAG, P0, "Successful")
ENTRY(y0, y0, true, NO_FLAG, P0, "Successful")
ENTRY(y1, y1, true, NO_FLAG, P0, "Successful")
ENTRY(yn, yn, true, NO_FLAG, P0, "Successful")

// Integer Mathematical Functions
ENTRY(abs, abs, true, NO_FLAG, P0, "Successful")
ENTRY(labs, abs, true, NO_FLAG, P0, "Successful")
ENTRY(llabs, abs, true, NO_FLAG, P0, "Successful")
ENTRY(llmax, llmax, true, NO_FLAG, P4, "Successful")
ENTRY(llmin, llmin, true, NO_FLAG, P4, "Successful")
// 12 max APIs are overload with the ENTRY in 'Single Precision Mathematical Functions'
// 12 min APIs are overload with the ENTRY in 'Single Precision Mathematical Functions'
ENTRY(ullmax, ullmax, true, NO_FLAG, P4, "Successful")
ENTRY(ullmin, ullmin, true, NO_FLAG, P4, "Successful")
ENTRY(umax, umax, true, NO_FLAG, P4, "Successful")
ENTRY(umin, umin, true, NO_FLAG, P4, "Successful")

// Single Precision Intrinsics
ENTRY(__cosf, __cosf, true, NO_FLAG, P0, "Successful")
ENTRY(__exp10f, __exp10f, true, NO_FLAG, P4, "Successful")
ENTRY(__expf, __expf, true, NO_FLAG, P0, "Successful")
ENTRY(__fadd_rd, __fadd_rd, true, NO_FLAG, P0, "Successful:  DPCT1013")
ENTRY(__fadd_rn, __fadd_rn, true, NO_FLAG, P0, "Successful:  DPCT1013")
ENTRY(__fadd_ru, __fadd_ru, true, NO_FLAG, P0, "Successful:  DPCT1013")
ENTRY(__fadd_rz, __fadd_rz, true, NO_FLAG, P4, "Successful:  DPCT1013")
ENTRY(__fdiv_rd, __fdiv_rd, true, NO_FLAG, P0, "Successful:  DPCT1013")
ENTRY(__fdiv_rn, __fdiv_rn, true, NO_FLAG, P4, "Successful:  DPCT1013")
ENTRY(__fdiv_ru, __fdiv_ru, true, NO_FLAG, P0, "Successful:  DPCT1013")
ENTRY(__fdiv_rz, __fdiv_rz, true, NO_FLAG, P4, "Successful:  DPCT1013")
ENTRY(__fdividef, __fdividef, true, NO_FLAG, P0, "Successful")
ENTRY(__fmaf_ieee_rd, __fmaf_ieee_rd, false, NO_FLAG, P4, "comment")
ENTRY(__fmaf_ieee_rn, __fmaf_ieee_rn, false, NO_FLAG, P4, "comment")
ENTRY(__fmaf_ieee_ru, __fmaf_ieee_ru, false, NO_FLAG, P4, "comment")
ENTRY(__fmaf_ieee_rz, __fmaf_ieee_rz, false, NO_FLAG, P4, "comment")
ENTRY(__fmaf_rd, __fmaf_rd, true, NO_FLAG, P4, "Successful:  DPCT1013")
ENTRY(__fmaf_rn, __fmaf_rn, true, NO_FLAG, P0, "Successful:  DPCT1013")
ENTRY(__fmaf_ru, __fmaf_ru, true, NO_FLAG, P4, "Successful:  DPCT1013")
ENTRY(__fmaf_rz, __fmaf_rz, true, NO_FLAG, P4, "Successful:  DPCT1013")
ENTRY(__fmul_rd, __fmul_rd, true, NO_FLAG, P0, "Successful:  DPCT1013")
ENTRY(__fmul_rn, __fmul_rn, true, NO_FLAG, P0, "Successful:  DPCT1013")
ENTRY(__fmul_ru, __fmul_ru, true, NO_FLAG, P0, "Successful:  DPCT1013")
ENTRY(__fmul_rz, __fmul_rz, true, NO_FLAG, P4, "Successful:  DPCT1013")
ENTRY(__frcp_rd, __frcp_rd, true, NO_FLAG, P4, "Successful:  DPCT1013")
ENTRY(__frcp_rn, __frcp_rn, true, NO_FLAG, P4, "Successful:  DPCT1013")
ENTRY(__frcp_ru, __frcp_ru, true, NO_FLAG, P4, "Successful:  DPCT1013")
ENTRY(__frcp_rz, __frcp_rz, true, NO_FLAG, P4, "Successful:  DPCT1013")
ENTRY(__frsqrt_rn, __frsqrt_rn, true, NO_FLAG, P4, "Successful:  DPCT1013")
ENTRY(__fsqrt_rd, __fsqrt_rd, true, NO_FLAG, P0, "Successful:  DPCT1013")
ENTRY(__fsqrt_rn, __fsqrt_rn, true, NO_FLAG, P4, "Successful:  DPCT1013")
ENTRY(__fsqrt_ru, __fsqrt_ru, true, NO_FLAG, P0, "Successful:  DPCT1013")
ENTRY(__fsqrt_rz, __fsqrt_rz, true, NO_FLAG, P4, "Successful:  DPCT1013")
ENTRY(__fsub_rd, __fsub_rd, true, NO_FLAG, P4, "Successful:  DPCT1013")
ENTRY(__fsub_rn, __fsub_rn, true, NO_FLAG, P4, "Successful:  DPCT1013")
ENTRY(__fsub_ru, __fsub_ru, true, NO_FLAG, P4, "Successful:  DPCT1013")
ENTRY(__fsub_rz, __fsub_rz, true, NO_FLAG, P4, "Successful:  DPCT1013")
ENTRY(__log10f, __log10f, true, NO_FLAG, P4, "Successful")
ENTRY(__log2f, __log2f, true, NO_FLAG, P4, "Successful")
ENTRY(__logf, __logf, true, NO_FLAG, P0, "Successful")
ENTRY(__powf, __powf, true, NO_FLAG, P0, "Successful")
ENTRY(__saturatef, __saturatef, true, NO_FLAG, P0, "Successful")
ENTRY(__sincosf, __sincosf, true, NO_FLAG, P0, "Successful: DPCT1017")
ENTRY(__sinf, __sinf, true, NO_FLAG, P0, "Successful")
ENTRY(__tanf, __tanf, true, NO_FLAG, P4, "Successful")

// Double Precision Intrinsics
ENTRY(__dadd_rd, __dadd_rd, true, NO_FLAG, P0, "Successful:  DPCT1013")
ENTRY(__dadd_rn, __dadd_rn, true, NO_FLAG, P0, "Successful:  DPCT1013")
ENTRY(__dadd_ru, __dadd_ru, true, NO_FLAG, P0, "Successful:  DPCT1013")
ENTRY(__dadd_rz, __dadd_rz, true, NO_FLAG, P4, "Successful:  DPCT1013")
ENTRY(__ddiv_rd, __ddiv_rd, true, NO_FLAG, P0, "Successful:  DPCT1013")
ENTRY(__ddiv_rn, __ddiv_rn, true, NO_FLAG, P4, "Successful:  DPCT1013")
ENTRY(__ddiv_ru, __ddiv_ru, true, NO_FLAG, P0, "Successful:  DPCT1013")
ENTRY(__ddiv_rz, __ddiv_rz, true, NO_FLAG, P4, "Successful:  DPCT1013")
ENTRY(__dmul_rd, __dmul_rd, true, NO_FLAG, P0, "Successful:  DPCT1013")
ENTRY(__dmul_rn, __dmul_rn, true, NO_FLAG, P0, "Successful:  DPCT1013")
ENTRY(__dmul_ru, __dmul_ru, true, NO_FLAG, P0, "Successful:  DPCT1013")
ENTRY(__dmul_rz, __dmul_rz, true, NO_FLAG, P4, "Successful:  DPCT1013")
ENTRY(__drcp_rd, __drcp_rd, true, NO_FLAG, P4, "Successful:  DPCT1013")
ENTRY(__drcp_rn, __drcp_rn, true, NO_FLAG, P4, "Successful:  DPCT1013")
ENTRY(__drcp_ru, __drcp_ru, true, NO_FLAG, P4, "Successful:  DPCT1013")
ENTRY(__drcp_rz, __drcp_rz, true, NO_FLAG, P4, "Successful:  DPCT1013")
ENTRY(__dsqrt_rd, __dsqrt_rd, true, NO_FLAG, P0, "Successful:  DPCT1013")
ENTRY(__dsqrt_rn, __dsqrt_rn, true, NO_FLAG, P4, "Successful:  DPCT1013")
ENTRY(__dsqrt_ru, __dsqrt_ru, true, NO_FLAG, P0, "Successful:  DPCT1013")
ENTRY(__dsqrt_rz, __dsqrt_rz, true, NO_FLAG, P4, "Successful:  DPCT1013")
ENTRY(__dsub_rd, __dsub_rd, true, NO_FLAG, P4, "Successful:  DPCT1013")
ENTRY(__dsub_rn, __dsub_rn, true, NO_FLAG, P4, "Successful:  DPCT1013")
ENTRY(__dsub_ru, __dsub_ru, true, NO_FLAG, P4, "Successful:  DPCT1013")
ENTRY(__dsub_rz, __dsub_rz, true, NO_FLAG, P4, "Successful:  DPCT1013")
ENTRY(__fma_rd, __fma_rd, true, NO_FLAG, P4, "Successful:  DPCT1013")
ENTRY(__fma_rn, __fma_rn, true, NO_FLAG, P0, "Successful:  DPCT1013")
ENTRY(__fma_ru, __fma_ru, true, NO_FLAG, P4, "Successful:  DPCT1013")
ENTRY(__fma_rz, __fma_rz, true, NO_FLAG, P4, "Successful:  DPCT1013")

// Integer Intrinsics
ENTRY(__brev, __brev, true, NO_FLAG, P0, "Successful")
ENTRY(__brevll, __brevll, true, NO_FLAG, P4, "Successful")
ENTRY(__byte_perm, __byte_perm, true, NO_FLAG, P0, "Successful")
ENTRY(__clz, __clz, true, NO_FLAG, P0, "Successful")
ENTRY(__clzll, __clzll, true, NO_FLAG, P4, "Successful")
ENTRY(__ffs, __ffs, true, NO_FLAG, P0, "Successful")
ENTRY(__ffsll, __ffsll, true, NO_FLAG, P4, "Successful")
ENTRY(__funnelshift_l, __funnelshift_l, true, NO_FLAG, P4, "Successful: DPCT1098")
ENTRY(__funnelshift_lc, __funnelshift_lc, true, NO_FLAG, P4, "Successful: DPCT1098")
ENTRY(__funnelshift_r, __funnelshift_r, true, NO_FLAG, P4, "Successful: DPCT1098")
ENTRY(__funnelshift_rc, __funnelshift_rc, true, NO_FLAG, P4, "Successful: DPCT1098")
// __hadd is overload with the ENTRY in 'Half Arithmetic Functions'
ENTRY(__mul24, __mul24, true, NO_FLAG, P0, "Successful")
ENTRY(__mul64hi, __mul64hi, true, NO_FLAG, P4, "Successful")
ENTRY(__mulhi, __mulhi, true, NO_FLAG, P4, "Successful")
ENTRY(__popc, __popc, true, NO_FLAG, P0, "Successful")
ENTRY(__popcll, __popcll, true, NO_FLAG, P4, "Successful")
ENTRY(__rhadd, __rhadd, true, NO_FLAG, P4, "Successful")
ENTRY(__sad, __sad, true, NO_FLAG, P4, "Successful: DPCT1017")
ENTRY(__uhadd, __uhadd, true, NO_FLAG, P4, "Successful")
ENTRY(__umul24, __umul24, true, NO_FLAG, P0, "Successful")
ENTRY(__umul64hi, __umul64hi, true, NO_FLAG, P4, "Successful")
ENTRY(__umulhi, __umulhi, true, NO_FLAG, P4, "Successful")
ENTRY(__urhadd, __urhadd, true, NO_FLAG, P4, "Successful")
ENTRY(__usad, __usad, true, NO_FLAG, P0, "Successful: DPCT1017")

// Type Casting Intrinsics
ENTRY(__double2float_rd, __double2float_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__double2float_rn, __double2float_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__double2float_ru, __double2float_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__double2float_rz, __double2float_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__double2hiint, __double2hiint, true, NO_FLAG, P0, "Successful: DPCT1017")
ENTRY(__double2int_rd, __double2int_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__double2int_rn, __double2int_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__double2int_ru, __double2int_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__double2int_rz, __double2int_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__double2ll_rd, __double2ll_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__double2ll_rn, __double2ll_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__double2ll_ru, __double2ll_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__double2ll_rz, __double2ll_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__double2loint, __double2loint, true, NO_FLAG, P0, "Successful: DPCT1017")
ENTRY(__double2uint_rd, __double2uint_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__double2uint_rn, __double2uint_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__double2uint_ru, __double2uint_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__double2uint_rz, __double2uint_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__double2ull_rd, __double2ull_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__double2ull_rn, __double2ull_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__double2ull_ru, __double2ull_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__double2ull_rz, __double2ull_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__double_as_longlong, __double_as_longlong, true, NO_FLAG, P0, "Successful")
ENTRY(__float2int_rd, __float2int_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__float2int_rn, __float2int_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__float2int_ru, __float2int_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__float2int_rz, __float2int_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__float2ll_rd, __float2ll_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__float2ll_rn, __float2ll_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__float2ll_ru, __float2ll_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__float2ll_rz, __float2ll_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__float2uint_rd, __float2uint_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__float2uint_rn, __float2uint_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__float2uint_ru, __float2uint_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__float2uint_rz, __float2uint_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__float2ull_rd, __float2ull_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__float2ull_rn, __float2ull_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__float2ull_ru, __float2ull_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__float2ull_rz, __float2ull_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__float_as_int, __float_as_int, true, NO_FLAG, P4, "Successful")
ENTRY(__float_as_uint, __float_as_uint, true, NO_FLAG, P4, "Successful")
ENTRY(__hiloint2double, __hiloint2double, true, NO_FLAG, P0, "Successful: DPCT1017")
ENTRY(__int2double_rn, __int2double_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__int2float_rd, __int2float_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__int2float_rn, __int2float_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__int2float_ru, __int2float_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__int2float_rz, __int2float_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__int_as_float, __int_as_float, true, NO_FLAG, P0, "Successful")
ENTRY(__ll2double_rd, __ll2double_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__ll2double_rn, __ll2double_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__ll2double_ru, __ll2double_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__ll2double_rz, __ll2double_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__ll2float_rd, __ll2float_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__ll2float_rn, __ll2float_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__ll2float_ru, __ll2float_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__ll2float_rz, __ll2float_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__longlong_as_double, __longlong_as_double, true, NO_FLAG, P0, "Successful")
ENTRY(__uint2double_rn, __uint2double_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__uint2float_rd, __uint2float_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__uint2float_rn, __uint2float_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__uint2float_ru, __uint2float_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__uint2float_rz, __uint2float_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__uint_as_float, __uint_as_float, true, NO_FLAG, P4, "Successful")
ENTRY(__ull2double_rd, __ull2double_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__ull2double_rn, __ull2double_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__ull2double_ru, __ull2double_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__ull2double_rz, __ull2double_rz, true, NO_FLAG, P4, "Successful")
ENTRY(__ull2float_rd, __ull2float_rd, true, NO_FLAG, P4, "Successful")
ENTRY(__ull2float_rn, __ull2float_rn, true, NO_FLAG, P4, "Successful")
ENTRY(__ull2float_ru, __ull2float_ru, true, NO_FLAG, P4, "Successful")
ENTRY(__ull2float_rz, __ull2float_rz, true, NO_FLAG, P4, "Successful")

// SIMD Intrinsics
ENTRY(__vabs2, __vabs2, true, NO_FLAG, P4, "Successful")
ENTRY(__vabs4, __vabs4, true, NO_FLAG, P4, "Successful")
ENTRY(__vabsdiffs2, __vabsdiffs2, true, NO_FLAG, P4, "Successful")
ENTRY(__vabsdiffs4, __vabsdiffs4, true, NO_FLAG, P4, "Successful")
ENTRY(__vabsdiffu2, __vabsdiffu2, true, NO_FLAG, P4, "Successful")
ENTRY(__vabsdiffu4, __vabsdiffu4, true, NO_FLAG, P4, "Successful")
ENTRY(__vabsss2, __vabsss2, true, NO_FLAG, P4, "Successful")
ENTRY(__vabsss4, __vabsss4, true, NO_FLAG, P4, "Successful")
ENTRY(__vadd2, __vadd2, true, NO_FLAG, P4, "Successful")
ENTRY(__vadd4, __vadd4, true, NO_FLAG, P4, "Successful")
ENTRY(__vaddss2, __vaddss2, true, NO_FLAG, P4, "Successful")
ENTRY(__vaddss4, __vaddss4, true, NO_FLAG, P4, "Successful")
ENTRY(__vaddus2, __vaddus2, true, NO_FLAG, P4, "Successful")
ENTRY(__vaddus4, __vaddus4, true, NO_FLAG, P4, "Successful")
ENTRY(__vavgs2, __vavgs2, true, NO_FLAG, P4, "Successful")
ENTRY(__vavgs4, __vavgs4, true, NO_FLAG, P4, "Successful")
ENTRY(__vavgu2, __vavgu2, true, NO_FLAG, P4, "Successful")
ENTRY(__vavgu4, __vavgu4, true, NO_FLAG, P4, "Successful")
ENTRY(__vcmpeq2, __vcmpeq2, true, NO_FLAG, P4, "Successful")
ENTRY(__vcmpeq4, __vcmpeq4, true, NO_FLAG, P4, "Successful")
ENTRY(__vcmpges2, __vcmpges2, true, NO_FLAG, P4, "Successful")
ENTRY(__vcmpges4, __vcmpges4, true, NO_FLAG, P4, "Successful")
ENTRY(__vcmpgeu2, __vcmpgeu2, true, NO_FLAG, P4, "Successful")
ENTRY(__vcmpgeu4, __vcmpgeu4, true, NO_FLAG, P4, "Successful")
ENTRY(__vcmpgts2, __vcmpgts2, true, NO_FLAG, P4, "Successful")
ENTRY(__vcmpgts4, __vcmpgts4, true, NO_FLAG, P4, "Successful")
ENTRY(__vcmpgtu2, __vcmpgtu2, true, NO_FLAG, P4, "Succeessful")
ENTRY(__vcmpgtu4, __vcmpgtu4, true, NO_FLAG, P4, "Succeessful")
ENTRY(__vcmples2, __vcmples2, true, NO_FLAG, P4, "Successful")
ENTRY(__vcmples4, __vcmples4, true, NO_FLAG, P4, "Successful")
ENTRY(__vcmpleu2, __vcmpleu2, true, NO_FLAG, P4, "Successful")
ENTRY(__vcmpleu4, __vcmpleu4, true, NO_FLAG, P4, "Successful")
ENTRY(__vcmplts2, __vcmplts2, true, NO_FLAG, P4, "Successful")
ENTRY(__vcmplts4, __vcmplts4, true, NO_FLAG, P4, "Successful")
ENTRY(__vcmpltu2, __vcmpltu2, true, NO_FLAG, P4, "Successful")
ENTRY(__vcmpltu4, __vcmpltu4, true, NO_FLAG, P4, "Successful")
ENTRY(__vcmpne2, __vcmpne2, true, NO_FLAG, P4, "Successful")
ENTRY(__vcmpne4, __vcmpne4, true, NO_FLAG, P4, "Successful")
ENTRY(__vhaddu2, __vhaddu2, true, NO_FLAG, P4, "Successful")
ENTRY(__vhaddu4, __vhaddu4, true, NO_FLAG, P4, "Successful")
ENTRY(__viaddmax_s16x2, __viaddmax_s16x2, false, NO_FLAG, P4, "comment")
ENTRY(__viaddmax_s16x2_relu, __viaddmax_s16x2_relu, false, NO_FLAG, P4, "comment")
ENTRY(__viaddmax_s32, __viaddmax_s32, false, NO_FLAG, P4, "comment")
ENTRY(__viaddmax_s32_relu, __viaddmax_s32_relu, false, NO_FLAG, P4, "comment")
ENTRY(__viaddmax_u16x2, __viaddmax_u16x2, false, NO_FLAG, P4, "comment")
ENTRY(__viaddmax_u32, __viaddmax_u32, false, NO_FLAG, P4, "comment")
ENTRY(__viaddmin_s16x2, __viaddmin_s16x2, false, NO_FLAG, P4, "comment")
ENTRY(__viaddmin_s16x2_relu, __viaddmin_s16x2_relu, false, NO_FLAG, P4, "comment")
ENTRY(__viaddmin_s32, __viaddmin_s32, false, NO_FLAG, P4, "comment")
ENTRY(__viaddmin_s32_relu, __viaddmin_s32_relu, false, NO_FLAG, P4, "comment")
ENTRY(__viaddmin_u16x2, __viaddmin_u16x2, false, NO_FLAG, P4, "comment")
ENTRY(__viaddmin_u32, __viaddmin_u32, false, NO_FLAG, P4, "comment")
ENTRY(__vibmax_s16x2, __vibmax_s16x2, false, NO_FLAG, P4, "comment")
ENTRY(__vibmax_s32, __vibmax_s32, false, NO_FLAG, P4, "comment")
ENTRY(__vibmax_u16x2, __vibmax_u16x2, false, NO_FLAG, P4, "comment")
ENTRY(__vibmax_u32, __vibmax_u32, false, NO_FLAG, P4, "comment")
ENTRY(__vibmin_s16x2, __vibmin_s16x2, false, NO_FLAG, P4, "comment")
ENTRY(__vibmin_s32, __vibmin_s32, false, NO_FLAG, P4, "comment")
ENTRY(__vibmin_u16x2, __vibmin_u16x2, false, NO_FLAG, P4, "comment")
ENTRY(__vibmin_u32, __vibmin_u32, false, NO_FLAG, P4, "comment")
ENTRY(__vimax3_s16x2, __vimax3_s16x2, false, NO_FLAG, P4, "comment")
ENTRY(__vimax3_s16x2_relu, __vimax3_s16x2_relu, false, NO_FLAG, P4, "comment")
ENTRY(__vimax3_s32, __vimax3_s32, false, NO_FLAG, P4, "comment")
ENTRY(__vimax3_s32_relu, __vimax3_s32_relu, false, NO_FLAG, P4, "comment")
ENTRY(__vimax3_u16x2, __vimax3_u16x2, false, NO_FLAG, P4, "comment")
ENTRY(__vimax3_u32, __vimax3_u32, false, NO_FLAG, P4, "comment")
ENTRY(__vimax_s16x2_relu, __vimax_s16x2_relu, false, NO_FLAG, P4, "comment")
ENTRY(__vimax_s32_relu, __vimax_s32_relu, false, NO_FLAG, P4, "comment")
ENTRY(__vimin3_s16x2, __vimin3_s16x2, false, NO_FLAG, P4, "comment")
ENTRY(__vimin3_s16x2_relu, __vimin3_s16x2_relu, false, NO_FLAG, P4, "comment")
ENTRY(__vimin3_s32, __vimin3_s32, false, NO_FLAG, P4, "comment")
ENTRY(__vimin3_s32_relu, __vimin3_s32_relu, false, NO_FLAG, P4, "comment")
ENTRY(__vimin3_u16x2, __vimin3_u16x2, false, NO_FLAG, P4, "comment")
ENTRY(__vimin3_u32, __vimin3_u32, false, NO_FLAG, P4, "comment")
ENTRY(__vimin_s16x2_relu, __vimin_s16x2_relu, false, NO_FLAG, P4, "comment")
ENTRY(__vimin_s32_relu, __vimin_s32_relu, false, NO_FLAG, P4, "comment")
ENTRY(__vmaxs2, __vmaxs2, true, NO_FLAG, P4, "Successful")
ENTRY(__vmaxs4, __vmaxs4, true, NO_FLAG, P4, "Successful")
ENTRY(__vmaxu2, __vmaxu2, true, NO_FLAG, P4, "Successful")
ENTRY(__vmaxu4, __vmaxu4, true, NO_FLAG, P4, "Successful")
ENTRY(__vmins2, __vmins2, true, NO_FLAG, P4, "Successful")
ENTRY(__vmins4, __vmins4, true, NO_FLAG, P4, "Successful")
ENTRY(__vminu2, __vminu2, true, NO_FLAG, P4, "Successful")
ENTRY(__vminu4, __vminu4, true, NO_FLAG, P4, "Successful")
ENTRY(__vneg2, __vneg2, true, NO_FLAG, P4, "Successful")
ENTRY(__vneg4, __vneg4, true, NO_FLAG, P4, "Successful")
ENTRY(__vnegss2, __vnegss2, true, NO_FLAG, P4, "Successful")
ENTRY(__vnegss4, __vnegss4, true, NO_FLAG, P4, "Successful")
ENTRY(__vsads2, __vsads2, true, NO_FLAG, P4, "Successful")
ENTRY(__vsads4, __vsads4, true, NO_FLAG, P4, "Successful")
ENTRY(__vsadu2, __vsadu2, true, NO_FLAG, P4, "Successful")
ENTRY(__vsadu4, __vsadu4, true, NO_FLAG, P4, "Successful")
ENTRY(__vseteq2, __vseteq2, true, NO_FLAG, P4, "Successful")
ENTRY(__vseteq4, __vseteq4, true, NO_FLAG, P4, "Successful")
ENTRY(__vsetges2, __vsetges2, true, NO_FLAG, P4, "Successful")
ENTRY(__vsetges4, __vsetges4, true, NO_FLAG, P4, "Successful")
ENTRY(__vsetgeu2, __vsetgeu2, true, NO_FLAG, P4, "Successful")
ENTRY(__vsetgeu4, __vsetgeu4, true, NO_FLAG, P4, "Successful")
ENTRY(__vsetgts2, __vsetgts2, true, NO_FLAG, P4, "Successful")
ENTRY(__vsetgts4, __vsetgts4, true, NO_FLAG, P4, "Successful")
ENTRY(__vsetgtu2, __vsetgtu2, true, NO_FLAG, P4, "Successful")
ENTRY(__vsetgtu4, __vsetgtu4, true, NO_FLAG, P4, "Successful")
ENTRY(__vsetles2, __vsetles2, true, NO_FLAG, P4, "Successful")
ENTRY(__vsetles4, __vsetles4, true, NO_FLAG, P4, "Successful")
ENTRY(__vsetleu2, __vsetleu2, true, NO_FLAG, P4, "Successful")
ENTRY(__vsetleu4, __vsetleu4, true, NO_FLAG, P4, "Successful")
ENTRY(__vsetlts2, __vsetlts2, true, NO_FLAG, P4, "Successful")
ENTRY(__vsetlts4, __vsetlts4, true, NO_FLAG, P4, "Successful")
ENTRY(__vsetltu2, __vsetltu2, true, NO_FLAG, P4, "Successful")
ENTRY(__vsetltu4, __vsetltu4, true, NO_FLAG, P4, "Successful")
ENTRY(__vsetne2, __vsetne2, true, NO_FLAG, P4, "Successful")
ENTRY(__vsetne4, __vsetne4, true, NO_FLAG, P4, "Successful")
ENTRY(__vsub2, __vsub2, true, NO_FLAG, P4, "Successful")
ENTRY(__vsub4, __vsub4, true, NO_FLAG, P4, "Successful")
ENTRY(__vsubss2, __vsubss2, true, NO_FLAG, P4, "Successful")
ENTRY(__vsubss4, __vsubss4, true, NO_FLAG, P4, "Successful")
ENTRY(__vsubus2, __vsubus2, true, NO_FLAG, P4, "Successful")
ENTRY(__vsubus4, __vsubus4, true, NO_FLAG, P4, "Successful")

ENTRY(acospi, acospi, false, NO_FLAG, P4, "comment")
ENTRY(tanpi, tanpi, false, NO_FLAG, P0, "comment")

ENTRY(__cudaGetExportTableInternal, __cudaGetExportTableInternal, false, NO_FLAG, P4, "comment")
ENTRY(__cudaInitManagedRuntime, __cudaInitManagedRuntime, false, NO_FLAG, P4, "comment")
ENTRY(__cudaInitModule, __cudaInitModule, false, NO_FLAG, P4, "comment")
ENTRY(__cudaRegisterDeviceFunction, __cudaRegisterDeviceFunction, false, NO_FLAG, P4, "comment")
ENTRY(__cudaRegisterFatBinary, __cudaRegisterFatBinary, false, NO_FLAG, P0, "comment")
ENTRY(__cudaRegisterFunction, __cudaRegisterFunction, false, NO_FLAG, P0, "comment")
ENTRY(__cudaRegisterManagedVar, __cudaRegisterManagedVar, false, NO_FLAG, P4, "comment")
ENTRY(__cudaRegisterPrelinkedFatBinary, __cudaRegisterPrelinkedFatBinary, false, NO_FLAG, P4, "comment")
ENTRY(__cudaRegisterShared, __cudaRegisterShared, false, NO_FLAG, P4, "comment")
ENTRY(__cudaRegisterSharedVar, __cudaRegisterSharedVar, false, NO_FLAG, P4, "comment")
ENTRY(__cudaRegisterSurface, __cudaRegisterSurface, false, NO_FLAG, P4, "comment")
ENTRY(__cudaRegisterTexture, __cudaRegisterTexture, false, NO_FLAG, P4, "comment")
ENTRY(__cudaRegisterVar, __cudaRegisterVar, false, NO_FLAG, P4, "comment")
ENTRY(__cudaUnregisterFatBinary, __cudaUnregisterFatBinary, false, NO_FLAG, P0, "comment")
ENTRY(h2div, h2div, true, NO_FLAG, P4, "Successful")
ENTRY(hdiv, hdiv, true, NO_FLAG, P0, "Successful")
ENTRY(make_char1, make_char1, true, NO_FLAG, P4, "Successful")
ENTRY(make_char2, make_char2, true, NO_FLAG, P0, "Successful")
ENTRY(make_char3, make_char3, true, NO_FLAG, P4, "Successful")
ENTRY(make_char4, make_char4, true, NO_FLAG, P0, "Successful")
ENTRY(make_double1, make_double1, true, NO_FLAG, P4, "Successful")
ENTRY(make_double2, make_double2, true, NO_FLAG, P0, "Successful")
ENTRY(make_double3, make_double3, true, NO_FLAG, P0, "Successful")
ENTRY(make_double4, make_double4, true, NO_FLAG, P0, "Successful")
ENTRY(make_float1, make_float1, true, NO_FLAG, P4, "Successful")
ENTRY(make_float2, make_float2, true, NO_FLAG, P0, "Successful")
ENTRY(make_float3, make_float3, true, NO_FLAG, P0, "Successful")
ENTRY(make_float4, make_float4, true, NO_FLAG, P0, "Successful")
ENTRY(make_int1, make_int1, true, NO_FLAG, P4, "Successful")
ENTRY(make_int2, make_int2, true, NO_FLAG, P0, "Successful")
ENTRY(make_int3, make_int3, true, NO_FLAG, P0, "Successful")
ENTRY(make_int4, make_int4, true, NO_FLAG, P0, "Successful")
ENTRY(make_long1, make_long1, true, NO_FLAG, P4, "Successful")
ENTRY(make_long2, make_long2, true, NO_FLAG, P4, "Successful")
ENTRY(make_long3, make_long3, true, NO_FLAG, P4, "Successful")
ENTRY(make_long4, make_long4, true, NO_FLAG, P0, "Successful")
ENTRY(make_longlong1, make_longlong1, true, NO_FLAG, P4, "Successful")
ENTRY(make_longlong2, make_longlong2, true, NO_FLAG, P4, "Successful")
ENTRY(make_longlong3, make_longlong3, true, NO_FLAG, P4, "Successful")
ENTRY(make_longlong4, make_longlong4, true, NO_FLAG, P0, "Successful")
ENTRY(make_short1, make_short1, true, NO_FLAG, P4, "Successful")
ENTRY(make_short2, make_short2, true, NO_FLAG, P0, "Successful")
ENTRY(make_short3, make_short3, true, NO_FLAG, P4, "Successful")
ENTRY(make_short4, make_short4, true, NO_FLAG, P0, "Successful")
ENTRY(make_uchar1, make_uchar1, true, NO_FLAG, P0, "Successful")
ENTRY(make_uchar2, make_uchar2, true, NO_FLAG, P0, "Successful")
ENTRY(make_uchar3, make_uchar3, true, NO_FLAG, P4, "Successful")
ENTRY(make_uchar4, make_uchar4, true, NO_FLAG, P0, "Successful")
ENTRY(make_uint1, make_uint1, true, NO_FLAG, P4, "Successful")
ENTRY(make_uint2, make_uint2, true, NO_FLAG, P0, "Successful")
ENTRY(make_uint3, make_uint3, true, NO_FLAG, P0, "Successful")
ENTRY(make_uint4, make_uint4, true, NO_FLAG, P0, "Successful")
ENTRY(make_ulong1, make_ulong1, true, NO_FLAG, P4, "Successful")
ENTRY(make_ulong2, make_ulong2, true, NO_FLAG, P0, "Successful")
ENTRY(make_ulong3, make_ulong3, true, NO_FLAG, P4, "Successful")
ENTRY(make_ulong4, make_ulong4, true, NO_FLAG, P4, "Successful")
ENTRY(make_ulonglong1, make_ulonglong1, true, NO_FLAG, P4, "Successful")
ENTRY(make_ulonglong2, make_ulonglong2, true, NO_FLAG, P0, "Successful")
ENTRY(make_ulonglong3, make_ulonglong3, true, NO_FLAG, P4, "Successful")
ENTRY(make_ulonglong4, make_ulonglong4, true, NO_FLAG, P0, "Successful")
ENTRY(make_ushort1, make_ushort1, true, NO_FLAG, P4, "Successful")
ENTRY(make_ushort2, make_ushort2, true, NO_FLAG, P0, "Successful")
ENTRY(make_ushort3, make_ushort3, true, NO_FLAG, P4, "Successful")
ENTRY(make_ushort4, make_ushort4, true, NO_FLAG, P0, "Successful")
ENTRY(__threadfence_block, __threadfence_block, true, NO_FLAG, P0, "Successful: DPCT1078")
ENTRY(__threadfence, __threadfence, true, NO_FLAG, P0, "Successful: DPCT1078")
ENTRY(__threadfence_system, __threadfence_system, true, NO_FLAG, P0, "Successful: DPCT1078")
ENTRY(__syncthreads, __syncthreads, true, NO_FLAG, P0, "Successful: DPCT1078")
ENTRY(__syncthreads_count, __syncthreads_count, true, NO_FLAG, P0, "Successful: DPCT1078")
ENTRY(__syncthreads_and, __syncthreads_and, true, NO_FLAG, P0, "Successful: DPCT1078")
ENTRY(__syncthreads_or, __syncthreads_or, true, NO_FLAG, P0, "Successful: DPCT1078")
ENTRY(tex1Dfetch, tex1Dfetch, true, NO_FLAG, P0, "Successful")
ENTRY(tex1D, tex1D, true, NO_FLAG, P0, "Successful")
ENTRY(tex1DLod, tex1DLod, true, NO_FLAG, P4, "DPCT1026/DPCT1027")
ENTRY(tex1DGrad, tex1DGrad, false, NO_FLAG, P4, "comment")
ENTRY(tex2D, tex2D, true, NO_FLAG, P0, "Successful")
ENTRY(tex2DLod, tex2DLod, true, NO_FLAG, P0, "DPCT1026/DPCT1027")
ENTRY(tex2DGrad, tex2DGrad, false, NO_FLAG, P0, "comment")
ENTRY(tex3D, tex3D, true, NO_FLAG, P0, "Successful")
ENTRY(tex3DLod, tex3DLod, true, NO_FLAG, P4, "DPCT1026/DPCT1027")
ENTRY(tex3DGrad, tex3DGrad, false, NO_FLAG, P4, "comment")
ENTRY(tex1DLayered, tex1DLayered, true, NO_FLAG, P4, "Successful")
ENTRY(tex1DLayeredLod, tex1DLayeredLod, false, NO_FLAG, P4, "comment")
ENTRY(tex1DLayeredGrad, tex1DLayeredGrad, false, NO_FLAG, P4, "comment")
ENTRY(tex2DLayered, tex2DLayered, true, NO_FLAG, P0, "Successful")
ENTRY(tex2DLayeredLod, tex2DLayeredLod, false, NO_FLAG, P4, "comment")
ENTRY(tex2DLayeredGrad, tex2DLayeredGrad, false, NO_FLAG, P4, "comment")
ENTRY(texCubemap, texCubemap, false, NO_FLAG, P0, "comment")
ENTRY(texCubemapLod, texCubemapLod, false, NO_FLAG, P4, "comment")
ENTRY(texCubemapLayered, texCubemapLayered, false, NO_FLAG, P4, "comment")
ENTRY(texCubemapLayeredLod, texCubemapLayeredLod, false, NO_FLAG, P4, "comment")
ENTRY(tex2Dgather, tex2Dgather, false, NO_FLAG, P0, "comment")
ENTRY(surf1Dread, surf1Dread, false, NO_FLAG, P4, "comment")
ENTRY(surf1Dwrite, surf1Dwrite, false, NO_FLAG, P0, "comment")
ENTRY(surf2Dread, surf2Dread, false, NO_FLAG, P4, "comment")
ENTRY(surf2Dwrite, surf2Dwrite, false, NO_FLAG, P0, "comment")
ENTRY(surf3Dread, surf3Dread, false, NO_FLAG, P4, "comment")
ENTRY(surf3Dwrite, surf3Dwrite, false, NO_FLAG, P0, "comment")
ENTRY(surf1DLayeredread, surf1DLayeredread, false, NO_FLAG, P4, "comment")
ENTRY(surf1DLayeredwrite, surf1DLayeredwrite, false, NO_FLAG, P4, "comment")
ENTRY(surf2DLayeredread, surf2DLayeredread, false, NO_FLAG, P4, "comment")
ENTRY(surf2DLayeredwrite, surf2DLayeredwrite, false, NO_FLAG, P0, "comment")
ENTRY(surfCubemapread, surfCubemapread, false, NO_FLAG, P4, "comment")
ENTRY(surfCubemapwrite, surfCubemapwrite, false, NO_FLAG, P4, "comment")
ENTRY(surfCubemapLayeredread, surfCubemapLayeredread, false, NO_FLAG, P4, "comment")
ENTRY(surfCubemapLayeredwrite, surfCubemapLayeredwrite, false, NO_FLAG, P4, "comment")
ENTRY(clock, clock, true, NO_FLAG, P0, "DPCT1008")
ENTRY(clock64, clock64, true, NO_FLAG, P0, "DPCT1008")
ENTRY(__nanosleep, __nanosleep, true, NO_FLAG, P0, "DPCT1008")
ENTRY(atomicAdd_system, atomicAdd_system, true, NO_FLAG, P0, "comment")
ENTRY(atomicSub_system, atomicSub_system, true, NO_FLAG, P4, "comment")
ENTRY(atomicExch_system, atomicExch_system, true, NO_FLAG, P0, "comment")
ENTRY(atomicMin_system, atomicMin_system, true, NO_FLAG, P0, "comment")
ENTRY(atomicMax_system, atomicMax_system, true, NO_FLAG, P0, "comment")
ENTRY(atomicInc_system, atomicInc_system, true, NO_FLAG, P0, "comment")
ENTRY(atomicDec_system, atomicDec_system, true, NO_FLAG, P0, "comment")
ENTRY(atomicCAS_system, atomicCAS_system, true, NO_FLAG, P0, "comment")
ENTRY(atomicAnd_system, atomicAnd_system, true, NO_FLAG, P0, "comment")
ENTRY(atomicOr_system, atomicOr_system, true, NO_FLAG, P0, "comment")
ENTRY(atomicXor_system, atomicXor_system, true, NO_FLAG, P0, "comment")
ENTRY(__all, __all, true, NO_FLAG, P0, "Successful")
ENTRY(__any, __any, true, NO_FLAG, P0, "Successful")
ENTRY(__ballot, __ballot, true, NO_FLAG, P0, "Successful")
ENTRY(__shfl, __shfl, true, NO_FLAG, P0, "Successful")
ENTRY(__shfl_up, __shfl_up, true, NO_FLAG, P0, "Successful")
ENTRY(__shfl_down, __shfl_down, true, NO_FLAG, P0, "Successful")
ENTRY(__shfl_xor, __shfl_xor, true, NO_FLAG, P0, "Successful")
ENTRY(__prof_trigger, __prof_trigger, false, NO_FLAG, P4, "comment")
ENTRY(asm, asm, false, NO_FLAG, P0, "comment")
ENTRY(__syncwarp, __syncwarp, true, NO_FLAG, P0, "Successful")
ENTRY(__all_sync, __all_sync, true, NO_FLAG, P0, "Successful")
ENTRY(__any_sync, __any_sync, true, NO_FLAG, P0, "Successful")
ENTRY(__ballot_sync, __ballot_sync, true, NO_FLAG, P0, "Successful")
ENTRY(__reduce_add_sync, __reduce_add_sync, true, NO_FLAG, P4, "Successful")
ENTRY(__reduce_min_sync, __reduce_min_sync, true, NO_FLAG, P4, "Successful")
ENTRY(__reduce_max_sync, __reduce_max_sync, true, NO_FLAG, P4, "Successful")
ENTRY(__reduce_and_sync, __reduce_and_sync, true, NO_FLAG, P4, "Successful")
ENTRY(__reduce_or_sync, __reduce_or_sync, true, NO_FLAG, P4, "Successful")
ENTRY(__reduce_xor_sync, __reduce_xor_sync, true, NO_FLAG, P4, "Successful")
ENTRY(__activemask, __activemask, true, NO_FLAG, P0, "Successful: DPCT1086")
ENTRY(__match_any_sync, __match_any_sync, true, NO_FLAG, P4, "comment")
ENTRY(__match_all_sync, __match_all_sync, true, NO_FLAG, P4, "comment")
ENTRY(cuCtxCreate, cuCtxCreate_v3, true, NO_FLAG, P4, "comment")
ENTRY(cuCtxDestroy, cuCtxDestroy_v2, true, NO_FLAG, P4, "DPCT1026/DPCT1027")
ENTRY(cuCtxGetApiVersion, cuCtxGetApiVersion, true, NO_FLAG, P4, "comment")
ENTRY(cuCtxGetCacheConfig, cuCtxGetCacheConfig, false, NO_FLAG, P4, "comment")
ENTRY(cuCtxGetCurrent, cuCtxGetCurrent, true, NO_FLAG, P4, "comment")
ENTRY(cuCtxGetDevice, cuCtxGetDevice, true, NO_FLAG, P4, "Successful")
ENTRY(cuCtxGetFlags, cuCtxGetFlags, false, NO_FLAG, P4, "comment")
ENTRY(cuCtxGetLimit, cuCtxGetLimit, true, API_CALL_REMOVED, P4, "DPCT1026/DPCT1027")
ENTRY(cuCtxGetSharedMemConfig, cuCtxGetSharedMemConfig, false, NO_FLAG, P4, "comment")
ENTRY(cuCtxGetStreamPriorityRange, cuCtxGetStreamPriorityRange, false, NO_FLAG, P4, "comment")
ENTRY(cuCtxPopCurrent, cuCtxPopCurrent_v2, false, NO_FLAG, P4, "comment")
ENTRY(cuCtxPushCurrent, cuCtxPushCurrent_v2, false, NO_FLAG, P4, "comment")
ENTRY(cuCtxSetCacheConfig, cuCtxSetCacheConfig, true, API_CALL_REMOVED, P4, "DPCT1026/DPCT1027")
ENTRY(cuCtxSetCurrent, cuCtxSetCurrent, true, NO_FLAG, P4, "comment")
ENTRY(cuCtxSetFlags, cuCtxSetFlags, false, NO_FLAG, P4, "comment")
ENTRY(cuCtxSetLimit, cuCtxSetLimit, true, API_CALL_REMOVED, P4, "DPCT1026/DPCT1027")
ENTRY(cuCtxSetSharedMemConfig, cuCtxSetSharedMemConfig, false, NO_FLAG, P4, "comment")
ENTRY(cuCtxSynchronize, cuCtxSynchronize, true, NO_FLAG, P4, "comment")
ENTRY(cuCtxAttach, cuCtxAttach, false, NO_FLAG, P4, "comment")
ENTRY(cuCtxDetach, cuCtxDetach, false, NO_FLAG, P4, "comment")
ENTRY(cuD3D10GetDevice, cuD3D10GetDevice, false, NO_FLAG, P4, "comment")
ENTRY(cuD3D10GetDevices, cuD3D10GetDevices, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphicsD3D10RegisterResource, cuGraphicsD3D10RegisterResource, false, NO_FLAG, P4, "comment")
ENTRY(cuD3D10CtxCreate, cuD3D10CtxCreate, false, NO_FLAG, P4, "comment")
ENTRY(cuD3D10CtxCreateOnDevice, cuD3D10CtxCreateOnDevice, false, NO_FLAG, P4, "comment")
ENTRY(cuD3D10GetDirect3DDevice, cuD3D10GetDirect3DDevice, false, NO_FLAG, P4, "comment")
ENTRY(cuD3D10MapResources, cuD3D10MapResources, false, NO_FLAG, P4, "comment")
ENTRY(cuD3D10RegisterResource, cuD3D10RegisterResource, false, NO_FLAG, P4, "comment")
ENTRY(cuD3D10ResourceGetMappedArray, cuD3D10ResourceGetMappedArray, false, NO_FLAG, P4, "comment")
ENTRY(cuD3D10ResourceGetMappedPitch, cuD3D10ResourceGetMappedPitch, false, NO_FLAG, P4, "comment")
ENTRY(cuD3D10ResourceGetMappedPointer, cuD3D10ResourceGetMappedPointer, false, NO_FLAG, P4, "comment")
ENTRY(cuD3D10ResourceGetMappedSize, cuD3D10ResourceGetMappedSize, false, NO_FLAG, P4, "comment")
ENTRY(cuD3D10ResourceGetSurfaceDimensions, cuD3D10ResourceGetSurfaceDimensions, false, NO_FLAG, P4, "comment")
ENTRY(cuD3D10ResourceSetMapFlags, cuD3D10ResourceSetMapFlags, false, NO_FLAG, P4, "comment")
ENTRY(cuD3D10UnmapResources, cuD3D10UnmapResources, false, NO_FLAG, P4, "comment")
ENTRY(cuD3D10UnregisterResource, cuD3D10UnregisterResource, false, NO_FLAG, P4, "comment")
ENTRY(cuD3D11GetDevice, cuD3D11GetDevice, false, NO_FLAG, P4, "comment")
ENTRY(cuD3D11GetDevices, cuD3D11GetDevices, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphicsD3D11RegisterResource, cuGraphicsD3D11RegisterResource, false, NO_FLAG, P4, "comment")
ENTRY(cuD3D11CtxCreate, cuD3D11CtxCreate, false, NO_FLAG, P4, "comment")
ENTRY(cuD3D11CtxCreateOnDevice, cuD3D11CtxCreateOnDevice, false, NO_FLAG, P4, "comment")
ENTRY(cuD3D11GetDirect3DDevice, cuD3D11GetDirect3DDevice, false, NO_FLAG, P4, "comment")
ENTRY(cuD3D9CtxCreate, cuD3D9CtxCreate, false, NO_FLAG, P4, "comment")
ENTRY(cuD3D9CtxCreateOnDevice, cuD3D9CtxCreateOnDevice, false, NO_FLAG, P4, "comment")
ENTRY(cuD3D9GetDevice, cuD3D9GetDevice, false, NO_FLAG, P4, "comment")
ENTRY(cuD3D9GetDevices, cuD3D9GetDevices, false, NO_FLAG, P4, "comment")
ENTRY(cuD3D9GetDirect3DDevice, cuD3D9GetDirect3DDevice, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphicsD3D9RegisterResource, cuGraphicsD3D9RegisterResource, false, NO_FLAG, P4, "comment")
ENTRY(cuD3D9MapResources, cuD3D9MapResources, false, NO_FLAG, P4, "comment")
ENTRY(cuD3D9RegisterResource, cuD3D9RegisterResource, false, NO_FLAG, P4, "comment")
ENTRY(cuD3D9ResourceGetMappedArray, cuD3D9ResourceGetMappedArray, false, NO_FLAG, P4, "comment")
ENTRY(cuD3D9ResourceGetMappedPitch, cuD3D9ResourceGetMappedPitch, false, NO_FLAG, P4, "comment")
ENTRY(cuD3D9ResourceGetMappedPointer, cuD3D9ResourceGetMappedPointer, false, NO_FLAG, P4, "comment")
ENTRY(cuD3D9ResourceGetMappedSize, cuD3D9ResourceGetMappedSize, false, NO_FLAG, P4, "comment")
ENTRY(cuD3D9ResourceGetSurfaceDimensions, cuD3D9ResourceGetSurfaceDimensions, false, NO_FLAG, P4, "comment")
ENTRY(cuD3D9ResourceSetMapFlags, cuD3D9ResourceSetMapFlags, false, NO_FLAG, P4, "comment")
ENTRY(cuD3D9UnmapResources, cuD3D9UnmapResources, false, NO_FLAG, P4, "comment")
ENTRY(cuD3D9UnregisterResource, cuD3D9UnregisterResource, false, NO_FLAG, P4, "comment")
ENTRY(cuDeviceGet, cuDeviceGet, true, NO_FLAG, P4, "comment")
ENTRY(cuDeviceGetAttribute, cuDeviceGetAttribute, true, NO_FLAG, P4, "DPCT1051/DPCT1076")
ENTRY(cuDeviceGetCount, cuDeviceGetCount, true, NO_FLAG, P4, "comment")
ENTRY(cuDeviceGetName, cuDeviceGetName, true, NO_FLAG, P4, "Successful")
ENTRY(cuDeviceTotalMem, cuDeviceTotalMem_v2, true, NO_FLAG, P4, "Successful")
ENTRY(cuDeviceComputeCapability, cuDeviceComputeCapability, true, NO_FLAG, P4, "comment")
ENTRY(cuDeviceGetProperties, cuDeviceGetProperties, false, NO_FLAG, P4, "comment")
ENTRY(cuEGLStreamConsumerAcquireFrame, cuEGLStreamConsumerAcquireFrame, false, NO_FLAG, P4, "comment")
ENTRY(cuEGLStreamConsumerConnect, cuEGLStreamConsumerConnect, false, NO_FLAG, P4, "comment")
ENTRY(cuEGLStreamConsumerConnectWithFlags, cuEGLStreamConsumerConnectWithFlags, false, NO_FLAG, P4, "comment")
ENTRY(cuEGLStreamConsumerDisconnect, cuEGLStreamConsumerDisconnect, false, NO_FLAG, P4, "comment")
ENTRY(cuEGLStreamConsumerReleaseFrame, cuEGLStreamConsumerReleaseFrame, false, NO_FLAG, P4, "comment")
ENTRY(cuEGLStreamProducerConnect, cuEGLStreamProducerConnect, false, NO_FLAG, P4, "comment")
ENTRY(cuEGLStreamProducerDisconnect, cuEGLStreamProducerDisconnect, false, NO_FLAG, P4, "comment")
ENTRY(cuEGLStreamProducerPresentFrame, cuEGLStreamProducerPresentFrame, false, NO_FLAG, P4, "comment")
ENTRY(cuEGLStreamProducerReturnFrame, cuEGLStreamProducerReturnFrame, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphicsEGLRegisterImage, cuGraphicsEGLRegisterImage, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphicsResourceGetMappedEglFrame, cuGraphicsResourceGetMappedEglFrame, false, NO_FLAG, P4, "comment")
ENTRY(cuGetErrorName, cuGetErrorName, false, NO_FLAG, P4, "comment")
ENTRY(cuGetErrorString, cuGetErrorString, true, NO_FLAG, P4, "comment")
ENTRY(cuEventCreate, cuEventCreate, true, NO_FLAG, P4, "DPCT1026/DPCT1027")
ENTRY(cuEventDestroy, cuEventDestroy_v2, true, API_CALL_REMOVED, P4, "DPCT1026/DPCT1027")
ENTRY(cuEventElapsedTime, cuEventElapsedTime, true, NO_FLAG, P4, "DPCT1012")
ENTRY(cuEventQuery, cuEventQuery, true, NO_FLAG, P4, "comment")
ENTRY(cuEventRecord, cuEventRecord, true, NO_FLAG, P4, "DPCT1012/DPCT1024")
ENTRY(cuEventSynchronize, cuEventSynchronize, true, NO_FLAG, P4, "DPCT1012")
ENTRY(cuStreamBatchMemOp, cuStreamBatchMemOp_v2, false, NO_FLAG, P4, "comment")
ENTRY(cuStreamWaitValue32, cuStreamWaitValue32_v2, false, NO_FLAG, P4, "comment")
ENTRY(cuStreamWriteValue32, cuStreamWriteValue32_v2, false, NO_FLAG, P4, "comment")
ENTRY(cuFuncGetAttribute, cuFuncGetAttribute, true, NO_FLAG, P4, "Successful")
ENTRY(cuFuncSetCacheConfig, cuFuncSetCacheConfig, true, API_CALL_UNSUPPORTED, P0, "DPCT1026")
ENTRY(cuFuncSetSharedMemConfig, cuFuncSetSharedMemConfig, false, NO_FLAG, P4, "comment")
ENTRY(cuLaunchKernel, cuLaunchKernel, true, NO_FLAG, P4, "Successful")
ENTRY(cuFuncSetBlockShape, cuFuncSetBlockShape, false, NO_FLAG, P4, "comment")
ENTRY(cuFuncSetSharedSize, cuFuncSetSharedSize, false, NO_FLAG, P4, "comment")
ENTRY(cuLaunch, cuLaunch, false, NO_FLAG, P4, "comment")
ENTRY(cuLaunchGrid, cuLaunchGrid, false, NO_FLAG, P4, "comment")
ENTRY(cuLaunchGridAsync, cuLaunchGridAsync, false, NO_FLAG, P4, "comment")
ENTRY(cuParamSetSize, cuParamSetSize, false, NO_FLAG, P4, "comment")
ENTRY(cuParamSetTexRef, cuParamSetTexRef, false, NO_FLAG, P4, "comment")
ENTRY(cuParamSetf, cuParamSetf, false, NO_FLAG, P4, "comment")
ENTRY(cuParamSeti, cuParamSeti, false, NO_FLAG, P4, "comment")
ENTRY(cuParamSetv, cuParamSetv, false, NO_FLAG, P4, "comment")
ENTRY(cuGLGetDevices, cuGLGetDevices, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphicsGLRegisterBuffer, cuGraphicsGLRegisterBuffer, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphicsGLRegisterImage, cuGraphicsGLRegisterImage, false, NO_FLAG, P4, "comment")
ENTRY(cuWGLGetDevice, cuWGLGetDevice, false, NO_FLAG, P4, "comment")
ENTRY(cuGLCtxCreate, cuGLCtxCreate, false, NO_FLAG, P4, "comment")
ENTRY(cuGLInit, cuGLInit, false, NO_FLAG, P4, "comment")
ENTRY(cuGLMapBufferObject, cuGLMapBufferObject, false, NO_FLAG, P4, "comment")
ENTRY(cuGLMapBufferObjectAsync, cuGLMapBufferObjectAsync, false, NO_FLAG, P4, "comment")
ENTRY(cuGLRegisterBufferObject, cuGLRegisterBufferObject, false, NO_FLAG, P4, "comment")
ENTRY(cuGLSetBufferObjectMapFlags, cuGLSetBufferObjectMapFlags, false, NO_FLAG, P4, "comment")
ENTRY(cuGLUnmapBufferObject, cuGLUnmapBufferObject, false, NO_FLAG, P4, "comment")
ENTRY(cuGLUnmapBufferObjectAsync, cuGLUnmapBufferObjectAsync, false, NO_FLAG, P4, "comment")
ENTRY(cuGLUnregisterBufferObject, cuGLUnregisterBufferObject, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphicsMapResources, cuGraphicsMapResources, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphicsResourceGetMappedMipmappedArray, cuGraphicsResourceGetMappedMipmappedArray, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphicsResourceGetMappedPointer, cuGraphicsResourceGetMappedPointer_v2, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphicsResourceSetMapFlags, cuGraphicsResourceSetMapFlags_v2, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphicsSubResourceGetMappedArray, cuGraphicsSubResourceGetMappedArray, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphicsUnmapResources, cuGraphicsUnmapResources, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphicsUnregisterResource, cuGraphicsUnregisterResource, false, NO_FLAG, P4, "comment")
ENTRY(cuInit, cuInit, true, NO_FLAG, P4, "DPCT1026/DPCT1027")
ENTRY(cuArray3DCreate, cuArray3DCreate_v2, false, NO_FLAG, P4, "comment")
ENTRY(cuArray3DGetDescriptor, cuArray3DGetDescriptor_v2, false, NO_FLAG, P4, "comment")
ENTRY(cuArrayCreate, cuArrayCreate_v2, true, NO_FLAG, P4, "DPCT1073")
ENTRY(cuArrayDestroy, cuArrayDestroy, true, NO_FLAG, P4, "Successful")
ENTRY(cuArrayGetDescriptor, cuArrayGetDescriptor_v2, false, NO_FLAG, P4, "comment")
ENTRY(cuDeviceGetByPCIBusId, cuDeviceGetByPCIBusId, false, NO_FLAG, P4, "comment")
ENTRY(cuDeviceGetPCIBusId, cuDeviceGetPCIBusId, false, NO_FLAG, P4, "comment")
ENTRY(cuIpcCloseMemHandle, cuIpcCloseMemHandle, false, NO_FLAG, P4, "comment")
ENTRY(cuIpcGetEventHandle, cuIpcGetEventHandle, false, NO_FLAG, P4, "comment")
ENTRY(cuIpcGetMemHandle, cuIpcGetMemHandle, false, NO_FLAG, P4, "comment")
ENTRY(cuIpcOpenEventHandle, cuIpcOpenEventHandle, false, NO_FLAG, P4, "comment")
ENTRY(cuIpcOpenMemHandle, cuIpcOpenMemHandle, false, NO_FLAG, P4, "comment")
ENTRY(cuMemAlloc, cuMemAlloc_v2, true, NO_FLAG, P4, "Successful")
ENTRY(cuMemAllocHost, cuMemAllocHost_v2, true, NO_FLAG, P4, "comment")
ENTRY(cuMemAllocManaged, cuMemAllocManaged, true, NO_FLAG, P4, "comment")
ENTRY(cuMemAllocPitch, cuMemAllocPitch, true, NO_FLAG, P4, "Successful")
ENTRY(cuMemFree, cuMemFree_v2, true, NO_FLAG, P4, "Successful")
ENTRY(cuMemFreeHost, cuMemFreeHost, true, NO_FLAG, P4, "comment")
ENTRY(cuMemGetAddressRange, cuMemGetAddressRange_v2, false, NO_FLAG, P4, "comment")
ENTRY(cuMemGetInfo, cuMemGetInfo_v2, true, NO_FLAG, P4, "DPCT1072/DPCT1106")
ENTRY(cuMemHostAlloc, cuMemHostAlloc, true, NO_FLAG, P4, "Migration rate 0.5, emit DPCT1072 for unsupported part.")
ENTRY(cuMemHostGetDevicePointer, cuMemHostGetDevicePointer_v2, true, NO_FLAG, P4, "comment")
ENTRY(cuMemHostGetFlags, cuMemHostGetFlags, true, NO_FLAG, P4, "Successful")
ENTRY(cuMemHostRegister, cuMemHostRegister_v2, true, NO_FLAG, P4, "DPCT1026/DPCT1027")
ENTRY(cuMemHostUnregister, cuMemHostUnregister, true, NO_FLAG, P4, "DPCT1026/DPCT1027")
ENTRY(cuMemcpy, cuMemcpy, true, NO_FLAG, P4, "Successful")
ENTRY(cuMemcpy2D, cuMemcpy2D_v2, true, NO_FLAG, P4, "Successful")
ENTRY(cuMemcpy2DAsync, cuMemcpy2DAsync_v2, true, NO_FLAG, P4, "Successful")
ENTRY(cuMemcpy2DUnaligned, cuMemcpy2DUnaligned_v2, false, NO_FLAG, P4, "comment")
ENTRY(cuMemcpy3D, cuMemcpy3D_v2, true, NO_FLAG, P4, "Successful")
ENTRY(cuMemcpy3DAsync, cuMemcpy3DAsync_v2, true, NO_FLAG, P4, "comment")
ENTRY(cuMemcpy3DPeer, cuMemcpy3DPeer, false, NO_FLAG, P4, "comment")
ENTRY(cuMemcpy3DPeerAsync, cuMemcpy3DPeerAsync, false, NO_FLAG, P4, "comment")
ENTRY(cuMemcpyAsync, cuMemcpyAsync, true, NO_FLAG, P4, "Successful")
ENTRY(cuMemcpyAtoA, cuMemcpyAtoA_v2, true, NO_FLAG, P4, "comment")
ENTRY(cuMemcpyAtoD, cuMemcpyAtoD_v2, true, NO_FLAG, P4, "comment")
ENTRY(cuMemcpyAtoH, cuMemcpyAtoH_v2, true, NO_FLAG, P4, "comment")
ENTRY(cuMemcpyAtoHAsync, cuMemcpyAtoHAsync_v2, true, NO_FLAG, P4, "comment")
ENTRY(cuMemcpyDtoA, cuMemcpyDtoA_v2, true, NO_FLAG, P4, "comment")
ENTRY(cuMemcpyDtoD, cuMemcpyDtoD_v2, true, NO_FLAG, P4, "Successful")
ENTRY(cuMemcpyDtoDAsync, cuMemcpyDtoDAsync_v2, true, NO_FLAG, P4, "Successful")
ENTRY(cuMemcpyDtoH, cuMemcpyDtoH_v2, true, NO_FLAG, P4, "Successful")
ENTRY(cuMemcpyDtoHAsync, cuMemcpyDtoHAsync_v2, true, NO_FLAG, P4, "Successful")
ENTRY(cuMemcpyHtoA, cuMemcpyHtoA_v2, true, NO_FLAG, P4, "comment")
ENTRY(cuMemcpyHtoAAsync, cuMemcpyHtoAAsync_v2, true, NO_FLAG, P4, "comment")
ENTRY(cuMemcpyHtoD, cuMemcpyHtoD_v2, true, NO_FLAG, P4, "comment")
ENTRY(cuMemcpyHtoDAsync, cuMemcpyHtoDAsync_v2, true, NO_FLAG, P4, "comment")
ENTRY(cuMemcpyPeer, cuMemcpyPeer, false, NO_FLAG, P4, "comment")
ENTRY(cuMemcpyPeerAsync, cuMemcpyPeerAsync, false, NO_FLAG, P4, "comment")
ENTRY(cuMemsetD16, cuMemsetD16_v2, true, NO_FLAG, P4, "comment")
ENTRY(cuMemsetD16Async, cuMemsetD16Async, true, NO_FLAG, P4, "comment")
ENTRY(cuMemsetD2D16, cuMemsetD2D16_v2, true, NO_FLAG, P4, "comment")
ENTRY(cuMemsetD2D16Async, cuMemsetD2D16Async, true, NO_FLAG, P4, "comment")
ENTRY(cuMemsetD2D32, cuMemsetD2D32_v2, true, NO_FLAG, P4, "comment")
ENTRY(cuMemsetD2D32Async, cuMemsetD2D32Async, true, NO_FLAG, P4, "comment")
ENTRY(cuMemsetD2D8, cuMemsetD2D8_v2, true, NO_FLAG, P4, "comment")
ENTRY(cuMemsetD2D8Async, cuMemsetD2D8Async, true, NO_FLAG, P4, "comment")
ENTRY(cuMemsetD32, cuMemsetD32_v2, true, NO_FLAG, P4, "comment")
ENTRY(cuMemsetD32Async, cuMemsetD32Async, true, NO_FLAG, P4, "comment")
ENTRY(cuMemsetD8, cuMemsetD8_v2, true, NO_FLAG, P4, "comment")
ENTRY(cuMemsetD8Async, cuMemsetD8Async, true, NO_FLAG, P4, "comment")
ENTRY(cuMipmappedArrayCreate, cuMipmappedArrayCreate, false, NO_FLAG, P4, "comment")
ENTRY(cuMipmappedArrayDestroy, cuMipmappedArrayDestroy, false, NO_FLAG, P4, "comment")
ENTRY(cuMipmappedArrayGetLevel, cuMipmappedArrayGetLevel, false, NO_FLAG, P4, "comment")
ENTRY(cuLinkAddData, cuLinkAddData_v2, false, NO_FLAG, P4, "comment")
ENTRY(cuLinkAddFile, cuLinkAddFile_v2, false, NO_FLAG, P4, "comment")
ENTRY(cuLinkComplete, cuLinkComplete, false, NO_FLAG, P4, "comment")
ENTRY(cuLinkCreate, cuLinkCreate_v2, false, NO_FLAG, P4, "comment")
ENTRY(cuLinkDestroy, cuLinkDestroy, false, NO_FLAG, P4, "comment")
ENTRY(cuModuleGetFunction, cuModuleGetFunction, true, NO_FLAG, P4, "Successful")
ENTRY(cuModuleGetGlobal, cuModuleGetGlobal_v2, false, NO_FLAG, P4, "comment")
ENTRY(cuModuleGetSurfRef, cuModuleGetSurfRef, false, NO_FLAG, P4, "comment")
ENTRY(cuModuleGetTexRef, cuModuleGetTexRef, true, NO_FLAG, P4, "Successful")
ENTRY(cuModuleLoad, cuModuleLoad, true, NO_FLAG, P4, "DPCT1103")
ENTRY(cuModuleLoadData, cuModuleLoadData, true, NO_FLAG, P4, "DPCT1104")
ENTRY(cuModuleLoadDataEx, cuModuleLoadDataEx, true, NO_FLAG, P4, "DPCT1104")
ENTRY(cuModuleLoadFatBinary, cuModuleLoadFatBinary, false, NO_FLAG, P4, "comment")
ENTRY(cuModuleUnload, cuModuleUnload, true, NO_FLAG, P4, "Successful")
ENTRY(cuOccupancyMaxActiveBlocksPerMultiprocessor, cuOccupancyMaxActiveBlocksPerMultiprocessor, true, NO_FLAG, P4, "DPCT1111")
ENTRY(cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags, cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags, false, NO_FLAG, P4, "comment")
ENTRY(cuOccupancyMaxPotentialBlockSize, cuOccupancyMaxPotentialBlockSize, false, NO_FLAG, P4, "comment")
ENTRY(cuOccupancyMaxPotentialBlockSizeWithFlags, cuOccupancyMaxPotentialBlockSizeWithFlags, false, NO_FLAG, P4, "comment")
ENTRY(cuCtxDisablePeerAccess, cuCtxDisablePeerAccess, false, NO_FLAG, P4, "comment")
ENTRY(cuCtxEnablePeerAccess, cuCtxEnablePeerAccess, false, NO_FLAG, P4, "comment")
ENTRY(cuDeviceCanAccessPeer, cuDeviceCanAccessPeer, false, NO_FLAG, P4, "comment")
ENTRY(cuDeviceGetP2PAttribute, cuDeviceGetP2PAttribute, false, NO_FLAG, P4, "comment")
ENTRY(cuDevicePrimaryCtxGetState, cuDevicePrimaryCtxGetState, false, NO_FLAG, P4, "comment")
ENTRY(cuDevicePrimaryCtxRelease, cuDevicePrimaryCtxRelease_v2, true, NO_FLAG, P4, "DPCT1026/DPCT1027")
ENTRY(cuDevicePrimaryCtxReset, cuDevicePrimaryCtxReset_v2, false, NO_FLAG, P4, "comment")
ENTRY(cuDevicePrimaryCtxRetain, cuDevicePrimaryCtxRetain, true, NO_FLAG, P4, "comment")
ENTRY(cuDevicePrimaryCtxSetFlags, cuDevicePrimaryCtxSetFlags_v2, false, NO_FLAG, P4, "comment")
ENTRY(cuProfilerInitialize, cuProfilerInitialize, false, NO_FLAG, P4, "comment")
ENTRY(cuProfilerStart, cuProfilerStart, false, NO_FLAG, P4, "comment")
ENTRY(cuProfilerStop, cuProfilerStop, false, NO_FLAG, P4, "comment")
ENTRY(cuStreamAddCallback, cuStreamAddCallback, true, NO_FLAG, P4, "Successful")
ENTRY(cuStreamAttachMemAsync, cuStreamAttachMemAsync, true, NO_FLAG, P4, "DPCT1026/DPCT1027")
ENTRY(cuStreamCreate, cuStreamCreate, true, NO_FLAG, P4, "comment")
ENTRY(cuStreamCreateWithPriority, cuStreamCreateWithPriority, false, NO_FLAG, P4, "comment")
ENTRY(cuStreamDestroy, cuStreamDestroy_v2, true, NO_FLAG, P4, "Successful")
ENTRY(cuStreamGetFlags, cuStreamGetFlags, false, NO_FLAG, P4, "comment")
ENTRY(cuStreamGetPriority, cuStreamGetPriority, false, NO_FLAG, P4, "comment")
ENTRY(cuStreamQuery, cuStreamQuery, false, NO_FLAG, P4, "comment")
ENTRY(cuStreamSynchronize, cuStreamSynchronize, true, NO_FLAG, P4, "comment")
ENTRY(cuStreamWaitEvent, cuStreamWaitEvent, true, NO_FLAG, P4, "comment")
ENTRY(cuSurfObjectCreate, cuSurfObjectCreate, false, NO_FLAG, P4, "comment")
ENTRY(cuSurfObjectDestroy, cuSurfObjectDestroy, false, NO_FLAG, P4, "comment")
ENTRY(cuSurfObjectGetResourceDesc, cuSurfObjectGetResourceDesc, false, NO_FLAG, P4, "comment")
ENTRY(cuSurfRefGetArray, cuSurfRefGetArray, false, NO_FLAG, P4, "comment")
ENTRY(cuSurfRefSetArray, cuSurfRefSetArray, false, NO_FLAG, P4, "comment")
ENTRY(cuTexObjectCreate, cuTexObjectCreate, true, NO_FLAG, P4, "Successful")
ENTRY(cuTexObjectDestroy, cuTexObjectDestroy, true, NO_FLAG, P4, "Successful")
ENTRY(cuTexObjectGetResourceDesc, cuTexObjectGetResourceDesc, true, NO_FLAG, P4, "Successful")
ENTRY(cuTexObjectGetResourceViewDesc, cuTexObjectGetResourceViewDesc, false, NO_FLAG, P4, "comment")
ENTRY(cuTexObjectGetTextureDesc, cuTexObjectGetTextureDesc, true, NO_FLAG, P4, "Successful")
ENTRY(cuTexRefGetAddress, cuTexRefGetAddress, false, NO_FLAG, P4, "comment")
ENTRY(cuTexRefGetAddressMode, cuTexRefGetAddressMode, true, NO_FLAG, P4, "Successful")
ENTRY(cuTexRefGetArray, cuTexRefGetArray, false, NO_FLAG, P4, "comment")
ENTRY(cuTexRefGetBorderColor, cuTexRefGetBorderColor, false, NO_FLAG, P4, "comment")
ENTRY(cuTexRefGetFilterMode, cuTexRefGetFilterMode, true, NO_FLAG, P4, "Successful")
ENTRY(cuTexRefGetFlags, cuTexRefGetFlags, true, NO_FLAG, P4, "Successful")
ENTRY(cuTexRefGetFormat, cuTexRefGetFormat, false, NO_FLAG, P4, "comment")
ENTRY(cuTexRefGetMaxAnisotropy, cuTexRefGetMaxAnisotropy, false, NO_FLAG, P4, "comment")
ENTRY(cuTexRefGetMipmapFilterMode, cuTexRefGetMipmapFilterMode, false, NO_FLAG, P4, "comment")
ENTRY(cuTexRefGetMipmapLevelBias, cuTexRefGetMipmapLevelBias, false, NO_FLAG, P4, "comment")
ENTRY(cuTexRefGetMipmapLevelClamp, cuTexRefGetMipmapLevelClamp, false, NO_FLAG, P4, "comment")
ENTRY(cuTexRefGetMipmappedArray, cuTexRefGetMipmappedArray, false, NO_FLAG, P4, "comment")
ENTRY(cuTexRefSetAddress, cuTexRefSetAddress_v2, true, NO_FLAG, P4, "Successful")
ENTRY(cuTexRefSetAddress2D, cuTexRefSetAddress2D_v2, true, NO_FLAG, P4, "Successful")
ENTRY(cuTexRefSetAddressMode, cuTexRefSetAddressMode, true, NO_FLAG, P4, "Successful")
ENTRY(cuTexRefSetArray, cuTexRefSetArray, true, NO_FLAG, P4, "Successful")
ENTRY(cuTexRefSetBorderColor, cuTexRefSetBorderColor, false, NO_FLAG, P4, "comment")
ENTRY(cuTexRefSetFilterMode, cuTexRefSetFilterMode, true, NO_FLAG, P4, "Successful")
ENTRY(cuTexRefSetFlags, cuTexRefSetFlags, true, NO_FLAG, P4, "DPCT1074")
ENTRY(cuTexRefSetFormat, cuTexRefSetFormat, true, NO_FLAG, P4, "Successful")
ENTRY(cuTexRefSetMaxAnisotropy, cuTexRefSetMaxAnisotropy, false, NO_FLAG, P4, "comment")
ENTRY(cuTexRefSetMipmapFilterMode, cuTexRefSetMipmapFilterMode, false, NO_FLAG, P4, "comment")
ENTRY(cuTexRefSetMipmapLevelBias, cuTexRefSetMipmapLevelBias, false, NO_FLAG, P4, "comment")
ENTRY(cuTexRefSetMipmapLevelClamp, cuTexRefSetMipmapLevelClamp, false, NO_FLAG, P4, "comment")
ENTRY(cuTexRefSetMipmappedArray, cuTexRefSetMipmappedArray, false, NO_FLAG, P4, "comment")
ENTRY(cuTexRefCreate, cuTexRefCreate, false, NO_FLAG, P4, "comment")
ENTRY(cuTexRefDestroy, cuTexRefDestroy, false, NO_FLAG, P4, "comment")
ENTRY(cuMemAdvise, cuMemAdvise, true, NO_FLAG, P4, "Partial: DPCT1063/DPCT1007")
ENTRY(cuMemPrefetchAsync, cuMemPrefetchAsync, true, NO_FLAG, P4, "Partial: USM only, DPCT1007")
ENTRY(cuMemRangeGetAttribute, cuMemRangeGetAttribute, false, NO_FLAG, P4, "comment")
ENTRY(cuMemRangeGetAttributes, cuMemRangeGetAttributes, false, NO_FLAG, P4, "comment")
ENTRY(cuPointerGetAttribute, cuPointerGetAttribute, false, NO_FLAG, P4, "comment")
ENTRY(cuPointerGetAttributes, cuPointerGetAttributes, false, NO_FLAG, P4, "comment")
ENTRY(cuPointerSetAttribute, cuPointerSetAttribute, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphicsVDPAURegisterOutputSurface, cuGraphicsVDPAURegisterOutputSurface, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphicsVDPAURegisterVideoSurface, cuGraphicsVDPAURegisterVideoSurface, false, NO_FLAG, P4, "comment")
ENTRY(cuVDPAUCtxCreate, cuVDPAUCtxCreate, false, NO_FLAG, P4, "comment")
ENTRY(cuVDPAUGetDevice, cuVDPAUGetDevice, false, NO_FLAG, P4, "comment")
ENTRY(cuDriverGetVersion, cuDriverGetVersion, true, NO_FLAG, P4, "DPCT1043")
ENTRY(cuEventCreateFromEGLSync, cuEventCreateFromEGLSync, false, NO_FLAG, P4, "comment")
ENTRY(cuStreamWaitValue64, cuStreamWaitValue64_v2, false, NO_FLAG, P4, "comment")
ENTRY(cuStreamWriteValue64, cuStreamWriteValue64_v2, false, NO_FLAG, P4, "comment")
ENTRY(cuFuncSetAttribute, cuFuncSetAttribute, false, NO_FLAG, P4, "comment")
ENTRY(cuLaunchCooperativeKernel, cuLaunchCooperativeKernel, false, NO_FLAG, P4, "comment")
ENTRY(cuLaunchCooperativeKernelMultiDevice, cuLaunchCooperativeKernelMultiDevice, false, NO_FLAG, P4, "comment")

// Coopeartive_group migration.
ENTRY(cooperative_groups::coalesced_threads, cooperative_groups::__v1::coalesced_threads, true, NO_FLAG, P4, "Successful/DPCT1119")
ENTRY(cooperative_groups::thread_rank, cooperative_groups::__v1::thread_rank, true, NO_FLAG, P4, "Successful")
ENTRY(cooperative_groups::this_thread, cooperative_groups::__v1::this_thread, false, NO_FLAG, P4, "comment")
ENTRY(cooperative_groups::this_grid, cooperative_groups::__v1::this_grid, true, NO_FLAG, P4, "comment")
ENTRY(cooperative_groups::this_multi_grid, cooperative_groups::__v1::this_multi_grid, false, NO_FLAG, P4, "comment")
ENTRY(cooperative_groups::this_thread_block, cooperative_groups::__v1::this_thread_block, true, NO_FLAG, P4, "Successful")
ENTRY(cooperative_groups::experimental::this_thread_block, cooperative_groups::__v1::experimental::this_thread_block, true, NO_FLAG, P4, "Successful")
ENTRY(cooperative_groups::tiled_partition, cooperative_groups::__v1::tiled_partition, true, NO_FLAG, P4, "If size equals to 32, tool will migrate it, else warning is emitted.")
ENTRY(cooperative_groups::experimental::tiled_partition, cooperative_groups::__v1::experimental::tiled_partition, true, NO_FLAG, P4, "If size equals to 32, tool will migrate it, else warning is emitted.")
ENTRY(cooperative_groups::labeled_partition, cooperative_groups::__v1::labeled_partition, false, NO_FLAG, P4, "comment")
ENTRY(cooperative_groups::binary_partition, cooperative_groups::__v1::binary_partition, false, NO_FLAG, P4, "comment")
ENTRY(cooperative_groups::sync, cooperative_groups::__v1::sync, true, NO_FLAG, P4, "comment")
ENTRY(cooperative_groups::memcpy_async, cooperative_groups::__v1::memcpy_async, false, NO_FLAG, P4, "comment")
ENTRY(cooperative_groups::wait, cooperative_groups::__v1::wait, false, NO_FLAG, P4, "comment")
ENTRY(cooperative_groups::wait_prior, cooperative_groups::__v1::wait_prior, false, NO_FLAG, P4, "comment")
ENTRY(cooperative_groups::reduce, cooperative_groups::__v1::reduce, true, NO_FLAG, P4, "comment")
ENTRY(cooperative_groups::reduce_update_async, cooperative_groups::__v1::reduce_update_async, false, NO_FLAG, P4, "comment")
ENTRY(cooperative_groups::experimental::reduce_update_async, cooperative_groups::__v1::experimental::reduce_update_async, false, NO_FLAG, P4, "comment")
ENTRY(cooperative_groups::reduce_store_async, cooperative_groups::__v1::reduce_store_async, false, NO_FLAG, P4, "comment")
ENTRY(cooperative_groups::experimental::reduce_store_async, cooperative_groups::__v1::experimental::reduce_store_async, false, NO_FLAG, P4, "comment")
ENTRY(cooperative_groups::plus, cooperative_groups::__v1::plus, true, NO_FLAG, P4, "Successful")
ENTRY(cooperative_groups::less, cooperative_groups::__v1::less, true, NO_FLAG, P4, "Successful")
ENTRY(cooperative_groups::greater, cooperative_groups::__v1::greater, true, NO_FLAG, P4, "Successful")
ENTRY(cooperative_groups::bit_and, cooperative_groups::__v1::bit_and, true, NO_FLAG, P4, "Successful")
ENTRY(cooperative_groups::bit_or, cooperative_groups::__v1::bit_or, true, NO_FLAG, P4, "Successful")
ENTRY(cooperative_groups::bit_xor, cooperative_groups::__v1::bit_xor, true, NO_FLAG, P4, "Successful")

ENTRY(cooperative_groups::inclusive_scan, cooperative_groups::__v1::inclusive_scan, true, NO_FLAG, P4, "Partial: the tool supports when group size equals to 32, else DPCT1007.")
ENTRY(cooperative_groups::exclusive_scan, cooperative_groups::__v1::exclusive_scan, true, NO_FLAG, P4, "Partial: the tool supports when group size equals to 32, else DPCT1007.")
ENTRY(cooperative_groups::experimental::inclusive_scan_update, cooperative_groups::__v1::experimental::inclusive_scan_update, false, NO_FLAG, P4, "comment")
ENTRY(cooperative_groups::inclusive_scan_update, cooperative_groups::__v1::inclusive_scan_update, false, NO_FLAG, P4, "comment")
ENTRY(cooperative_groups::experimental::exclusive_scan_update, cooperative_groups::__v1::experimental::exclusive_scan_update, false, NO_FLAG, P4, "comment")
ENTRY(cooperative_groups::exclusive_scan_update, cooperative_groups::__v1::exclusive_scan_update, false, NO_FLAG, P4, "comment")
ENTRY(cooperative_groups::invoke_one, cooperative_groups::__v1::invoke_one, false, NO_FLAG, P4, "comment")
ENTRY(cooperative_groups::invoke_one_broadcast, cooperative_groups::__v1::invoke_one_broadcast, false, NO_FLAG, P4, "comment")

ENTRY_MEMBER_FUNCTION(cooperative_groups::thread_group, cooperative_groups::__v1::thread_group, size, size, true, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::thread_group, cooperative_groups::__v1::thread_group, num_threads, num_threads, true, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::thread_group, cooperative_groups::__v1::thread_group, thread_rank, thread_rank, true, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::thread_group, cooperative_groups::__v1::thread_group, sync, sync, true, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::thread_group, cooperative_groups::__v1::thread_group, get_type, get_type, true, NO_FLAG, P4, "Comment")

ENTRY_MEMBER_FUNCTION(cooperative_groups::thread_block, cooperative_groups::__v1::thread_block, sync, sync, true, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::thread_block, cooperative_groups::__v1::thread_block, thread_rank, thread_rank, true, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::thread_block, cooperative_groups::__v1::thread_block, group_index, group_index, true, NO_FLAG, P4, "Successful")
ENTRY_MEMBER_FUNCTION(cooperative_groups::thread_block, cooperative_groups::__v1::thread_block, thread_index, thread_index, true, NO_FLAG, P4, "Successful")
ENTRY_MEMBER_FUNCTION(cooperative_groups::thread_block, cooperative_groups::__v1::thread_block, dim_threads, dim_threads, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::thread_block, cooperative_groups::__v1::thread_block, num_threads, num_threads, true, NO_FLAG, P4, "Successful")
ENTRY_MEMBER_FUNCTION(cooperative_groups::thread_block, cooperative_groups::__v1::thread_block, size, size, true, NO_FLAG, P4, "Successful")
ENTRY_MEMBER_FUNCTION(cooperative_groups::thread_block, cooperative_groups::__v1::thread_block, group_dim, group_dim, false, NO_FLAG, P4, "Comment")

ENTRY_MEMBER_FUNCTION(cooperative_groups::cluster_group, cooperative_groups::__v1::cluster_group, sync, sync, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::cluster_group, cooperative_groups::__v1::cluster_group, barrier_arrive, barrier_arrive, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::cluster_group, cooperative_groups::__v1::cluster_group, barrier_wait, barrier_wait, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::cluster_group, cooperative_groups::__v1::cluster_group, thread_rank, thread_rank, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::cluster_group, cooperative_groups::__v1::cluster_group, block_rank, block_rank, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::cluster_group, cooperative_groups::__v1::cluster_group, num_threads, num_threads, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::cluster_group, cooperative_groups::__v1::cluster_group, num_blocks, num_blocks, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::cluster_group, cooperative_groups::__v1::cluster_group, dim_threads, dim_threads, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::cluster_group, cooperative_groups::__v1::cluster_group, dim_blocks, dim_blocks, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::cluster_group, cooperative_groups::__v1::cluster_group, block_index, block_index, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::cluster_group, cooperative_groups::__v1::cluster_group, query_shared_rank, query_shared_rank, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::cluster_group, cooperative_groups::__v1::cluster_group, map_shared_rank, map_shared_rank, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::cluster_group, cooperative_groups::__v1::cluster_group, size, size, false, NO_FLAG, P4, "Comment")

ENTRY_MEMBER_FUNCTION(cooperative_groups::grid_group, cooperative_groups::__v1::grid_group, is_valid, is_valid, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::grid_group, cooperative_groups::__v1::grid_group, sync, sync, true, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::grid_group, cooperative_groups::__v1::grid_group, thread_rank, thread_rank, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::grid_group, cooperative_groups::__v1::grid_group, block_rank, block_rank, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::grid_group, cooperative_groups::__v1::grid_group, cluster_rank, cluster_rank, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::grid_group, cooperative_groups::__v1::grid_group, num_threads, num_threads, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::grid_group, cooperative_groups::__v1::grid_group, num_blocks, num_blocks, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::grid_group, cooperative_groups::__v1::grid_group, num_clusters, num_clusters, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::grid_group, cooperative_groups::__v1::grid_group, dim_blocks, dim_blocks, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::grid_group, cooperative_groups::__v1::grid_group, dim_clusters, dim_clusters, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::grid_group, cooperative_groups::__v1::grid_group, block_index, block_index, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::grid_group, cooperative_groups::__v1::grid_group, cluster_index, cluster_index, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::grid_group, cooperative_groups::__v1::grid_group, size, size, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::grid_group, cooperative_groups::__v1::grid_group, group_dim, group_dim, false, NO_FLAG, P4, "Comment")

// The multi_grid_group was deprecated in CUDA 11.3
ENTRY_MEMBER_FUNCTION(cooperative_groups::multi_grid_group, cooperative_groups::__v1::multi_grid_group, is_valid, is_valid, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::multi_grid_group, cooperative_groups::__v1::multi_grid_group, sync, sync, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::multi_grid_group, cooperative_groups::__v1::multi_grid_group, num_threads, num_threads, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::multi_grid_group, cooperative_groups::__v1::multi_grid_group, thread_rank, thread_rank, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::multi_grid_group, cooperative_groups::__v1::multi_grid_group, grid_rank, grid_rank, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::multi_grid_group, cooperative_groups::__v1::multi_grid_group, num_grids, num_grids, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::multi_grid_group, cooperative_groups::__v1::multi_grid_group, size, size, false, NO_FLAG, P4, "Comment")

ENTRY_MEMBER_FUNCTION(cooperative_groups::thread_block_tile, cooperative_groups::__v1::thread_block_tile, sync, sync, true, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::thread_block_tile, cooperative_groups::__v1::thread_block_tile, num_threads, num_threads, true, NO_FLAG, P4, "Successful")
ENTRY_MEMBER_FUNCTION(cooperative_groups::thread_block_tile, cooperative_groups::__v1::thread_block_tile, thread_rank, thread_rank, true, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::thread_block_tile, cooperative_groups::__v1::thread_block_tile, meta_group_size, meta_group_size, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::thread_block_tile, cooperative_groups::__v1::thread_block_tile, meta_group_rank, meta_group_rank, true, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::thread_block_tile, cooperative_groups::__v1::thread_block_tile, shfl, shfl, true, NO_FLAG, P4, "DPCT1119")
ENTRY_MEMBER_FUNCTION(cooperative_groups::thread_block_tile, cooperative_groups::__v1::thread_block_tile, shfl_up, shfl_up, true, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::thread_block_tile, cooperative_groups::__v1::thread_block_tile, shfl_down, shfl_down, true, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::thread_block_tile, cooperative_groups::__v1::thread_block_tile, shfl_xor, shfl_xor, true, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::thread_block_tile, cooperative_groups::__v1::thread_block_tile, any, any, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::thread_block_tile, cooperative_groups::__v1::thread_block_tile, all, all, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::thread_block_tile, cooperative_groups::__v1::thread_block_tile, ballot, ballot, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::thread_block_tile, cooperative_groups::__v1::thread_block_tile, match_any, match_any, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::thread_block_tile, cooperative_groups::__v1::thread_block_tile, match_all, match_all, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::thread_block_tile, cooperative_groups::__v1::thread_block_tile, size, size, true, NO_FLAG, P4, "Comment")

ENTRY_MEMBER_FUNCTION(cooperative_groups::coalesced_group, cooperative_groups::__v1::coalesced_group, sync, sync, true, NO_FLAG, P4, "Successful/DPCT1119")
ENTRY_MEMBER_FUNCTION(cooperative_groups::coalesced_group, cooperative_groups::__v1::coalesced_group, num_threads, num_threads, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::coalesced_group, cooperative_groups::__v1::coalesced_group, thread_rank, thread_rank, true, NO_FLAG, P4, "Successful/DPCT1119")
ENTRY_MEMBER_FUNCTION(cooperative_groups::coalesced_group, cooperative_groups::__v1::coalesced_group, meta_group_size, meta_group_size, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::coalesced_group, cooperative_groups::__v1::coalesced_group, meta_group_rank, meta_group_rank, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::coalesced_group, cooperative_groups::__v1::coalesced_group, shfl, shfl, true, NO_FLAG, P4, "Successful/DPCT1119")
ENTRY_MEMBER_FUNCTION(cooperative_groups::coalesced_group, cooperative_groups::__v1::coalesced_group, shfl_up, shfl_up, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::coalesced_group, cooperative_groups::__v1::coalesced_group, shfl_down, shfl_down, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::coalesced_group, cooperative_groups::__v1::coalesced_group, any, any, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::coalesced_group, cooperative_groups::__v1::coalesced_group, all, all, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::coalesced_group, cooperative_groups::__v1::coalesced_group, ballot, ballot, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::coalesced_group, cooperative_groups::__v1::coalesced_group, match_any, match_any, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::coalesced_group, cooperative_groups::__v1::coalesced_group, match_all, match_all, false, NO_FLAG, P4, "Comment")
ENTRY_MEMBER_FUNCTION(cooperative_groups::coalesced_group, cooperative_groups::__v1::coalesced_group, size, size, true, NO_FLAG, P4, "Successful/DPCT1119")

// nvrtc APIs
ENTRY(nvrtcGetErrorString, nvrtcGetErrorString, false, NO_FLAG, P4, "comment")
ENTRY(nvrtcVersion, nvrtcVersion, false, NO_FLAG, P4, "comment")
ENTRY(nvrtcCreateProgram, nvrtcCreateProgram, false, NO_FLAG, P4, "comment")
ENTRY(nvrtcDestroyProgram, nvrtcDestroyProgram, false, NO_FLAG, P4, "comment")
ENTRY(nvrtcCompileProgram, nvrtcCompileProgram, false, NO_FLAG, P4, "comment")
ENTRY(nvrtcGetPTXSize, nvrtcGetPTXSize, false, NO_FLAG, P4, "comment")
ENTRY(nvrtcGetPTX, nvrtcGetPTX, false, NO_FLAG, P4, "comment")
ENTRY(nvrtcGetProgramLogSize, nvrtcGetProgramLogSize, false, NO_FLAG, P4, "comment")
ENTRY(nvrtcGetProgramLog, nvrtcGetProgramLog, false, NO_FLAG, P4, "comment")
ENTRY(nvrtcAddNameExpression, nvrtcAddNameExpression, false, NO_FLAG, P4, "comment")
ENTRY(nvrtcGetLoweredName, nvrtcGetLoweredName, false, NO_FLAG, P4, "comment")
ENTRY(nvrtcGetNumSupportedArchs, nvrtcGetNumSupportedArchs, false, NO_FLAG, P4, "comment")
ENTRY(nvrtcGetSupportedArchs, nvrtcGetSupportedArchs, false, NO_FLAG, P4, "comment")
ENTRY(nvrtcGetCUBIN, nvrtcGetCUBIN, false, NO_FLAG, P4, "comment")
ENTRY(nvrtcGetCUBINSize, nvrtcGetCUBINSize, false, NO_FLAG, P4, "comment")
ENTRY(nvrtcGetNVVM, nvrtcGetNVVM, false, NO_FLAG, P4, "comment")
ENTRY(nvrtcGetNVVMSize, nvrtcGetNVVMSize, false, NO_FLAG, P4, "comment")
ENTRY(nvrtcGetTypeName, nvrtcGetTypeName, false, NO_FLAG, P4, "comment")
ENTRY(nvrtcGetLTOIR, nvrtcGetLTOIR, false, NO_FLAG, P4, "comment")
ENTRY(nvrtcGetLTOIRSize, nvrtcGetLTOIRSize, false, NO_FLAG, P4, "comment")
ENTRY(nvrtcGetOptiXIR, nvrtcGetOptiXIR, false, NO_FLAG, P4, "comment")
ENTRY(nvrtcGetOptiXIRSize, nvrtcGetOptiXIRSize, false, NO_FLAG, P4, "comment")

// crt wrapper API
ENTRY(mul24, mul24, true, NO_FLAG, P0, "Successful")
ENTRY(saturate, saturate, true, NO_FLAG, P0, "Successful")

//add more driver APIs
ENTRY(cuDestroyExternalMemory, cuDestroyExternalMemory, false, NO_FLAG, P4, "comment")
ENTRY(cuDestroyExternalSemaphore, cuDestroyExternalSemaphore, false, NO_FLAG, P4, "comment")
ENTRY(cuDeviceGetLuid, cuDeviceGetLuid, false, NO_FLAG, P4, "comment")
ENTRY(cuDeviceGetNvSciSyncAttributes, cuDeviceGetNvSciSyncAttributes, false, NO_FLAG, P4, "comment")
ENTRY(cuDeviceGetUuid, cuDeviceGetUuid_v2, true, NO_FLAG, P4, "DPCT1090")
ENTRY(cuExternalMemoryGetMappedBuffer, cuExternalMemoryGetMappedBuffer, false, NO_FLAG, P4, "comment")
ENTRY(cuExternalMemoryGetMappedMipmappedArray, cuExternalMemoryGetMappedMipmappedArray, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphAddChildGraphNode, cuGraphAddChildGraphNode, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphAddDependencies, cuGraphAddDependencies, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphAddEmptyNode, cuGraphAddEmptyNode, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphAddHostNode, cuGraphAddHostNode, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphAddKernelNode, cuGraphAddKernelNode, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphAddMemcpyNode, cuGraphAddMemcpyNode, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphAddMemsetNode, cuGraphAddMemsetNode, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphChildGraphNodeGetGraph, cuGraphChildGraphNodeGetGraph, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphClone, cuGraphClone, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphCreate, cuGraphCreate, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphDestroy, cuGraphDestroy, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphDestroyNode, cuGraphDestroyNode, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphExecDestroy, cuGraphExecDestroy, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphExecHostNodeSetParams, cuGraphExecHostNodeSetParams, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphExecKernelNodeSetParams, cuGraphExecKernelNodeSetParams, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphExecMemcpyNodeSetParams, cuGraphExecMemcpyNodeSetParams, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphExecMemsetNodeSetParams, cuGraphExecMemsetNodeSetParams, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphExecUpdate, cuGraphExecUpdate, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphGetEdges, cuGraphGetEdges, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphGetNodes, cuGraphGetNodes, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphGetRootNodes, cuGraphGetRootNodes, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphHostNodeGetParams, cuGraphHostNodeGetParams, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphHostNodeSetParams, cuGraphHostNodeSetParams, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphInstantiate, cuGraphInstantiate_v2, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphKernelNodeGetParams, cuGraphKernelNodeGetParams, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphKernelNodeSetParams, cuGraphKernelNodeSetParams, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphLaunch, cuGraphLaunch, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphMemcpyNodeGetParams, cuGraphMemcpyNodeGetParams, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphMemcpyNodeSetParams, cuGraphMemcpyNodeSetParams, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphMemsetNodeGetParams, cuGraphMemsetNodeGetParams, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphMemsetNodeSetParams, cuGraphMemsetNodeSetParams, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphNodeFindInClone, cuGraphNodeFindInClone, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphNodeGetDependencies, cuGraphNodeGetDependencies, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphNodeGetDependentNodes, cuGraphNodeGetDependentNodes, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphNodeGetType, cuGraphNodeGetType, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphRemoveDependencies, cuGraphRemoveDependencies, false, NO_FLAG, P4, "comment")
ENTRY(cuImportExternalMemory, cuImportExternalMemory, false, NO_FLAG, P4, "comment")
ENTRY(cuImportExternalSemaphore, cuImportExternalSemaphore, false, NO_FLAG, P4, "comment")
ENTRY(cuLaunchHostFunc, cuLaunchHostFunc, false, NO_FLAG, P4, "comment")
ENTRY(cuMemAddressFree, cuMemAddressFree, false, NO_FLAG, P4, "comment")
ENTRY(cuMemAddressReserve, cuMemAddressReserve, false, NO_FLAG, P4, "comment")
ENTRY(cuMemCreate, cuMemCreate, false, NO_FLAG, P4, "comment")
ENTRY(cuMemExportToShareableHandle, cuMemExportToShareableHandle, false, NO_FLAG, P4, "comment")
ENTRY(cuSignalExternalSemaphoresAsync, cuSignalExternalSemaphoresAsync, false, NO_FLAG, P4, "comment")
ENTRY(cuStreamBeginCapture, cuStreamBeginCapture_v2, false, NO_FLAG, P4, "comment")
ENTRY(cuStreamBeginCapture_ptsz, cuStreamBeginCapture_ptsz, false, NO_FLAG, P4, "comment")
ENTRY(cuStreamEndCapture, cuStreamEndCapture, false, NO_FLAG, P4, "comment")
ENTRY(cuStreamGetCaptureInfo, cuStreamGetCaptureInfo_v2, false, NO_FLAG, P7, "comment")
ENTRY(cuStreamIsCapturing, cuStreamIsCapturing, false, NO_FLAG, P4, "comment")
ENTRY(cuThreadExchangeStreamCaptureMode, cuThreadExchangeStreamCaptureMode, false, NO_FLAG, P4, "comment")
ENTRY(cuWaitExternalSemaphoresAsync, cuWaitExternalSemaphoresAsync, false, NO_FLAG, P4, "comment")

// add driver APIs for v11.7
ENTRY(cuArrayGetMemoryRequirements, cuArrayGetMemoryRequirements, false, NO_FLAG, P4, "comment")
ENTRY(cuArrayGetPlane, cuArrayGetPlane, false, NO_FLAG, P7, "comment")
ENTRY(cuArrayGetSparseProperties, cuArrayGetSparseProperties, false, NO_FLAG, P7, "comment")
ENTRY(cuCtxGetExecAffinity, cuCtxGetExecAffinity, false, NO_FLAG, P7, "comment")
ENTRY(cuCtxResetPersistingL2Cache, cuCtxResetPersistingL2Cache, true, NO_FLAG, P7, "DPCT1026/DPCT1027")
ENTRY(cuDeviceGetDefaultMemPool, cuDeviceGetDefaultMemPool, false, NO_FLAG, P7, "comment")
ENTRY(cuDeviceGetExecAffinitySupport, cuDeviceGetExecAffinitySupport, false, NO_FLAG, P4, "comment")
ENTRY(cuDeviceGetGraphMemAttribute, cuDeviceGetGraphMemAttribute, false, NO_FLAG, P4, "comment")
ENTRY(cuDeviceGetMemPool, cuDeviceGetMemPool, false, NO_FLAG, P4, "comment")
ENTRY(cuDeviceGetTexture1DLinearMaxWidth, cuDeviceGetTexture1DLinearMaxWidth, false, NO_FLAG, P7, "comment")
ENTRY(cuDeviceGraphMemTrim, cuDeviceGraphMemTrim, false, NO_FLAG, P4, "comment")
ENTRY(cuDeviceSetGraphMemAttribute, cuDeviceSetGraphMemAttribute, false, NO_FLAG, P4, "comment")
ENTRY(cuDeviceSetMemPool, cuDeviceSetMemPool, false, NO_FLAG, P4, "comment")
ENTRY(cuEventDestroy, cuEventDestroy, false, NO_FLAG, P4, "comment")
ENTRY(cuEventRecordWithFlags, cuEventRecordWithFlags, false, NO_FLAG, P7, "comment")
ENTRY(cuFlushGPUDirectRDMAWrites, cuFlushGPUDirectRDMAWrites, false, NO_FLAG, P7, "comment")
ENTRY(cuFuncGetModule, cuFuncGetModule, false, NO_FLAG, P7, "comment")
ENTRY(cuGetProcAddress, cuGetProcAddress, false, NO_FLAG, P7, "comment")
ENTRY(cuGraphAddBatchMemOpNode, cuGraphAddBatchMemOpNode, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphAddEventRecordNode, cuGraphAddEventRecordNode, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphAddEventWaitNode, cuGraphAddEventWaitNode, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphAddExternalSemaphoresSignalNode, cuGraphAddExternalSemaphoresSignalNode, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphAddExternalSemaphoresWaitNode, cuGraphAddExternalSemaphoresWaitNode, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphAddMemAllocNode, cuGraphAddMemAllocNode, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphAddMemFreeNode, cuGraphAddMemFreeNode, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphBatchMemOpNodeGetParams, cuGraphBatchMemOpNodeGetParams, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphBatchMemOpNodeSetParams, cuGraphBatchMemOpNodeSetParams, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphDebugDotPrint, cuGraphDebugDotPrint, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphEventRecordNodeGetEvent, cuGraphEventRecordNodeGetEvent, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphEventRecordNodeSetEvent, cuGraphEventRecordNodeSetEvent, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphEventWaitNodeGetEvent, cuGraphEventWaitNodeGetEvent, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphEventWaitNodeSetEvent, cuGraphEventWaitNodeSetEvent, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphExecBatchMemOpNodeSetParams, cuGraphExecBatchMemOpNodeSetParams, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphExecChildGraphNodeSetParams, cuGraphExecChildGraphNodeSetParams, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphExecEventRecordNodeSetEvent, cuGraphExecEventRecordNodeSetEvent, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphExecEventWaitNodeSetEvent, cuGraphExecEventWaitNodeSetEvent, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphExecExternalSemaphoresSignalNodeSetParams, cuGraphExecExternalSemaphoresSignalNodeSetParams, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphExecExternalSemaphoresWaitNodeSetParams, cuGraphExecExternalSemaphoresWaitNodeSetParams, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphExternalSemaphoresSignalNodeGetParams, cuGraphExternalSemaphoresSignalNodeGetParams, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphExternalSemaphoresSignalNodeSetParams, cuGraphExternalSemaphoresSignalNodeSetParams, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphExternalSemaphoresWaitNodeGetParams, cuGraphExternalSemaphoresWaitNodeGetParams, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphExternalSemaphoresWaitNodeSetParams, cuGraphExternalSemaphoresWaitNodeSetParams, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphInstantiateWithFlags, cuGraphInstantiateWithFlags, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphKernelNodeCopyAttributes, cuGraphKernelNodeCopyAttributes, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphKernelNodeGetAttribute, cuGraphKernelNodeGetAttribute, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphKernelNodeSetAttribute, cuGraphKernelNodeSetAttribute, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphMemAllocNodeGetParams, cuGraphMemAllocNodeGetParams, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphMemFreeNodeGetParams, cuGraphMemFreeNodeGetParams, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphNodeGetEnabled, cuGraphNodeGetEnabled, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphNodeSetEnabled, cuGraphNodeSetEnabled, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphReleaseUserObject, cuGraphReleaseUserObject, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphRetainUserObject, cuGraphRetainUserObject, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphUpload, cuGraphUpload, false, NO_FLAG, P4, "comment")
ENTRY(cuMemAllocAsync, cuMemAllocAsync, false, NO_FLAG, P7, "comment")
ENTRY(cuMemAllocFromPoolAsync, cuMemAllocFromPoolAsync, false, NO_FLAG, P7, "comment")
ENTRY(cuMemAllocHost, cuMemAllocHost, false, NO_FLAG, P1, "comment")
ENTRY(cuMemFreeAsync, cuMemFreeAsync, false, NO_FLAG, P7, "comment")
ENTRY(cuMemGetAccess, cuMemGetAccess, false, NO_FLAG, P4, "comment")
ENTRY(cuMemGetAddressRange, cuMemGetAddressRange, false, NO_FLAG, P4, "comment")
ENTRY(cuMemGetAllocationGranularity, cuMemGetAllocationGranularity, false, NO_FLAG, P4, "comment")
ENTRY(cuMemGetAllocationPropertiesFromHandle, cuMemGetAllocationPropertiesFromHandle, false, NO_FLAG, P4, "comment")
ENTRY(cuMemGetHandleForAddressRange, cuMemGetHandleForAddressRange, false, NO_FLAG, P4, "comment")
ENTRY(cuMemImportFromShareableHandle, cuMemImportFromShareableHandle, false, NO_FLAG, P4, "comment")
ENTRY(cuMemMap, cuMemMap, false, NO_FLAG, P4, "comment")
ENTRY(cuMemMapArrayAsync, cuMemMapArrayAsync, false, NO_FLAG, P7, "comment")
ENTRY(cuMemPoolCreate, cuMemPoolCreate, false, NO_FLAG, P4, "comment")
ENTRY(cuMemPoolDestroy, cuMemPoolDestroy, false, NO_FLAG, P4, "comment")
ENTRY(cuMemPoolExportPointer, cuMemPoolExportPointer, false, NO_FLAG, P4, "comment")
ENTRY(cuMemPoolExportToShareableHandle, cuMemPoolExportToShareableHandle, false, NO_FLAG, P7, "comment")
ENTRY(cuMemPoolGetAccess, cuMemPoolGetAccess, false, NO_FLAG, P4, "comment")
ENTRY(cuMemPoolGetAttribute, cuMemPoolGetAttribute, false, NO_FLAG, P4, "comment")
ENTRY(cuMemPoolImportFromShareableHandle, cuMemPoolImportFromShareableHandle, false, NO_FLAG, P7, "comment")
ENTRY(cuMemPoolImportPointer, cuMemPoolImportPointer, false, NO_FLAG, P4, "comment")
ENTRY(cuMemPoolSetAccess, cuMemPoolSetAccess, false, NO_FLAG, P4, "comment")
ENTRY(cuMemPoolSetAttribute, cuMemPoolSetAttribute, false, NO_FLAG, P4, "comment")
ENTRY(cuMemPoolTrimTo, cuMemPoolTrimTo, false, NO_FLAG, P4, "comment")
ENTRY(cuMemRelease, cuMemRelease, false, NO_FLAG, P4, "comment")
ENTRY(cuMemRetainAllocationHandle, cuMemRetainAllocationHandle, false, NO_FLAG, P7, "comment")
ENTRY(cuMemSetAccess, cuMemSetAccess, false, NO_FLAG, P4, "comment")
ENTRY(cuMemUnmap, cuMemUnmap, false, NO_FLAG, P4, "comment")
ENTRY(cuMipmappedArrayGetMemoryRequirements, cuMipmappedArrayGetMemoryRequirements, false, NO_FLAG, P4, "comment")
ENTRY(cuMipmappedArrayGetSparseProperties, cuMipmappedArrayGetSparseProperties, false, NO_FLAG, P7, "comment")
ENTRY(cuModuleGetLoadingMode, cuModuleGetLoadingMode, false, NO_FLAG, P4, "comment")
ENTRY(cuOccupancyAvailableDynamicSMemPerBlock, cuOccupancyAvailableDynamicSMemPerBlock, false, NO_FLAG, P4, "comment")
ENTRY(cuStreamCopyAttributes, cuStreamCopyAttributes, false, NO_FLAG, P7, "comment")
ENTRY(cuStreamGetAttribute, cuStreamGetAttribute, false, NO_FLAG, P7, "comment")
ENTRY(cuStreamGetCtx, cuStreamGetCtx, false, NO_FLAG, P4, "comment")
ENTRY(cuStreamSetAttribute, cuStreamSetAttribute, false, NO_FLAG, P7, "comment")
ENTRY(cuStreamUpdateCaptureDependencies, cuStreamUpdateCaptureDependencies, false, NO_FLAG, P7, "comment")
ENTRY(cuUserObjectCreate, cuUserObjectCreate, false, NO_FLAG, P4, "comment")
ENTRY(cuUserObjectRelease, cuUserObjectRelease, false, NO_FLAG, P4, "comment")
ENTRY(cuUserObjectRetain, cuUserObjectRetain, false, NO_FLAG, P4, "comment")

// add driver APIs for v12.0
ENTRY(cuCtxGetId, cuCtxGetId, false, NO_FLAG, P4, "comment")
ENTRY(cuKernelGetAttribute, cuKernelGetAttribute, false, NO_FLAG, P4, "comment")
ENTRY(cuKernelGetFunction, cuKernelGetFunction, false, NO_FLAG, P4, "comment")
ENTRY(cuKernelSetAttribute, cuKernelSetAttribute, false, NO_FLAG, P4, "comment")
ENTRY(cuKernelSetCacheConfig, cuKernelSetCacheConfig, false, NO_FLAG, P4, "comment")
ENTRY(cuLibraryGetGlobal, cuLibraryGetGlobal, false, NO_FLAG, P4, "comment")
ENTRY(cuLibraryGetKernel, cuLibraryGetKernel, false, NO_FLAG, P4, "comment")
ENTRY(cuLibraryGetManaged, cuLibraryGetManaged, false, NO_FLAG, P4, "comment")
ENTRY(cuLibraryGetModule, cuLibraryGetModule, false, NO_FLAG, P4, "comment")
ENTRY(cuLibraryGetUnifiedFunction, cuLibraryGetUnifiedFunction, false, NO_FLAG, P4, "comment")
ENTRY(cuLibraryLoadData, cuLibraryLoadData, false, NO_FLAG, P4, "comment")
ENTRY(cuLibraryLoadFromFile, cuLibraryLoadFromFile, false, NO_FLAG, P4, "comment")
ENTRY(cuLibraryUnload, cuLibraryUnload, false, NO_FLAG, P4, "comment")
ENTRY(cuLaunchKernelEx, cuLaunchKernelEx, false, NO_FLAG, P4, "comment")
ENTRY(cuOccupancyMaxActiveClusters, cuOccupancyMaxActiveClusters, false, NO_FLAG, P4, "comment")
ENTRY(cuOccupancyMaxPotentialClusterSize, cuOccupancyMaxPotentialClusterSize, false, NO_FLAG, P4, "comment")
ENTRY(cuTensorMapEncodeIm2col, cuTensorMapEncodeIm2col, false, NO_FLAG, P4, "comment")
ENTRY(cuTensorMapEncodeTiled, cuTensorMapEncodeTiled, false, NO_FLAG, P4, "comment")
ENTRY(cuTensorMapReplaceAddress, cuTensorMapReplaceAddress, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphInstantiateWithParams, cuGraphInstantiateWithParams, false, NO_FLAG, P4, "comment")
ENTRY(cuStreamGetId, cuStreamGetId, false, NO_FLAG, P4, "comment")

ENTRY(cuCabs, cuCabs, true, NO_FLAG, P4, "comment")
ENTRY(cuCabsf, cuCabsf, true, NO_FLAG, P4, "comment")
ENTRY(cuCadd, cuCadd, true, NO_FLAG, P4, "comment")
ENTRY(cuCaddf, cuCaddf, true, NO_FLAG, P4, "comment")
ENTRY(cuCdiv, cuCdiv, true, NO_FLAG, P4, "comment")
ENTRY(cuCdivf, cuCdivf, true, NO_FLAG, P4, "comment")
ENTRY(cuCfma, cuCfma, true, NO_FLAG, P4, "comment")
ENTRY(cuCfmaf, cuCfmaf, true, NO_FLAG, P4, "comment")
ENTRY(cuCimag, cuCimag, true, NO_FLAG, P4, "comment")
ENTRY(cuCimagf, cuCimagf, true, NO_FLAG, P4, "comment")
ENTRY(cuCmul, cuCmul, true, NO_FLAG, P4, "comment")
ENTRY(cuCmulf, cuCmulf, true, NO_FLAG, P4, "comment")
ENTRY(cuComplexDoubleToFloat, cuComplexDoubleToFloat, true, NO_FLAG, P4, "Successful")
ENTRY(cuComplexFloatToDouble, cuComplexFloatToDouble, true, NO_FLAG, P4, "Successful")
ENTRY(cuConj, cuConj, true, NO_FLAG, P4, "comment")
ENTRY(cuConjf, cuConjf, true, NO_FLAG, P4, "comment")
ENTRY(cuCreal, cuCreal, true, NO_FLAG, P4, "comment")
ENTRY(cuCrealf, cuCrealf, true, NO_FLAG, P4, "comment")
ENTRY(cuCsub, cuCsub, true, NO_FLAG, P4, "comment")
ENTRY(cuCsubf, cuCsubf, true, NO_FLAG, P4, "comment")
ENTRY(make_cuComplex, make_cuComplex, true, NO_FLAG, P4, "comment")
ENTRY(make_cuDoubleComplex, make_cuDoubleComplex, true, NO_FLAG, P4, "comment")
ENTRY(make_cuFloatComplex, make_cuFloatComplex, true, NO_FLAG, P4, "comment")
ENTRY(__assert_fail, __assert_fail, true, NO_FLAG, P4, "Successful")
ENTRY(__assertfail, __assertfail, true, NO_FLAG, P4, "Successful")

// add driver APIs for v12.2
// Multicast Object Management
ENTRY(cuMulticastAddDevice, cuMulticastAddDevice, false, NO_FLAG, P4, "comment")
ENTRY(cuMulticastBindAddr, cuMulticastBindAddr, false, NO_FLAG, P4, "comment")
ENTRY(cuMulticastBindMem, cuMulticastBindMem, false, NO_FLAG, P4, "comment")
ENTRY(cuMulticastCreate, cuMulticastCreate, false, NO_FLAG, P4, "comment")
ENTRY(cuMulticastGetGranularity, cuMulticastGetGranularity, false, NO_FLAG, P4, "comment")
ENTRY(cuMulticastUnbind, cuMulticastUnbind, false, NO_FLAG, P4, "comment")

ENTRY(cuGraphAddNode, cuGraphAddNode, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphExecGetFlags, cuGraphExecGetFlags, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphExecNodeSetParams, cuGraphExecNodeSetParams, false, NO_FLAG, P4, "comment")
ENTRY(cuGraphNodeSetParams, cuGraphNodeSetParams, false, NO_FLAG, P4, "comment")

// Coredump Attributes Control API
ENTRY(cuCoredumpGetAttribute, cuCoredumpGetAttribute, false, NO_FLAG, P4, "comment")
ENTRY(cuCoredumpGetAttributeGlobal, cuCoredumpGetAttributeGlobal, false, NO_FLAG, P4, "comment")
ENTRY(cuCoredumpSetAttribute, cuCoredumpSetAttribute, false, NO_FLAG, P4, "comment")
ENTRY(cuCoredumpSetAttributeGlobal, cuCoredumpSetAttributeGlobal, false, NO_FLAG, P4, "comment")
