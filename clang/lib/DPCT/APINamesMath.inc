//===--------------- APINamesMath.inc -------------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
// Half Arithmetic Functions
ENTRY_RENAMED("__hfma", MapNames::getClNamespace(false, true) + "fma")

// Half2 Arithmetic Functions
ENTRY_RENAMED("__hfma2", MapNames::getClNamespace(false, true) + "fma")

// Half Comparison Functions
ENTRY_RENAMED("__hisinf", MapNames::getClNamespace(false, true) + "isinf")
ENTRY_RENAMED("__hisnan", MapNames::getClNamespace(false, true) + "isnan")

// Half Math Functions
ENTRY_RENAMED("hceil", MapNames::getClNamespace(false, true) + "ceil")
ENTRY_RENAMED("hcos", MapNames::getClNamespace(false, true) + "cos")
ENTRY_RENAMED("hexp", MapNames::getClNamespace(false, true) + "exp")
ENTRY_RENAMED("hexp10", MapNames::getClNamespace(false, true) + "exp10")
ENTRY_RENAMED("hexp2", MapNames::getClNamespace(false, true) + "exp2")
ENTRY_RENAMED("hfloor", MapNames::getClNamespace(false, true) + "floor")
ENTRY_RENAMED("hlog", MapNames::getClNamespace(false, true) + "log")
ENTRY_RENAMED("hlog10", MapNames::getClNamespace(false, true) + "log10")
ENTRY_RENAMED("hlog2", MapNames::getClNamespace(false, true) + "log2")
ENTRY_RENAMED("hrcp", MapNames::getClNamespace(false, true) + "half_precision::recip<float>")
ENTRY_RENAMED("hrint", MapNames::getClNamespace(false, true) + "rint")
ENTRY_RENAMED("hrsqrt", MapNames::getClNamespace(false, true) + "rsqrt")
ENTRY_RENAMED("hsin", MapNames::getClNamespace(false, true) + "sin")
ENTRY_RENAMED("hsqrt", MapNames::getClNamespace(false, true) + "sqrt")
ENTRY_RENAMED("htrunc", MapNames::getClNamespace(false, true) + "trunc")

// Half2 Math Functions
ENTRY_RENAMED("h2ceil", MapNames::getClNamespace(false, true) + "ceil")
ENTRY_RENAMED("h2cos", MapNames::getClNamespace(false, true) + "cos")
ENTRY_RENAMED("h2exp", MapNames::getClNamespace(false, true) + "exp")
ENTRY_RENAMED("h2exp10", MapNames::getClNamespace(false, true) + "exp10")
ENTRY_RENAMED("h2exp2", MapNames::getClNamespace(false, true) + "exp2")
ENTRY_RENAMED("h2floor", MapNames::getClNamespace(false, true) + "floor")
ENTRY_RENAMED("h2log", MapNames::getClNamespace(false, true) + "log")
ENTRY_RENAMED("h2log10", MapNames::getClNamespace(false, true) + "log10")
ENTRY_RENAMED("h2log2", MapNames::getClNamespace(false, true) + "log2")
ENTRY_RENAMED("h2rint", MapNames::getClNamespace(false, true) + "rint")
ENTRY_RENAMED("h2rsqrt", MapNames::getClNamespace(false, true) + "rsqrt")
ENTRY_RENAMED("h2sin", MapNames::getClNamespace(false, true) + "sin")
ENTRY_RENAMED("h2sqrt", MapNames::getClNamespace(false, true) + "sqrt")
ENTRY_RENAMED("h2trunc", MapNames::getClNamespace(false, true) + "trunc")

// Single Precision Mathematical Functions
ENTRY_RENAMED_SINGLE("acosf", MapNames::getClNamespace(false, true) + "acos")
ENTRY_RENAMED_SINGLE("acoshf", MapNames::getClNamespace(false, true) + "acosh")
ENTRY_RENAMED_SINGLE("asinf", MapNames::getClNamespace(false, true) + "asin")
ENTRY_RENAMED_SINGLE("asinhf", MapNames::getClNamespace(false, true) + "asinh")
ENTRY_RENAMED_SINGLE("atan2f", MapNames::getClNamespace(false, true) + "atan2")
ENTRY_RENAMED_SINGLE("atanf", MapNames::getClNamespace(false, true) + "atan")
ENTRY_RENAMED_SINGLE("atanhf", MapNames::getClNamespace(false, true) + "atanh")
ENTRY_RENAMED_SINGLE("cbrtf", MapNames::getClNamespace(false, true) + "cbrt")
ENTRY_RENAMED_SINGLE("ceilf", MapNames::getClNamespace(false, true) + "ceil")
ENTRY_RENAMED_SINGLE("copysignf", MapNames::getClNamespace(false, true) + "copysign")
ENTRY_RENAMED_SINGLE("cosf", MapNames::getClNamespace(false, true) + "cos")
ENTRY_RENAMED_SINGLE("coshf", MapNames::getClNamespace(false, true) + "cosh")
ENTRY_RENAMED_SINGLE("cospif", MapNames::getClNamespace(false, true) + "cospi")
ENTRY_RENAMED_SINGLE("erfcf", MapNames::getClNamespace(false, true) + "erfc")
ENTRY_RENAMED_SINGLE("erff", MapNames::getClNamespace(false, true) + "erf")
ENTRY_RENAMED_SINGLE("exp10f", MapNames::getClNamespace(false, true) + "exp10")
ENTRY_RENAMED_SINGLE("exp2f", MapNames::getClNamespace(false, true) + "exp2")
ENTRY_REWRITE("expf")
ENTRY_RENAMED_SINGLE("expm1f", MapNames::getClNamespace(false, true) + "expm1")
ENTRY_RENAMED_SINGLE("fabsf", MapNames::getClNamespace(false, true) + "fabs")
ENTRY_RENAMED_SINGLE("fdimf", MapNames::getClNamespace(false, true) + "fdim")
ENTRY_RENAMED_SINGLE("floorf", MapNames::getClNamespace(false, true) + "floor")
ENTRY_RENAMED_SINGLE("fmaf", MapNames::getClNamespace(false, true) + "fma")
ENTRY_RENAMED_SINGLE("fmaxf", MapNames::getClNamespace(false, true) + "fmax")
ENTRY_RENAMED_SINGLE("fminf", MapNames::getClNamespace(false, true) + "fmin")
ENTRY_RENAMED_SINGLE("fmodf", MapNames::getClNamespace(false, true) + "fmod")
ENTRY_RENAMED_SINGLE("hypotf", MapNames::getClNamespace(false, true) + "hypot")
ENTRY_RENAMED_SINGLE("ilogbf", MapNames::getClNamespace(false, true) + "ilogb")
ENTRY_RENAMED_SINGLE("isfinite", MapNames::getClNamespace(false, true) + "isfinite")
ENTRY_RENAMED_SINGLE("isinf", MapNames::getClNamespace(false, true) + "isinf")
ENTRY_RENAMED_SINGLE("isnan", MapNames::getClNamespace(false, true) + "isnan")
ENTRY_REWRITE("ldexpf")
ENTRY_RENAMED_SINGLE("lgammaf", MapNames::getClNamespace(false, true) + "lgamma")
ENTRY_RENAMED_SINGLE("llrintf", MapNames::getClNamespace(false, true) + "rint")
ENTRY_RENAMED_SINGLE("llroundf", MapNames::getClNamespace(false, true) + "round")
ENTRY_RENAMED_SINGLE("logf", MapNames::getClNamespace(false, true) + "log")
ENTRY_RENAMED_SINGLE("log10f", MapNames::getClNamespace(false, true) + "log10")
ENTRY_RENAMED_SINGLE("log1pf", MapNames::getClNamespace(false, true) + "log1p")
ENTRY_RENAMED_SINGLE("log2f", MapNames::getClNamespace(false, true) + "log2")
ENTRY_RENAMED_SINGLE("logbf", MapNames::getClNamespace(false, true) + "logb")
ENTRY_RENAMED_SINGLE("lrintf", MapNames::getClNamespace(false, true) + "rint")
ENTRY_RENAMED_SINGLE("lroundf", MapNames::getClNamespace(false, true) + "round")
ENTRY_RENAMED_SINGLE("nextafterf", MapNames::getClNamespace(false, true) + "nextafter")
ENTRY_REWRITE("rcbrtf")
ENTRY_RENAMED_SINGLE("remainderf", MapNames::getClNamespace(false, true) + "remainder")
ENTRY_RENAMED_SINGLE("rintf", MapNames::getClNamespace(false, true) + "rint")
ENTRY_RENAMED_SINGLE("roundf", MapNames::getClNamespace(false, true) + "round")
ENTRY_RENAMED_SINGLE("rsqrtf", MapNames::getClNamespace(false, true) + "rsqrt")
ENTRY_RENAMED_SINGLE("signbit", MapNames::getClNamespace(false, true) + "signbit")
ENTRY_RENAMED_SINGLE("sinf", MapNames::getClNamespace(false, true) + "sin")
ENTRY_RENAMED_SINGLE("sinhf", MapNames::getClNamespace(false, true) + "sinh")
ENTRY_RENAMED_SINGLE("sinpif", MapNames::getClNamespace(false, true) + "sinpi")
ENTRY_RENAMED_SINGLE("sqrtf", MapNames::getClNamespace(false, true) + "sqrt")
ENTRY_RENAMED_SINGLE("tanf", MapNames::getClNamespace(false, true) + "tan")
ENTRY_RENAMED_SINGLE("tanhf", MapNames::getClNamespace(false, true) + "tanh")
ENTRY_RENAMED_SINGLE("tgammaf", MapNames::getClNamespace(false, true) + "tgamma")
ENTRY_RENAMED_SINGLE("truncf", MapNames::getClNamespace(false, true) + "trunc")

// Single precision intrinisics
ENTRY_RENAMED_SINGLE("__cosf", MapNames::getClNamespace(false, true) + "cos")
ENTRY_RENAMED_SINGLE("__exp10f", MapNames::getClNamespace(false, true) + "exp10")
ENTRY_REWRITE("__expf")
ENTRY_RENAMED_SINGLE("__fmaf_rd", MapNames::getClNamespace(false, true) + "fma")
ENTRY_RENAMED_SINGLE("__fmaf_rn", MapNames::getClNamespace(false, true) + "fma")
ENTRY_RENAMED_SINGLE("__fmaf_ru", MapNames::getClNamespace(false, true) + "fma")
ENTRY_RENAMED_SINGLE("__fmaf_rz", MapNames::getClNamespace(false, true) + "fma")
ENTRY_RENAMED_SINGLE("__frcp_rd", MapNames::getClNamespace(false, true) + "native::recip")
ENTRY_RENAMED_SINGLE("__frcp_rn", MapNames::getClNamespace(false, true) + "native::recip")
ENTRY_RENAMED_SINGLE("__frcp_ru", MapNames::getClNamespace(false, true) + "native::recip")
ENTRY_RENAMED_SINGLE("__frcp_rz", MapNames::getClNamespace(false, true) + "native::recip")
ENTRY_RENAMED_SINGLE("__frsqrt_rn", MapNames::getClNamespace(false, true) + "rsqrt")
ENTRY_RENAMED_SINGLE("__fsqrt_rd", MapNames::getClNamespace(false, true) + "sqrt")
ENTRY_RENAMED_SINGLE("__fsqrt_rn", MapNames::getClNamespace(false, true) + "sqrt")
ENTRY_RENAMED_SINGLE("__fsqrt_ru", MapNames::getClNamespace(false, true) + "sqrt")
ENTRY_RENAMED_SINGLE("__fsqrt_rz", MapNames::getClNamespace(false, true) + "sqrt")
ENTRY_RENAMED_SINGLE("__log10f", MapNames::getClNamespace(false, true) + "log10")
ENTRY_RENAMED_SINGLE("__log2f", MapNames::getClNamespace(false, true) + "log2")
ENTRY_RENAMED_SINGLE("__logf", MapNames::getClNamespace(false, true) + "log")
ENTRY_RENAMED_SINGLE("__sinf", MapNames::getClNamespace(false, true) + "sin")
ENTRY_RENAMED_SINGLE("__tanf", MapNames::getClNamespace(false, true) + "tan")

// Double Precision Mathematical Functions
ENTRY_RENAMED_DOUBLE("acos", MapNames::getClNamespace(false, true) + "acos")
ENTRY_RENAMED_DOUBLE("acosh", MapNames::getClNamespace(false, true) + "acosh")
ENTRY_RENAMED_DOUBLE("asin", MapNames::getClNamespace(false, true) + "asin")
ENTRY_RENAMED_DOUBLE("asinh", MapNames::getClNamespace(false, true) + "asinh")
ENTRY_RENAMED_DOUBLE("atan2", MapNames::getClNamespace(false, true) + "atan2")
ENTRY_RENAMED_DOUBLE("atan", MapNames::getClNamespace(false, true) + "atan")
ENTRY_RENAMED_DOUBLE("atanh", MapNames::getClNamespace(false, true) + "atanh")
ENTRY_RENAMED_DOUBLE("cbrt", MapNames::getClNamespace(false, true) + "cbrt")
ENTRY_RENAMED_DOUBLE("ceil", MapNames::getClNamespace(false, true) + "ceil")
ENTRY_RENAMED_DOUBLE("copysign", MapNames::getClNamespace(false, true) + "copysign")
ENTRY_RENAMED_DOUBLE("cos", MapNames::getClNamespace(false, true) + "cos")
ENTRY_RENAMED_DOUBLE("cosh", MapNames::getClNamespace(false, true) + "cosh")
ENTRY_RENAMED_DOUBLE("cospi", MapNames::getClNamespace(false, true) + "cospi")
ENTRY_RENAMED_DOUBLE("erfc", MapNames::getClNamespace(false, true) + "erfc")
ENTRY_RENAMED_DOUBLE("erf", MapNames::getClNamespace(false, true) + "erf")
ENTRY_RENAMED_DOUBLE("exp10", MapNames::getClNamespace(false, true) + "exp10")
ENTRY_RENAMED_DOUBLE("exp2", MapNames::getClNamespace(false, true) + "exp2")
ENTRY_RENAMED_DOUBLE("exp", MapNames::getClNamespace(false, true) + "exp")
ENTRY_RENAMED_DOUBLE("expm1", MapNames::getClNamespace(false, true) + "expm1")
ENTRY_RENAMED_DOUBLE("fabs", MapNames::getClNamespace(false, true) + "fabs")
ENTRY_RENAMED_DOUBLE("fdim", MapNames::getClNamespace(false, true) + "fdim")
ENTRY_RENAMED_DOUBLE("floor", MapNames::getClNamespace(false, true) + "floor")
ENTRY_RENAMED_DOUBLE("fma", MapNames::getClNamespace(false, true) + "fma")
ENTRY_RENAMED_DOUBLE("fmax", MapNames::getClNamespace(false, true) + "fmax")
ENTRY_RENAMED_DOUBLE("fmin", MapNames::getClNamespace(false, true) + "fmin")
ENTRY_RENAMED_DOUBLE("fmod", MapNames::getClNamespace(false, true) + "fmod")
ENTRY_RENAMED_DOUBLE("hypot", MapNames::getClNamespace(false, true) + "hypot")
ENTRY_RENAMED_DOUBLE("ilogb", MapNames::getClNamespace(false, true) + "ilogb")
ENTRY_REWRITE("ldexp")
ENTRY_RENAMED_DOUBLE("lgamma", MapNames::getClNamespace(false, true) + "lgamma")
ENTRY_RENAMED_DOUBLE("llrint", MapNames::getClNamespace(false, true) + "rint")
ENTRY_RENAMED_DOUBLE("llround", MapNames::getClNamespace(false, true) + "round")
ENTRY_RENAMED_DOUBLE("log", MapNames::getClNamespace(false, true) + "log")
ENTRY_RENAMED_DOUBLE("log10", MapNames::getClNamespace(false, true) + "log10")
ENTRY_RENAMED_DOUBLE("log1p", MapNames::getClNamespace(false, true) + "log1p")
ENTRY_RENAMED_DOUBLE("log2", MapNames::getClNamespace(false, true) + "log2")
ENTRY_RENAMED_DOUBLE("logb", MapNames::getClNamespace(false, true) + "logb")
ENTRY_RENAMED_DOUBLE("lrint", MapNames::getClNamespace(false, true) + "rint")
ENTRY_RENAMED_DOUBLE("lround", MapNames::getClNamespace(false, true) + "round")
ENTRY_RENAMED_DOUBLE("nextafter", MapNames::getClNamespace(false, true) + "nextafter")
ENTRY_REWRITE("rcbrt")
ENTRY_RENAMED_DOUBLE("remainder", MapNames::getClNamespace(false, true) + "remainder")
ENTRY_RENAMED_DOUBLE("rint", MapNames::getClNamespace(false, true) + "rint")
ENTRY_RENAMED_DOUBLE("round", MapNames::getClNamespace(false, true) + "round")
ENTRY_RENAMED_DOUBLE("sin", MapNames::getClNamespace(false, true) + "sin")
ENTRY_RENAMED_DOUBLE("sinh", MapNames::getClNamespace(false, true) + "sinh")
ENTRY_RENAMED_DOUBLE("sinpi", MapNames::getClNamespace(false, true) + "sinpi")
ENTRY_RENAMED_DOUBLE("sqrt", MapNames::getClNamespace(false, true) + "sqrt")
ENTRY_RENAMED_DOUBLE("tan", MapNames::getClNamespace(false, true) + "tan")
ENTRY_RENAMED_DOUBLE("tanh", MapNames::getClNamespace(false, true) + "tanh")
ENTRY_RENAMED_DOUBLE("tgamma", MapNames::getClNamespace(false, true) + "tgamma")
ENTRY_RENAMED_DOUBLE("trunc", MapNames::getClNamespace(false, true) + "trunc")

// Double precision intrinisics
ENTRY_RENAMED_DOUBLE("__dsqrt_rd", MapNames::getClNamespace(false, true) + "sqrt")
ENTRY_RENAMED_DOUBLE("__dsqrt_rn", MapNames::getClNamespace(false, true) + "sqrt")
ENTRY_RENAMED_DOUBLE("__dsqrt_ru", MapNames::getClNamespace(false, true) + "sqrt")
ENTRY_RENAMED_DOUBLE("__dsqrt_rz", MapNames::getClNamespace(false, true) + "sqrt")
ENTRY_RENAMED_DOUBLE("__fma_rd", MapNames::getClNamespace(false, true) + "fma")
ENTRY_RENAMED_DOUBLE("__fma_rn", MapNames::getClNamespace(false, true) + "fma")
ENTRY_RENAMED_DOUBLE("__fma_ru", MapNames::getClNamespace(false, true) + "fma")
ENTRY_RENAMED_DOUBLE("__fma_rz", MapNames::getClNamespace(false, true) + "fma")

// Half Precision Conversion And Data Movement
ENTRY_RENAMED("__half_as_short", MapNames::getClNamespace(false, true) + "bit_cast")
ENTRY_RENAMED("__half_as_ushort", MapNames::getClNamespace(false, true) + "bit_cast")
ENTRY_RENAMED("__short_as_half", MapNames::getClNamespace(false, true) + "bit_cast")
ENTRY_RENAMED("__ushort_as_half", MapNames::getClNamespace(false, true) + "bit_cast")

// Type Casting Intrinsics
ENTRY_RENAMED("__double_as_longlong", MapNames::getClNamespace(false, true) + "bit_cast")
ENTRY_RENAMED("__float_as_int", MapNames::getClNamespace(false, true) + "bit_cast")
ENTRY_RENAMED("__float_as_uint", MapNames::getClNamespace(false, true) + "bit_cast")
ENTRY_RENAMED("__int_as_float", MapNames::getClNamespace(false, true) + "bit_cast")
ENTRY_RENAMED("__longlong_as_double", MapNames::getClNamespace(false, true) + "bit_cast")
ENTRY_RENAMED("__uint_as_float", MapNames::getClNamespace(false, true) + "bit_cast")

// Device: int => sycl::abs, (float, double) => sycl::fabs
// Host:   int => abs, float => fabsf, double => fabs, long double => fabsl
ENTRY_RENAMED("labs", MapNames::getClNamespace(false, true) + "abs")
ENTRY_RENAMED("llabs", MapNames::getClNamespace(false, true) + "abs")

ENTRY_REWRITE("max")
ENTRY_REWRITE("min")

// Integer Intrinsics
ENTRY_RENAMED("__clz", MapNames::getClNamespace(false, true) + "clz")
ENTRY_RENAMED("__clzll", MapNames::getClNamespace(false, true) + "clz")
ENTRY_REWRITE("__hadd")
ENTRY_RENAMED("__mul24", MapNames::getClNamespace(false, true) + "mul24")
ENTRY_RENAMED("__mulhi", MapNames::getClNamespace(false, true) + "mul_hi")
ENTRY_RENAMED("__popc", MapNames::getClNamespace(false, true) + "popcount")
ENTRY_RENAMED("__popcll", MapNames::getClNamespace(false, true) + "popcount")
ENTRY_RENAMED("__brev", MapNames::getDpctNamespace() + "reverse_bits<unsigned int>")
ENTRY_RENAMED("__brevll", MapNames::getDpctNamespace() + "reverse_bits<unsigned long long>")
ENTRY_RENAMED("__byte_perm", MapNames::getDpctNamespace() + "byte_level_permute")
ENTRY_RENAMED("__ffs", MapNames::getDpctNamespace() + "ffs<int>")
ENTRY_RENAMED("__ffsll", MapNames::getDpctNamespace() + "ffs<long long int>")
ENTRY_EMULATED("__funnelshift_l", "((upsample(hi, lo) << (shift & 31)) >> 32)")
ENTRY_EMULATED("__funnelshift_lc", "((upsample(hi, lo) << min(shift, 32)) >> 32)")
ENTRY_EMULATED("__funnelshift_r", "((upsample(hi, lo) >> (shift & 31)) & 0xFFFFFFFF)")
ENTRY_EMULATED("__funnelshift_rc", "((upsample(hi, lo) >> min(shift, 32)) & 0xFFFFFFFF)")
// Used to add header file "<cmath>" into the file that calls "fabs".
ENTRY_RENAMED("fabs", "::fabs")

// Renamed Version 2
ENTRY_RENAMED("__mul64hi", MapNames::getClNamespace(false, true) + "mul_hi")
ENTRY_RENAMED("__rhadd", MapNames::getClNamespace(false, true) + "rhadd")
ENTRY_RENAMED("__uhadd", MapNames::getClNamespace(false, true) + "hadd")
ENTRY_RENAMED("__umul24", MapNames::getClNamespace(false, true) + "mul24")
ENTRY_RENAMED("__umulhi", MapNames::getClNamespace(false, true) + "mul_hi")
ENTRY_RENAMED("__urhadd", MapNames::getClNamespace(false, true) + "rhadd")

// Renamed No Rewrite
ENTRY_RENAMED_NO_REWRITE("__umul64hi", MapNames::getClNamespace(false, true) + "mul_hi")

// Single Precision Mathematical Functions
ENTRY_EMULATED("frexpf", MapNames::getClNamespace(false, true) + "frexp")
ENTRY_EMULATED("modff", MapNames::getClNamespace(false, true) + "modf")
ENTRY_EMULATED("nanf", MapNames::getClNamespace(false, true) + "nan")
ENTRY_EMULATED("nearbyintf", MapNames::getClNamespace(false, true) + "floor")
ENTRY_EMULATED("remquof", MapNames::getClNamespace(false, true) + "remquo")
ENTRY_EMULATED("rhypotf", MapNames::getClNamespace(false, true) + "hypot")
ENTRY_EMULATED("sincosf", MapNames::getClNamespace(false, true) + "sincos")
ENTRY_EMULATED("sincospif", MapNames::getClNamespace(false, true) + "sincos")
ENTRY_EMULATED("__sincosf", MapNames::getClNamespace(false, true) + "sincos")
ENTRY_EMULATED("powf", MapNames::getClNamespace(false, true) + "pow<float>")
ENTRY_EMULATED("__powf", MapNames::getClNamespace(false, true) + "pow<float>")

// Double Precision Mathematical Functions
ENTRY_EMULATED("frexp", MapNames::getClNamespace(false, true) + "frexp")
ENTRY_EMULATED("modf", MapNames::getClNamespace(false, true) + "modf")
ENTRY_EMULATED("nan", MapNames::getClNamespace(false, true) + "nan")
ENTRY_EMULATED("nearbyint", MapNames::getClNamespace(false, true) + "floor")
ENTRY_EMULATED("remquo", MapNames::getClNamespace(false, true) + "remquo")
ENTRY_EMULATED("rhypot", MapNames::getClNamespace(false, true) + "hypot")
ENTRY_EMULATED("sincos", MapNames::getClNamespace(false, true) + "sincos")
ENTRY_EMULATED("sincospi", MapNames::getClNamespace(false, true) + "sincos")
ENTRY_EMULATED("pow", MapNames::getClNamespace(false, true) + "pow<double>")

// Emulated Version 2
ENTRY_EMULATED("erfcx", MapNames::getClNamespace(false, true) + "erfc")
ENTRY_EMULATED("erfcxf", MapNames::getClNamespace(false, true) + "erfc")
ENTRY_EMULATED("scalbln", MapNames::getClNamespace(false, true) + "exp2")
ENTRY_EMULATED("scalblnf", MapNames::getClNamespace(false, true) + "exp2")
ENTRY_EMULATED("scalbn", MapNames::getClNamespace(false, true) + "exp2")
ENTRY_EMULATED("scalbnf", MapNames::getClNamespace(false, true) + "exp2")
ENTRY_EMULATED("__double2hiint", "")
ENTRY_EMULATED("__double2loint", "")
ENTRY_EMULATED("__hiloint2double", "")
ENTRY_EMULATED("__sad", MapNames::getClNamespace(false, true) + "abs_diff")
ENTRY_EMULATED("__usad", MapNames::getClNamespace(false, true) + "abs_diff")
ENTRY_EMULATED("__drcp_rd", "(1.0/(X))")
ENTRY_EMULATED("__drcp_rn", "(1.0/(X))")
ENTRY_EMULATED("__drcp_ru", "(1.0/(X))")
ENTRY_EMULATED("__drcp_rz", "(1.0/(X))")


// Half/Half2 Arithmetic Functions
ENTRY_RENAMED("__habs", MapNames::getClNamespace(false, true) + "fabs")
ENTRY_RENAMED("__habs2", MapNames::getClNamespace(false, true) + "fabs")
ENTRY_REWRITE("__hadd2")
ENTRY_REWRITE("__h2div")
ENTRY_REWRITE("__hdiv")
ENTRY_REWRITE("hdiv")
ENTRY_REWRITE("h2div")
ENTRY_REWRITE("__hmul")
ENTRY_REWRITE("__hmul2")
ENTRY_REWRITE("__hsub")
ENTRY_REWRITE("__hsub2")
ENTRY_REWRITE("__hneg")
ENTRY_REWRITE("__hneg2")

// Half Comparison Functions
ENTRY_REWRITE("__heq")
ENTRY_REWRITE("__hne")
ENTRY_REWRITE("__hge")
ENTRY_REWRITE("__hgt")
ENTRY_REWRITE("__hle")
ENTRY_REWRITE("__hlt")

// Single Precision Mathematical Functions
ENTRY_OPERATOR("__fadd_rd", BinaryOperatorKind::BO_Add)
ENTRY_OPERATOR("__fadd_rn", BinaryOperatorKind::BO_Add)
ENTRY_OPERATOR("__fadd_ru", BinaryOperatorKind::BO_Add)
ENTRY_OPERATOR("__fadd_rz", BinaryOperatorKind::BO_Add)
ENTRY_OPERATOR("__fsub_rd", BinaryOperatorKind::BO_Sub)
ENTRY_OPERATOR("__fsub_rn", BinaryOperatorKind::BO_Sub)
ENTRY_OPERATOR("__fsub_ru", BinaryOperatorKind::BO_Sub)
ENTRY_OPERATOR("__fsub_rz", BinaryOperatorKind::BO_Sub)
ENTRY_OPERATOR("__fmul_rd", BinaryOperatorKind::BO_Mul)
ENTRY_OPERATOR("__fmul_rn", BinaryOperatorKind::BO_Mul)
ENTRY_OPERATOR("__fmul_ru", BinaryOperatorKind::BO_Mul)
ENTRY_OPERATOR("__fmul_rz", BinaryOperatorKind::BO_Mul)
ENTRY_OPERATOR("__fdiv_rd", BinaryOperatorKind::BO_Div)
ENTRY_OPERATOR("__fdiv_rn", BinaryOperatorKind::BO_Div)
ENTRY_OPERATOR("__fdiv_ru", BinaryOperatorKind::BO_Div)
ENTRY_OPERATOR("__fdiv_rz", BinaryOperatorKind::BO_Div)
ENTRY_OPERATOR("fdividef",  BinaryOperatorKind::BO_Div)
ENTRY_OPERATOR("__fdividef", BinaryOperatorKind::BO_Div)

// Double precision intrinisics
ENTRY_OPERATOR("__dadd_rd", BinaryOperatorKind::BO_Add)
ENTRY_OPERATOR("__dadd_rn", BinaryOperatorKind::BO_Add)
ENTRY_OPERATOR("__dadd_ru", BinaryOperatorKind::BO_Add)
ENTRY_OPERATOR("__dadd_rz", BinaryOperatorKind::BO_Add)
ENTRY_OPERATOR("__dsub_rd", BinaryOperatorKind::BO_Sub)
ENTRY_OPERATOR("__dsub_rn", BinaryOperatorKind::BO_Sub)
ENTRY_OPERATOR("__dsub_ru", BinaryOperatorKind::BO_Sub)
ENTRY_OPERATOR("__dsub_rz", BinaryOperatorKind::BO_Sub)
ENTRY_OPERATOR("__dmul_rd", BinaryOperatorKind::BO_Mul)
ENTRY_OPERATOR("__dmul_rn", BinaryOperatorKind::BO_Mul)
ENTRY_OPERATOR("__dmul_ru", BinaryOperatorKind::BO_Mul)
ENTRY_OPERATOR("__dmul_rz", BinaryOperatorKind::BO_Mul)
ENTRY_OPERATOR("__ddiv_rd", BinaryOperatorKind::BO_Div)
ENTRY_OPERATOR("__ddiv_rn", BinaryOperatorKind::BO_Div)
ENTRY_OPERATOR("__ddiv_ru", BinaryOperatorKind::BO_Div)
ENTRY_OPERATOR("__ddiv_rz", BinaryOperatorKind::BO_Div)


// Half Precision Conversion And Data Movement
ENTRY_TYPECAST("__float22half2_rn")
ENTRY_TYPECAST("__float2half")
ENTRY_TYPECAST("__float2half2_rn")
ENTRY_TYPECAST("__float2half_rd")
ENTRY_TYPECAST("__float2half_rn")
ENTRY_TYPECAST("__float2half_ru")
ENTRY_TYPECAST("__float2half_rz")
ENTRY_TYPECAST("__floats2half2_rn")
ENTRY_TYPECAST("__half22float2")
ENTRY_TYPECAST("__half2float")
ENTRY_TYPECAST("__half2half2")
ENTRY_TYPECAST("__half2int_rd")
ENTRY_TYPECAST("__half2int_rn")
ENTRY_TYPECAST("__half2int_ru")
ENTRY_TYPECAST("__half2int_rz")
ENTRY_TYPECAST("__half2ll_rd")
ENTRY_TYPECAST("__half2ll_rn")
ENTRY_TYPECAST("__half2ll_ru")
ENTRY_TYPECAST("__half2ll_rz")
ENTRY_TYPECAST("__half2short_rd")
ENTRY_TYPECAST("__half2short_rn")
ENTRY_TYPECAST("__half2short_ru")
ENTRY_TYPECAST("__half2short_rz")
ENTRY_TYPECAST("__half2uint_rd")
ENTRY_TYPECAST("__half2uint_rn")
ENTRY_TYPECAST("__half2uint_ru")
ENTRY_TYPECAST("__half2uint_rz")
ENTRY_TYPECAST("__half2ull_rd")
ENTRY_TYPECAST("__half2ull_rn")
ENTRY_TYPECAST("__half2ull_ru")
ENTRY_TYPECAST("__half2ull_rz")
ENTRY_TYPECAST("__half2ushort_rd")
ENTRY_TYPECAST("__half2ushort_rn")
ENTRY_TYPECAST("__half2ushort_ru")
ENTRY_TYPECAST("__half2ushort_rz")
ENTRY_TYPECAST("__halves2half2")
ENTRY_REWRITE("__high2float")
ENTRY_TYPECAST("__high2half")
ENTRY_TYPECAST("__high2half2")
ENTRY_TYPECAST("__highs2half2")
ENTRY_TYPECAST("__int2half_rd")
ENTRY_TYPECAST("__int2half_rn")
ENTRY_TYPECAST("__int2half_ru")
ENTRY_TYPECAST("__int2half_rz")
ENTRY_REWRITE("__ldca")
ENTRY_REWRITE("__ldcg")
ENTRY_REWRITE("__ldcs")
ENTRY_REWRITE("__ldcv")
ENTRY_REWRITE("__ldg")
ENTRY_REWRITE("__ldlu")
ENTRY_TYPECAST("__ll2half_rd")
ENTRY_TYPECAST("__ll2half_rn")
ENTRY_TYPECAST("__ll2half_ru")
ENTRY_TYPECAST("__ll2half_rz")
ENTRY_REWRITE("__low2float")
ENTRY_TYPECAST("__low2half")
ENTRY_TYPECAST("__low2half2")
ENTRY_TYPECAST("__lowhigh2highlow")
ENTRY_TYPECAST("__lows2half2")
ENTRY_TYPECAST("__short2half_rd")
ENTRY_TYPECAST("__short2half_rn")
ENTRY_TYPECAST("__short2half_ru")
ENTRY_TYPECAST("__short2half_rz")
ENTRY_REWRITE("__stcg")
ENTRY_REWRITE("__stcs")
ENTRY_REWRITE("__stwb")
ENTRY_REWRITE("__stwt")
ENTRY_TYPECAST("__uint2half_rd")
ENTRY_TYPECAST("__uint2half_rn")
ENTRY_TYPECAST("__uint2half_ru")
ENTRY_TYPECAST("__uint2half_rz")
ENTRY_TYPECAST("__ull2half_rd")
ENTRY_TYPECAST("__ull2half_rn")
ENTRY_TYPECAST("__ull2half_ru")
ENTRY_TYPECAST("__ull2half_rz")
ENTRY_TYPECAST("__ushort2half_rd")
ENTRY_TYPECAST("__ushort2half_rn")
ENTRY_TYPECAST("__ushort2half_ru")
ENTRY_TYPECAST("__ushort2half_rz")

// Bfloat16 Precision Conversion and Data Movement
ENTRY_REWRITE("__bfloat1622float2")
ENTRY_REWRITE("__bfloat162float")
ENTRY_REWRITE("__float22bfloat162_rn")
ENTRY_REWRITE("__float2bfloat16")

// Type Casting Intrinsics
ENTRY_TYPECAST("__double2float_rd")
ENTRY_TYPECAST("__double2float_rn")
ENTRY_TYPECAST("__double2float_ru")
ENTRY_TYPECAST("__double2float_rz")
ENTRY_TYPECAST("__double2int_rd")
ENTRY_TYPECAST("__double2int_rn")
ENTRY_TYPECAST("__double2int_ru")
ENTRY_TYPECAST("__double2int_rz")
ENTRY_TYPECAST("__double2ll_rd")
ENTRY_TYPECAST("__double2ll_rn")
ENTRY_TYPECAST("__double2ll_ru")
ENTRY_TYPECAST("__double2ll_rz")
ENTRY_TYPECAST("__double2uint_rd")
ENTRY_TYPECAST("__double2uint_rn")
ENTRY_TYPECAST("__double2uint_ru")
ENTRY_TYPECAST("__double2uint_rz")
ENTRY_TYPECAST("__double2ull_rd")
ENTRY_TYPECAST("__double2ull_rn")
ENTRY_TYPECAST("__double2ull_ru")
ENTRY_TYPECAST("__double2ull_rz")
ENTRY_TYPECAST("__float2int_rd")
ENTRY_TYPECAST("__float2int_rn")
ENTRY_TYPECAST("__float2int_ru")
ENTRY_TYPECAST("__float2int_rz")
ENTRY_TYPECAST("__float2ll_rd")
ENTRY_TYPECAST("__float2ll_rn")
ENTRY_TYPECAST("__float2ll_ru")
ENTRY_TYPECAST("__float2ll_rz")
ENTRY_TYPECAST("__float2uint_rd")
ENTRY_TYPECAST("__float2uint_rn")
ENTRY_TYPECAST("__float2uint_ru")
ENTRY_TYPECAST("__float2uint_rz")
ENTRY_TYPECAST("__float2ull_rd")
ENTRY_TYPECAST("__float2ull_rn")
ENTRY_TYPECAST("__float2ull_ru")
ENTRY_TYPECAST("__float2ull_rz")
ENTRY_TYPECAST("__int2double_rn")
ENTRY_TYPECAST("__int2float_rd")
ENTRY_TYPECAST("__int2float_rn")
ENTRY_TYPECAST("__int2float_ru")
ENTRY_TYPECAST("__int2float_rz")
ENTRY_TYPECAST("__ll2double_rd")
ENTRY_TYPECAST("__ll2double_rn")
ENTRY_TYPECAST("__ll2double_ru")
ENTRY_TYPECAST("__ll2double_rz")
ENTRY_TYPECAST("__ll2float_rd")
ENTRY_TYPECAST("__ll2float_rn")
ENTRY_TYPECAST("__ll2float_ru")
ENTRY_TYPECAST("__ll2float_rz")
ENTRY_TYPECAST("__uint2double_rn")
ENTRY_TYPECAST("__uint2float_rd")
ENTRY_TYPECAST("__uint2float_rn")
ENTRY_TYPECAST("__uint2float_ru")
ENTRY_TYPECAST("__uint2float_rz")
ENTRY_TYPECAST("__ull2double_rd")
ENTRY_TYPECAST("__ull2double_rn")
ENTRY_TYPECAST("__ull2double_ru")
ENTRY_TYPECAST("__ull2double_rz")
ENTRY_TYPECAST("__ull2float_rd")
ENTRY_TYPECAST("__ull2float_rn")
ENTRY_TYPECAST("__ull2float_ru")
ENTRY_TYPECAST("__ull2float_rz")

// SIMD Intrinsics
ENTRY_REWRITE("__vabs2")
ENTRY_REWRITE("__vabs4")
ENTRY_REWRITE("__vabsdiffs2")
ENTRY_REWRITE("__vabsdiffs4")
ENTRY_REWRITE("__vabsdiffu2")
ENTRY_REWRITE("__vabsdiffu4")
ENTRY_REWRITE("__vabsss2")
ENTRY_REWRITE("__vabsss4")
ENTRY_REWRITE("__vadd2")
ENTRY_REWRITE("__vadd4")
ENTRY_REWRITE("__vaddss2")
ENTRY_REWRITE("__vaddss4")
ENTRY_REWRITE("__vaddus2")
ENTRY_REWRITE("__vaddus4")
ENTRY_REWRITE("__vavgs2")
ENTRY_REWRITE("__vavgs4")
ENTRY_REWRITE("__vavgu2")
ENTRY_REWRITE("__vavgu4")
ENTRY_REWRITE("__vcmpeq2")
ENTRY_REWRITE("__vcmpeq4")
ENTRY_REWRITE("__vcmpges2")
ENTRY_REWRITE("__vcmpges4")
ENTRY_REWRITE("__vcmpgeu2")
ENTRY_REWRITE("__vcmpgeu4")
ENTRY_REWRITE("__vcmpgts2")
ENTRY_REWRITE("__vcmpgts4")
ENTRY_REWRITE("__vcmpgtu2")
ENTRY_REWRITE("__vcmpgtu4")
ENTRY_REWRITE("__vcmples2")
ENTRY_REWRITE("__vcmples4")
ENTRY_REWRITE("__vcmpleu2")
ENTRY_REWRITE("__vcmpleu4")
ENTRY_REWRITE("__vcmplts2")
ENTRY_REWRITE("__vcmplts4")
ENTRY_REWRITE("__vcmpltu2")
ENTRY_REWRITE("__vcmpltu4")
ENTRY_REWRITE("__vcmpne2")
ENTRY_REWRITE("__vcmpne4")
ENTRY_REWRITE("__vhaddu2")
ENTRY_REWRITE("__vhaddu4")
ENTRY_REWRITE("__vmaxs2")
ENTRY_REWRITE("__vmaxs4")
ENTRY_REWRITE("__vmaxu2")
ENTRY_REWRITE("__vmaxu4")
ENTRY_REWRITE("__vmins2")
ENTRY_REWRITE("__vmins4")
ENTRY_REWRITE("__vminu2")
ENTRY_REWRITE("__vminu4")
ENTRY_REWRITE("__vneg2")
ENTRY_REWRITE("__vneg4")
ENTRY_REWRITE("__vnegss2")
ENTRY_REWRITE("__vnegss4")
ENTRY_REWRITE("__vsads2")
ENTRY_REWRITE("__vsads4")
ENTRY_REWRITE("__vsadu2")
ENTRY_REWRITE("__vsadu4")
ENTRY_REWRITE("__vseteq2")
ENTRY_REWRITE("__vseteq4")
ENTRY_REWRITE("__vsetges2")
ENTRY_REWRITE("__vsetges4")
ENTRY_REWRITE("__vsetgeu2")
ENTRY_REWRITE("__vsetgeu4")
ENTRY_REWRITE("__vsetgts2")
ENTRY_REWRITE("__vsetgts4")
ENTRY_REWRITE("__vsetgtu2")
ENTRY_REWRITE("__vsetgtu4")
ENTRY_REWRITE("__vsetles2")
ENTRY_REWRITE("__vsetles4")
ENTRY_REWRITE("__vsetleu2")
ENTRY_REWRITE("__vsetleu4")
ENTRY_REWRITE("__vsetlts2")
ENTRY_REWRITE("__vsetlts4")
ENTRY_REWRITE("__vsetltu2")
ENTRY_REWRITE("__vsetltu4")
ENTRY_REWRITE("__vsetne2")
ENTRY_REWRITE("__vsetne4")
ENTRY_REWRITE("__vsub2")
ENTRY_REWRITE("__vsub4")
ENTRY_REWRITE("__vsubss2")
ENTRY_REWRITE("__vsubss4")
ENTRY_REWRITE("__vsubus2")
ENTRY_REWRITE("__vsubus4")

// Half Arithmetic Functions
ENTRY_REWRITE("__hadd_sat")
ENTRY_REWRITE("__hfma_sat")
ENTRY_REWRITE("__hmul_sat")
ENTRY_REWRITE("__hsub_sat")

// Half2 Arithmetic Functions
ENTRY_REWRITE("__hadd2_sat")
ENTRY_REWRITE("__hfma2_sat")
ENTRY_REWRITE("__hmul2_sat")
ENTRY_REWRITE("__hsub2_sat")

// Half Comparison Functions
ENTRY_REWRITE("__hequ")
ENTRY_REWRITE("__hgeu")
ENTRY_REWRITE("__hgtu")
ENTRY_REWRITE("__hleu")
ENTRY_REWRITE("__hltu")
ENTRY_REWRITE("__hneu")

// Half2 Comparison Functions
ENTRY_REWRITE("__hbeq2")
ENTRY_REWRITE("__hbequ2")
ENTRY_REWRITE("__hbge2")
ENTRY_REWRITE("__hbgeu2")
ENTRY_REWRITE("__hbgt2")
ENTRY_REWRITE("__hbgtu2")
ENTRY_REWRITE("__hble2")
ENTRY_REWRITE("__hbleu2")
ENTRY_REWRITE("__hblt2")
ENTRY_REWRITE("__hbltu2")
ENTRY_REWRITE("__hbne2")
ENTRY_REWRITE("__hbneu2")
ENTRY_REWRITE("__heq2")
ENTRY_REWRITE("__hequ2")
ENTRY_REWRITE("__hge2")
ENTRY_REWRITE("__hgeu2")
ENTRY_REWRITE("__hgt2")
ENTRY_REWRITE("__hgtu2")
ENTRY_REWRITE("__hisnan2")
ENTRY_REWRITE("__hle2")
ENTRY_REWRITE("__hleu2")
ENTRY_REWRITE("__hlt2")
ENTRY_REWRITE("__hltu2")
ENTRY_REWRITE("__hne2")
ENTRY_REWRITE("__hneu2")

// Half2 Math Functions
ENTRY_UNSUPPORTED("h2rcp")

// Single Precision Mathematical Functions
ENTRY_UNSUPPORTED("cyl_bessel_i0f")
ENTRY_UNSUPPORTED("cyl_bessel_i1f")
ENTRY_REWRITE("erfcinvf")
ENTRY_REWRITE("erfinvf")
ENTRY_UNSUPPORTED("j0f")
ENTRY_UNSUPPORTED("j1f")
ENTRY_UNSUPPORTED("jnf")
ENTRY_REWRITE("normcdff")
ENTRY_REWRITE("normcdfinvf")
ENTRY_REWRITE("norm3df")
ENTRY_REWRITE("norm4df")
ENTRY_REWRITE("normf")
ENTRY_REWRITE("rnorm3df")
ENTRY_REWRITE("rnorm4df")
ENTRY_REWRITE("rnormf")
ENTRY_UNSUPPORTED("y0f")
ENTRY_UNSUPPORTED("y1f")
ENTRY_UNSUPPORTED("ynf")

// Double Precision Mathematical Functions
ENTRY_UNSUPPORTED("cyl_bessel_i0")
ENTRY_UNSUPPORTED("cyl_bessel_i1")
ENTRY_REWRITE("erfcinv")
ENTRY_REWRITE("erfinv")
ENTRY_UNSUPPORTED("j0")
ENTRY_UNSUPPORTED("j1")
ENTRY_UNSUPPORTED("jn")
ENTRY_REWRITE("norm")
ENTRY_REWRITE("norm3d")
ENTRY_REWRITE("norm4d")
ENTRY_REWRITE("normcdf")
ENTRY_REWRITE("normcdfinv")
ENTRY_REWRITE("rnorm")
ENTRY_REWRITE("rnorm3d")
ENTRY_REWRITE("rnorm4d")
ENTRY_UNSUPPORTED("y0")
ENTRY_UNSUPPORTED("y1")
ENTRY_UNSUPPORTED("yn")

// Integer Mathematical Functions
ENTRY_REWRITE("llmax")
ENTRY_REWRITE("llmin")
ENTRY_REWRITE("ullmax")
ENTRY_REWRITE("ullmin")
ENTRY_REWRITE("umax")
ENTRY_REWRITE("umin")

// crt wrapper API
ENTRY_RENAMED("mul24", MapNames::getClNamespace(false, true) + "mul24")

// impl with new rewriter
ENTRY_REWRITE("rsqrt")
ENTRY_REWRITE("abs")
ENTRY_REWRITE("saturate")

// vector types
ENTRY_RENAMED("make_char1", "char")
ENTRY_RENAMED("make_char2", MapNames::getClNamespace(false, false) + "char2")
ENTRY_RENAMED("make_char3", MapNames::getClNamespace(false, false) + "char3")
ENTRY_RENAMED("make_char4", MapNames::getClNamespace(false, false) + "char4")
ENTRY_RENAMED("make_uchar1", "uint8_t")
ENTRY_RENAMED("make_uchar2", MapNames::getClNamespace(false, false) + "uchar2")
ENTRY_RENAMED("make_uchar3", MapNames::getClNamespace(false, false) + "uchar3")
ENTRY_RENAMED("make_uchar4", MapNames::getClNamespace(false, false) + "uchar4")

ENTRY_RENAMED("make_short1", "short")
ENTRY_RENAMED("make_short2", MapNames::getClNamespace(false, false) + "short2")
ENTRY_RENAMED("make_short3", MapNames::getClNamespace(false, false) + "short3")
ENTRY_RENAMED("make_short4", MapNames::getClNamespace(false, false) + "short4")
ENTRY_RENAMED("make_ushort1", "uint16_t")
ENTRY_RENAMED("make_ushort2", MapNames::getClNamespace(false, false) + "ushort2")
ENTRY_RENAMED("make_ushort3", MapNames::getClNamespace(false, false) + "ushort3")
ENTRY_RENAMED("make_ushort4", MapNames::getClNamespace(false, false) + "ushort4")

ENTRY_RENAMED("make_int1", "int")
ENTRY_RENAMED("make_int2", MapNames::getClNamespace(false, false) + "int2")
ENTRY_RENAMED("make_int3", MapNames::getClNamespace(false, false) + "int3")
ENTRY_RENAMED("make_int4", MapNames::getClNamespace(false, false) + "int4")
ENTRY_RENAMED("make_uint1", "uint32_t")
ENTRY_RENAMED("make_uint2", MapNames::getClNamespace(false, false) + "uint2")
ENTRY_RENAMED("make_uint3", MapNames::getClNamespace(false, false) + "uint3")
ENTRY_RENAMED("make_uint4", MapNames::getClNamespace(false, false) + "uint4")

ENTRY_RENAMED("make_long1", "long")
ENTRY_RENAMED("make_long2", MapNames::getClNamespace(false, false) + "long2")
ENTRY_RENAMED("make_long3", MapNames::getClNamespace(false, false) + "long3")
ENTRY_RENAMED("make_long4", MapNames::getClNamespace(false, false) + "long4")
ENTRY_RENAMED("make_ulong1", "uint64_t")
ENTRY_RENAMED("make_ulong2", MapNames::getClNamespace(false, false) + "ulong2")
ENTRY_RENAMED("make_ulong3", MapNames::getClNamespace(false, false) + "ulong3")
ENTRY_RENAMED("make_ulong4", MapNames::getClNamespace(false, false) + "ulong4")

ENTRY_RENAMED("make_longlong1", "int64_t")
ENTRY_RENAMED("make_longlong2", MapNames::getClNamespace(false, false) + "long2")
ENTRY_RENAMED("make_longlong3", MapNames::getClNamespace(false, false) + "long3")
ENTRY_RENAMED("make_longlong4", MapNames::getClNamespace(false, false) + "long4")
ENTRY_RENAMED("make_ulonglong1", "uint64_t")
ENTRY_RENAMED("make_ulonglong2", MapNames::getClNamespace(false, false) + "ulong2")
ENTRY_RENAMED("make_ulonglong3", MapNames::getClNamespace(false, false) + "ulong3")
ENTRY_RENAMED("make_ulonglong4", MapNames::getClNamespace(false, false) + "ulong4")

ENTRY_RENAMED("make_float1", "float")
ENTRY_RENAMED("make_float2", MapNames::getClNamespace(false, false) + "float2")
ENTRY_RENAMED("make_float3", MapNames::getClNamespace(false, false) + "float3")
ENTRY_RENAMED("make_float4", MapNames::getClNamespace(false, false) + "float4")

ENTRY_RENAMED("make_double1", "double")
ENTRY_RENAMED("make_double2", MapNames::getClNamespace(false, false) + "double2")
ENTRY_RENAMED("make_double3", MapNames::getClNamespace(false, false) + "double3")
ENTRY_RENAMED("make_double4", MapNames::getClNamespace(false, false) + "double4")
